/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "http":
/*!***********************************************************!*\
  !*** external " globalThis.__import_unsupported('http')" ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports =  globalThis.__import_unsupported('http');

/***/ }),

/***/ "https":
/*!************************************************************!*\
  !*** external " globalThis.__import_unsupported('https')" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports =  globalThis.__import_unsupported('https');

/***/ }),

/***/ "stream":
/*!*************************************************************!*\
  !*** external " globalThis.__import_unsupported('stream')" ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
if(typeof  globalThis.__import_unsupported('stream') === 'undefined') { var e = new Error("Cannot find module ' globalThis.__import_unsupported('stream')'"); e.code = 'MODULE_NOT_FOUND'; throw e; }

module.exports =  globalThis.__import_unsupported('stream');

/***/ }),

/***/ "string_decoder":
/*!*********************************************************************!*\
  !*** external " globalThis.__import_unsupported('string_decoder')" ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports =  globalThis.__import_unsupported('string_decoder');

/***/ }),

/***/ "(middleware)/./middleware.ts":
/*!***********************!*\
  !*** ./middleware.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(middleware)/./node_modules/next/dist/esm/server/web/exports/next-response.js\");\n/* harmony import */ var iron_session__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! iron-session */ \"(middleware)/./node_modules/iron-session/dist/index.js\");\n/* harmony import */ var _utils_session__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/session */ \"(middleware)/./utils/session.ts\");\n/* harmony import */ var _utils_getOdooSession__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/getOdooSession */ \"(middleware)/./utils/getOdooSession.tsx\");\n\n\n\n\nasync function middleware(req, res) {\n    try {\n        /* On Every Route */ if (!req.nextUrl.pathname.includes(\"/auth\") && req.nextUrl.pathname.startsWith(\"/api\")) {\n            //return await fetchUserMiddleware(request)\n            const session = await (0,iron_session__WEBPACK_IMPORTED_MODULE_3__.getIronSession)(req, res, _utils_session__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n            if (!session) return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"](JSON.stringify({\n                status: 403,\n                message: \"Forbidden\"\n            }));\n            const odoo = await (0,_utils_getOdooSession__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(req, res);\n            if (!odoo) throw Error(\"InvalidOdooSession\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].next();\n        }\n    /* Redirect example */ //   if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    //     return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n    //   }\n    } catch (e) {\n        console.error(e);\n        return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"](JSON.stringify({\n            status: 500,\n            text: \"Internal Server Error\",\n            error: e\n        }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbWlkZGxld2FyZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUEyQztBQUdHO0FBQ0Y7QUFFUTtBQUU3QyxlQUFlSSxXQUFXQyxHQUFnQixFQUFFQyxHQUFnQjtJQUVqRSxJQUFJO1FBQ04sa0JBQWtCLEdBQ2QsSUFBSSxDQUFDRCxJQUFJRSxPQUFPLENBQUNDLFFBQVEsQ0FBQ0MsUUFBUSxDQUFDLFlBQy9CSixJQUFJRSxPQUFPLENBQUNDLFFBQVEsQ0FBQ0UsVUFBVSxDQUFDLFNBQVM7WUFFekMsMkNBQTJDO1lBQzNDLE1BQU1DLFVBQWdDLE1BQU1WLDREQUFjQSxDQUFDSSxLQUFJQyxLQUFLSixzREFBYUE7WUFDakYsSUFBRyxDQUFDUyxTQUFTLE9BQU8sSUFBSVgsa0ZBQVlBLENBQUVZLEtBQUtDLFNBQVMsQ0FBQztnQkFBRUMsUUFBUTtnQkFBS0MsU0FBUTtZQUFXO1lBQ3ZGLE1BQU1DLE9BQU8sTUFBTWIsaUVBQWNBLENBQUNFLEtBQUlDO1lBQ3RDLElBQUcsQ0FBQ1UsTUFBTSxNQUFNQyxNQUFNO1lBQ3RCLE9BQU9qQixrRkFBWUEsQ0FBQ2tCLElBQUk7UUFDNUI7SUFFQSxvQkFBb0IsR0FDaEIsNkRBQTZEO0lBRTdELDJFQUEyRTtJQUMzRSxNQUFNO0lBQ1osRUFBRSxPQUFNQyxHQUFHO1FBQ1RDLFFBQVFDLEtBQUssQ0FBQ0Y7UUFDZCxPQUFPLElBQUluQixrRkFBWUEsQ0FBQ1ksS0FBS0MsU0FBUyxDQUFDO1lBQUVDLFFBQVE7WUFBS1EsTUFBTTtZQUF5QkQsT0FBTUY7UUFBRTtJQUMvRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL21pZGRsZXdhcmUudHM/NDIyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgdHlwZSB7IE5leHRSZXF1ZXN0IH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG5pbXBvcnQgeyBnZXRJcm9uU2Vzc2lvbiB9IGZyb20gJ2lyb24tc2Vzc2lvbic7XG5pbXBvcnQgc2Vzc2lvbkNvbmZpZyBmcm9tICcuL3V0aWxzL3Nlc3Npb24nO1xuaW1wb3J0IHsgSXJvblNlc3Npb25XaXRoT2RvbyB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IGdldE9kb29TZXNzaW9uIGZyb20gJy4vdXRpbHMvZ2V0T2Rvb1Nlc3Npb24nO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWlkZGxld2FyZShyZXE6IE5leHRSZXF1ZXN0LCByZXM6TmV4dFJlc3BvbnNlKSB7XG4gIFxuICB0cnkge1xuLyogT24gRXZlcnkgUm91dGUgKi9cbiAgICBpZiAoIXJlcS5uZXh0VXJsLnBhdGhuYW1lLmluY2x1ZGVzKCcvYXV0aCcpICYmXG4gICAgICAgIHJlcS5uZXh0VXJsLnBhdGhuYW1lLnN0YXJ0c1dpdGgoJy9hcGknKSkge1xuICAgICAgICBcbiAgICAgICAgLy9yZXR1cm4gYXdhaXQgZmV0Y2hVc2VyTWlkZGxld2FyZShyZXF1ZXN0KVxuICAgICAgICBjb25zdCBzZXNzaW9uIDogSXJvblNlc3Npb25XaXRoT2RvbyA9IGF3YWl0IGdldElyb25TZXNzaW9uKHJlcSxyZXMsIHNlc3Npb25Db25maWcpXG4gICAgICAgIGlmKCFzZXNzaW9uKSByZXR1cm4gbmV3IE5leHRSZXNwb25zZSggSlNPTi5zdHJpbmdpZnkoeyBzdGF0dXM6IDQwMywgbWVzc2FnZTpcIkZvcmJpZGRlblwifSkpXG4gICAgICAgIGNvbnN0IG9kb28gPSBhd2FpdCBnZXRPZG9vU2Vzc2lvbihyZXEscmVzKTtcbiAgICAgICAgaWYoIW9kb28pIHRocm93IEVycm9yKFwiSW52YWxpZE9kb29TZXNzaW9uXCIpO1xuICAgICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLm5leHQoKTtcbiAgICB9XG4gICAgXG4gICAgLyogUmVkaXJlY3QgZXhhbXBsZSAqL1xuICAgICAgICAvLyAgIGlmIChyZXF1ZXN0Lm5leHRVcmwucGF0aG5hbWUuc3RhcnRzV2l0aCgnL2Rhc2hib2FyZCcpKSB7XG5cbiAgICAgICAgLy8gICAgIHJldHVybiBOZXh0UmVzcG9uc2UucmV3cml0ZShuZXcgVVJMKCcvZGFzaGJvYXJkL3VzZXInLCByZXF1ZXN0LnVybCkpXG4gICAgICAgIC8vICAgfVxuICB9IGNhdGNoKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIHJldHVybiBuZXcgTmV4dFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KHsgc3RhdHVzOiA1MDAsIHRleHQ6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InLCBlcnJvcjplIH0pKTtcbiAgfVxufSJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJnZXRJcm9uU2Vzc2lvbiIsInNlc3Npb25Db25maWciLCJnZXRPZG9vU2Vzc2lvbiIsIm1pZGRsZXdhcmUiLCJyZXEiLCJyZXMiLCJuZXh0VXJsIiwicGF0aG5hbWUiLCJpbmNsdWRlcyIsInN0YXJ0c1dpdGgiLCJzZXNzaW9uIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0YXR1cyIsIm1lc3NhZ2UiLCJvZG9vIiwiRXJyb3IiLCJuZXh0IiwiZSIsImNvbnNvbGUiLCJlcnJvciIsInRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./middleware.ts\n");

/***/ }),

/***/ "(middleware)/./node_modules/async-odoo-xmlrpc/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/async-odoo-xmlrpc/lib/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (void 0) && (void 0).__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\n/*\r\n* Author: Faisal Sami\r\n* mail: faisalsami78@gmail.com\r\n* https://github.com/faisalsami/odoo-xmlrpc\r\n*\r\n* Modify by nguyenvantien2009\r\n* http://nguyenvantien2009.com\r\n*/ var xmlrpc = __webpack_require__(/*! xmlrpc */ \"(middleware)/./node_modules/xmlrpc/lib/xmlrpc.js\");\nvar url = __webpack_require__(/*! url */ \"(middleware)/./node_modules/next/dist/compiled/native-url/index.js\");\nvar Odoo = /** @class */ function() {\n    function Odoo(config) {\n        var _this = this;\n        config = config || {};\n        var urlparts = url.parse(config.url);\n        this.host = urlparts.hostname;\n        this.port = config.port || urlparts.port;\n        this.db = config.db;\n        this.username = config.username;\n        this.password = config.password;\n        this.secure = true;\n        if (urlparts.protocol !== \"https:\") {\n            this.secure = false;\n        }\n        var uid = 0;\n        /**\r\n         * connect to XML-RPC of Odoo base on setting in config.\r\n         */ this.connect = function() {\n            return __awaiter(_this, void 0, void 0, function() {\n                var clientOptions, client, params;\n                return __generator(this, function(_a) {\n                    clientOptions = {\n                        host: this.host,\n                        port: this.port,\n                        path: \"/xmlrpc/2/common\"\n                    };\n                    client = this.secure === false ? xmlrpc.createClient(clientOptions) : xmlrpc.createSecureClient(clientOptions);\n                    params = [\n                        this.db,\n                        this.username,\n                        this.password,\n                        {} // empty object.\n                    ];\n                    return [\n                        2 /*return*/ ,\n                        new Promise(function(resolve, reject) {\n                            client.methodCall(\"authenticate\", params, function(error, value) {\n                                if (error) {\n                                    reject(error);\n                                }\n                                if (!value) {\n                                    reject({\n                                        message: \"No UID returned from authentication.\"\n                                    });\n                                }\n                                uid = value;\n                                resolve(value);\n                            });\n                        })\n                    ];\n                });\n            });\n        };\n        /**\r\n         * Execute a method from model in Odoo.\r\n         *\r\n         * @param {String} model Model name in Odoo.\r\n         * @param {String} method Name of method in Odoo.\r\n         * @param {Array<Object>} params Params in to execute from Odoo.\r\n         */ this.execute_kw = function(model, method, params) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var clientOptions, client, fparams;\n                return __generator(this, function(_a) {\n                    clientOptions = {\n                        host: this.host,\n                        port: this.port,\n                        path: \"/xmlrpc/2/object\"\n                    };\n                    client = this.secure === false ? xmlrpc.createClient(clientOptions) : xmlrpc.createSecureClient(clientOptions);\n                    fparams = [\n                        this.db,\n                        uid,\n                        this.password,\n                        model,\n                        method,\n                        params\n                    ];\n                    return [\n                        2 /*return*/ ,\n                        new Promise(function(resolve, reject) {\n                            client.methodCall(\"execute_kw\", fparams, function(error, value) {\n                                error ? reject(error) : resolve(value);\n                            });\n                        })\n                    ];\n                });\n            });\n        };\n        /**\r\n         * call workflow in odoo.\r\n         *\r\n         * @param {String} model Model name in Odoo\r\n         * @param {String} method Method name in Odoo\r\n         * @param {Object[]} params List parameters to call xml-rpc.\r\n         */ this.exec_workflow = function(model, method, params) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var clientOptions, client, fparams;\n                return __generator(this, function(_a) {\n                    clientOptions = {\n                        host: this.host,\n                        port: this.port,\n                        path: \"/xmlrpc/2/object\"\n                    };\n                    client = this.secure === false ? xmlrpc.createClient(clientOptions) : xmlrpc.createSecureClient(clientOptions);\n                    fparams = [\n                        this.db,\n                        uid,\n                        this.password,\n                        model,\n                        method,\n                        params\n                    ];\n                    return [\n                        2 /*return*/ ,\n                        new Promise(function(resolve, reject) {\n                            client.methodCall(\"exec_workflow\", fparams, function(error, value) {\n                                error ? reject(error) : resolve(value);\n                            });\n                        })\n                    ];\n                });\n            });\n        };\n        this.render_report = function(report, params) {\n            return __awaiter(_this, void 0, void 0, function() {\n                var clientOptions, client, fparams;\n                return __generator(this, function(_a) {\n                    clientOptions = {\n                        host: this.host,\n                        port: this.port,\n                        path: \"/xmlrpc/2/report\"\n                    };\n                    client = this.secure === false ? xmlrpc.createClient(clientOptions) : xmlrpc.createSecureClient(clientOptions);\n                    fparams = [\n                        this.db,\n                        uid,\n                        this.password,\n                        report,\n                        params\n                    ];\n                    return [\n                        2 /*return*/ ,\n                        new Promise(function(resolve, reject) {\n                            client.methodCall(\"render_report\", fparams, function(error, value) {\n                                error ? reject(error) : resolve(value);\n                            });\n                        })\n                    ];\n                });\n            });\n        };\n    }\n    return Odoo;\n}();\nmodule.exports = Odoo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/async-odoo-xmlrpc/lib/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/native-url/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/native-url/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("var __dirname = \"/\";\n\n(function() {\n    var e = {\n        452: function(e) {\n            \"use strict\";\n            e.exports = __webpack_require__(/*! next/dist/compiled/querystring-es3 */ \"(middleware)/./node_modules/next/dist/compiled/querystring-es3/index.js\");\n        }\n    };\n    var t = {};\n    function __nccwpck_require__(o) {\n        var a = t[o];\n        if (a !== undefined) {\n            return a.exports;\n        }\n        var s = t[o] = {\n            exports: {}\n        };\n        var n = true;\n        try {\n            e[o](s, s.exports, __nccwpck_require__);\n            n = false;\n        } finally{\n            if (n) delete t[o];\n        }\n        return s.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var o = {};\n    !function() {\n        var e = o;\n        var t, a = (t = __nccwpck_require__(452)) && \"object\" == typeof t && \"default\" in t ? t.default : t, s = /https?|ftp|gopher|file/;\n        function r(e) {\n            \"string\" == typeof e && (e = d(e));\n            var t = function(e, t, o) {\n                var a = e.auth, s = e.hostname, n = e.protocol || \"\", p = e.pathname || \"\", c = e.hash || \"\", i = e.query || \"\", u = !1;\n                a = a ? encodeURIComponent(a).replace(/%3A/i, \":\") + \"@\" : \"\", e.host ? u = a + e.host : s && (u = a + (~s.indexOf(\":\") ? \"[\" + s + \"]\" : s), e.port && (u += \":\" + e.port)), i && \"object\" == typeof i && (i = t.encode(i));\n                var f = e.search || i && \"?\" + i || \"\";\n                return n && \":\" !== n.substr(-1) && (n += \":\"), e.slashes || (!n || o.test(n)) && !1 !== u ? (u = \"//\" + (u || \"\"), p && \"/\" !== p[0] && (p = \"/\" + p)) : u || (u = \"\"), c && \"#\" !== c[0] && (c = \"#\" + c), f && \"?\" !== f[0] && (f = \"?\" + f), {\n                    protocol: n,\n                    host: u,\n                    pathname: p = p.replace(/[?#]/g, encodeURIComponent),\n                    search: f = f.replace(\"#\", \"%23\"),\n                    hash: c\n                };\n            }(e, a, s);\n            return \"\" + t.protocol + t.host + t.pathname + t.search + t.hash;\n        }\n        var n = \"http://\", p = \"w.w\", c = n + p, i = /^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i, u = /https?|ftp|gopher|file/;\n        function h(e, t) {\n            var o = \"string\" == typeof e ? d(e) : e;\n            e = \"object\" == typeof e ? r(e) : e;\n            var a = d(t), s = \"\";\n            o.protocol && !o.slashes && (s = o.protocol, e = e.replace(o.protocol, \"\"), s += \"/\" === t[0] || \"/\" === e[0] ? \"/\" : \"\"), s && a.protocol && (s = \"\", a.slashes || (s = a.protocol, t = t.replace(a.protocol, \"\")));\n            var p = e.match(i);\n            p && !a.protocol && (e = e.substr((s = p[1] + (p[2] || \"\")).length), /^\\/\\/[^/]/.test(t) && (s = s.slice(0, -1)));\n            var f = new URL(e, c + \"/\"), m = new URL(t, f).toString().replace(c, \"\"), v = a.protocol || o.protocol;\n            return v += o.slashes || a.slashes ? \"//\" : \"\", !s && v ? m = m.replace(n, v) : s && (m = m.replace(n, \"\")), u.test(m) || ~t.indexOf(\".\") || \"/\" === e.slice(-1) || \"/\" === t.slice(-1) || \"/\" !== m.slice(-1) || (m = m.slice(0, -1)), s && (m = s + (\"/\" === m[0] ? m.substr(1) : m)), m;\n        }\n        function l() {}\n        l.prototype.parse = d, l.prototype.format = r, l.prototype.resolve = h, l.prototype.resolveObject = h;\n        var f = /^https?|ftp|gopher|file/, m = /^(.*?)([#?].*)/, v = /^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i, _ = /^([a-z0-9.+-]*:)?\\/\\/\\/*/i, b = /^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;\n        function d(e, t, o) {\n            if (void 0 === t && (t = !1), void 0 === o && (o = !1), e && \"object\" == typeof e && e instanceof l) return e;\n            var s = (e = e.trim()).match(m);\n            e = s ? s[1].replace(/\\\\/g, \"/\") + s[2] : e.replace(/\\\\/g, \"/\"), b.test(e) && \"/\" !== e.slice(-1) && (e += \"/\");\n            var n = !/(^javascript)/.test(e) && e.match(v), i = _.test(e), u = \"\";\n            n && (f.test(n[1]) || (u = n[1].toLowerCase(), e = \"\" + n[2] + n[3]), n[2] || (i = !1, f.test(n[1]) ? (u = n[1], e = \"\" + n[3]) : e = \"//\" + n[3]), 3 !== n[2].length && 1 !== n[2].length || (u = n[1], e = \"/\" + n[3]));\n            var g, y = (s ? s[1] : e).match(/^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/), w = y && y[1], x = new l, C = \"\", U = \"\";\n            try {\n                g = new URL(e);\n            } catch (t) {\n                C = t, u || o || !/^\\/\\//.test(e) || /^\\/\\/.+[@.]/.test(e) || (U = \"/\", e = e.substr(1));\n                try {\n                    g = new URL(e, c);\n                } catch (e) {\n                    return x.protocol = u, x.href = u, x;\n                }\n            }\n            x.slashes = i && !U, x.host = g.host === p ? \"\" : g.host, x.hostname = g.hostname === p ? \"\" : g.hostname.replace(/(\\[|\\])/g, \"\"), x.protocol = C ? u || null : g.protocol, x.search = g.search.replace(/\\\\/g, \"%5C\"), x.hash = g.hash.replace(/\\\\/g, \"%5C\");\n            var j = e.split(\"#\");\n            !x.search && ~j[0].indexOf(\"?\") && (x.search = \"?\"), x.hash || \"\" !== j[1] || (x.hash = \"#\"), x.query = t ? a.decode(g.search.substr(1)) : x.search.substr(1), x.pathname = U + (n ? function(e) {\n                return e.replace(/['^|`]/g, function(e) {\n                    return \"%\" + e.charCodeAt().toString(16).toUpperCase();\n                }).replace(/((?:%[0-9A-F]{2})+)/g, function(e, t) {\n                    try {\n                        return decodeURIComponent(t).split(\"\").map(function(e) {\n                            var t = e.charCodeAt();\n                            return t > 256 || /^[a-z0-9]$/i.test(e) ? e : \"%\" + t.toString(16).toUpperCase();\n                        }).join(\"\");\n                    } catch (e) {\n                        return t;\n                    }\n                });\n            }(g.pathname) : g.pathname), \"about:\" === x.protocol && \"blank\" === x.pathname && (x.protocol = \"\", x.pathname = \"\"), C && \"/\" !== e[0] && (x.pathname = x.pathname.substr(1)), u && !f.test(u) && \"/\" !== e.slice(-1) && \"/\" === x.pathname && (x.pathname = \"\"), x.path = x.pathname + x.search, x.auth = [\n                g.username,\n                g.password\n            ].map(decodeURIComponent).filter(Boolean).join(\":\"), x.port = g.port, w && !x.host.endsWith(w) && (x.host += w, x.port = w.slice(1)), x.href = U ? \"\" + x.pathname + x.search + x.hash : r(x);\n            var q = /^(file)/.test(x.href) ? [\n                \"host\",\n                \"hostname\"\n            ] : [];\n            return Object.keys(x).forEach(function(e) {\n                ~q.indexOf(e) || (x[e] = x[e] || null);\n            }), x;\n        }\n        e.parse = d, e.format = r, e.resolve = h, e.resolveObject = function(e, t) {\n            return d(h(e, t));\n        }, e.Url = l;\n    }();\n    module.exports = o;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/native-url/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/compiled/querystring-es3/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/querystring-es3/index.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("var __dirname = \"/\";\n\n(function() {\n    \"use strict\";\n    var e = {\n        815: function(e) {\n            function hasOwnProperty(e, r) {\n                return Object.prototype.hasOwnProperty.call(e, r);\n            }\n            e.exports = function(e, n, t, o) {\n                n = n || \"&\";\n                t = t || \"=\";\n                var a = {};\n                if (typeof e !== \"string\" || e.length === 0) {\n                    return a;\n                }\n                var i = /\\+/g;\n                e = e.split(n);\n                var u = 1e3;\n                if (o && typeof o.maxKeys === \"number\") {\n                    u = o.maxKeys;\n                }\n                var c = e.length;\n                if (u > 0 && c > u) {\n                    c = u;\n                }\n                for(var p = 0; p < c; ++p){\n                    var f = e[p].replace(i, \"%20\"), s = f.indexOf(t), _, l, y, d;\n                    if (s >= 0) {\n                        _ = f.substr(0, s);\n                        l = f.substr(s + 1);\n                    } else {\n                        _ = f;\n                        l = \"\";\n                    }\n                    y = decodeURIComponent(_);\n                    d = decodeURIComponent(l);\n                    if (!hasOwnProperty(a, y)) {\n                        a[y] = d;\n                    } else if (r(a[y])) {\n                        a[y].push(d);\n                    } else {\n                        a[y] = [\n                            a[y],\n                            d\n                        ];\n                    }\n                }\n                return a;\n            };\n            var r = Array.isArray || function(e) {\n                return Object.prototype.toString.call(e) === \"[object Array]\";\n            };\n        },\n        577: function(e) {\n            var stringifyPrimitive = function(e) {\n                switch(typeof e){\n                    case \"string\":\n                        return e;\n                    case \"boolean\":\n                        return e ? \"true\" : \"false\";\n                    case \"number\":\n                        return isFinite(e) ? e : \"\";\n                    default:\n                        return \"\";\n                }\n            };\n            e.exports = function(e, t, o, a) {\n                t = t || \"&\";\n                o = o || \"=\";\n                if (e === null) {\n                    e = undefined;\n                }\n                if (typeof e === \"object\") {\n                    return map(n(e), function(n) {\n                        var a = encodeURIComponent(stringifyPrimitive(n)) + o;\n                        if (r(e[n])) {\n                            return map(e[n], function(e) {\n                                return a + encodeURIComponent(stringifyPrimitive(e));\n                            }).join(t);\n                        } else {\n                            return a + encodeURIComponent(stringifyPrimitive(e[n]));\n                        }\n                    }).join(t);\n                }\n                if (!a) return \"\";\n                return encodeURIComponent(stringifyPrimitive(a)) + o + encodeURIComponent(stringifyPrimitive(e));\n            };\n            var r = Array.isArray || function(e) {\n                return Object.prototype.toString.call(e) === \"[object Array]\";\n            };\n            function map(e, r) {\n                if (e.map) return e.map(r);\n                var n = [];\n                for(var t = 0; t < e.length; t++){\n                    n.push(r(e[t], t));\n                }\n                return n;\n            }\n            var n = Object.keys || function(e) {\n                var r = [];\n                for(var n in e){\n                    if (Object.prototype.hasOwnProperty.call(e, n)) r.push(n);\n                }\n                return r;\n            };\n        }\n    };\n    var r = {};\n    function __nccwpck_require__(n) {\n        var t = r[n];\n        if (t !== undefined) {\n            return t.exports;\n        }\n        var o = r[n] = {\n            exports: {}\n        };\n        var a = true;\n        try {\n            e[n](o, o.exports, __nccwpck_require__);\n            a = false;\n        } finally{\n            if (a) delete r[n];\n        }\n        return o.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var n = {};\n    !function() {\n        var e = n;\n        e.decode = e.parse = __nccwpck_require__(815);\n        e.encode = e.stringify = __nccwpck_require__(577);\n    }();\n    module.exports = n;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/compiled/querystring-es3/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/sax/lib/sax.js":
/*!*************************************!*\
  !*** ./node_modules/sax/lib/sax.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n;\n(function(sax) {\n    sax.parser = function(strict, opt) {\n        return new SAXParser(strict, opt);\n    };\n    sax.SAXParser = SAXParser;\n    sax.SAXStream = SAXStream;\n    sax.createStream = createStream;\n    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n    // since that's the earliest that a buffer overrun could occur.  This way, checks are\n    // as rare as required, but as often as necessary to ensure never crossing this bound.\n    // Furthermore, buffers are only tested at most once per write(), so passing a very\n    // large string into write() might have undesirable effects, but this is manageable by\n    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n    // edge case, result in creating at most one complete copy of the string passed in.\n    // Set to Infinity to have unlimited buffers.\n    sax.MAX_BUFFER_LENGTH = 64 * 1024;\n    var buffers = [\n        \"comment\",\n        \"sgmlDecl\",\n        \"textNode\",\n        \"tagName\",\n        \"doctype\",\n        \"procInstName\",\n        \"procInstBody\",\n        \"entity\",\n        \"attribName\",\n        \"attribValue\",\n        \"cdata\",\n        \"script\"\n    ];\n    sax.EVENTS = [\n        \"text\",\n        \"processinginstruction\",\n        \"sgmldeclaration\",\n        \"doctype\",\n        \"comment\",\n        \"opentagstart\",\n        \"attribute\",\n        \"opentag\",\n        \"closetag\",\n        \"opencdata\",\n        \"cdata\",\n        \"closecdata\",\n        \"error\",\n        \"end\",\n        \"ready\",\n        \"script\",\n        \"opennamespace\",\n        \"closenamespace\"\n    ];\n    function SAXParser(strict, opt) {\n        if (!(this instanceof SAXParser)) {\n            return new SAXParser(strict, opt);\n        }\n        var parser = this;\n        clearBuffers(parser);\n        parser.q = parser.c = \"\";\n        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n        parser.opt = opt || {};\n        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n        parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n        parser.tags = [];\n        parser.closed = parser.closedRoot = parser.sawRoot = false;\n        parser.tag = parser.error = null;\n        parser.strict = !!strict;\n        parser.noscript = !!(strict || parser.opt.noscript);\n        parser.state = S.BEGIN;\n        parser.strictEntities = parser.opt.strictEntities;\n        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n        parser.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (parser.opt.xmlns) {\n            parser.ns = Object.create(rootNS);\n        }\n        // mostly just for error reporting\n        parser.trackPosition = parser.opt.position !== false;\n        if (parser.trackPosition) {\n            parser.position = parser.line = parser.column = 0;\n        }\n        emit(parser, \"onready\");\n    }\n    if (!Object.create) {\n        Object.create = function(o) {\n            function F() {}\n            F.prototype = o;\n            var newf = new F();\n            return newf;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function(o) {\n            var a = [];\n            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);\n            return a;\n        };\n    }\n    function checkBufferLength(parser) {\n        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n        var maxActual = 0;\n        for(var i = 0, l = buffers.length; i < l; i++){\n            var len = parser[buffers[i]].length;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch(buffers[i]){\n                    case \"textNode\":\n                        closeText(parser);\n                        break;\n                    case \"cdata\":\n                        emitNode(parser, \"oncdata\", parser.cdata);\n                        parser.cdata = \"\";\n                        break;\n                    case \"script\":\n                        emitNode(parser, \"onscript\", parser.script);\n                        parser.script = \"\";\n                        break;\n                    default:\n                        error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        var m = sax.MAX_BUFFER_LENGTH - maxActual;\n        parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n        for(var i = 0, l = buffers.length; i < l; i++){\n            parser[buffers[i]] = \"\";\n        }\n    }\n    function flushBuffers(parser) {\n        closeText(parser);\n        if (parser.cdata !== \"\") {\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n        }\n        if (parser.script !== \"\") {\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n    }\n    SAXParser.prototype = {\n        end: function() {\n            end(this);\n        },\n        write: write,\n        resume: function() {\n            this.error = null;\n            return this;\n        },\n        close: function() {\n            return this.write(null);\n        },\n        flush: function() {\n            flushBuffers(this);\n        }\n    };\n    var Stream;\n    try {\n        Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\n    } catch (ex) {\n        Stream = function() {};\n    }\n    var streamWraps = sax.EVENTS.filter(function(ev) {\n        return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n        return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n        if (!(this instanceof SAXStream)) {\n            return new SAXStream(strict, opt);\n        }\n        Stream.apply(this);\n        this._parser = new SAXParser(strict, opt);\n        this.writable = true;\n        this.readable = true;\n        var me = this;\n        this._parser.onend = function() {\n            me.emit(\"end\");\n        };\n        this._parser.onerror = function(er) {\n            me.emit(\"error\", er);\n            // if didn't throw, then means error was handled.\n            // go ahead and clear error, so we can write again.\n            me._parser.error = null;\n        };\n        this._decoder = null;\n        streamWraps.forEach(function(ev) {\n            Object.defineProperty(me, \"on\" + ev, {\n                get: function() {\n                    return me._parser[\"on\" + ev];\n                },\n                set: function(h) {\n                    if (!h) {\n                        me.removeAllListeners(ev);\n                        me._parser[\"on\" + ev] = h;\n                        return h;\n                    }\n                    me.on(ev, h);\n                },\n                enumerable: true,\n                configurable: false\n            });\n        });\n    }\n    SAXStream.prototype = Object.create(Stream.prototype, {\n        constructor: {\n            value: SAXStream\n        }\n    });\n    SAXStream.prototype.write = function(data) {\n        if (typeof Buffer === \"function\" && typeof Buffer.isBuffer === \"function\" && Buffer.isBuffer(data)) {\n            if (!this._decoder) {\n                var SD = (__webpack_require__(/*! string_decoder */ \"string_decoder\").StringDecoder);\n                this._decoder = new SD(\"utf8\");\n            }\n            data = this._decoder.write(data);\n        }\n        this._parser.write(data.toString());\n        this.emit(\"data\", data);\n        return true;\n    };\n    SAXStream.prototype.end = function(chunk) {\n        if (chunk && chunk.length) {\n            this.write(chunk);\n        }\n        this._parser.end();\n        return true;\n    };\n    SAXStream.prototype.on = function(ev, handler) {\n        var me = this;\n        if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n            me._parser[\"on\" + ev] = function() {\n                var args = arguments.length === 1 ? [\n                    arguments[0]\n                ] : Array.apply(null, arguments);\n                args.splice(0, 0, ev);\n                me.emit.apply(me, args);\n            };\n        }\n        return Stream.prototype.on.call(me, ev, handler);\n    };\n    // this really needs to be replaced with character classes.\n    // XML allows all manner of ridiculous numbers and digits.\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = {\n        xml: XML_NAMESPACE,\n        xmlns: XMLNS_NAMESPACE\n    };\n    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n    // This implementation works on strings, a single character at a time\n    // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n    // without a significant breaking change to either this  parser, or the\n    // JavaScript language.  Implementation of an emoji-capable xml parser\n    // is left as an exercise for the reader.\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n        return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n    }\n    function isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n        return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n        return regex.test(c);\n    }\n    function notMatch(regex, c) {\n        return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax.STATE = {\n        BEGIN: S++,\n        BEGIN_WHITESPACE: S++,\n        TEXT: S++,\n        TEXT_ENTITY: S++,\n        OPEN_WAKA: S++,\n        SGML_DECL: S++,\n        SGML_DECL_QUOTED: S++,\n        DOCTYPE: S++,\n        DOCTYPE_QUOTED: S++,\n        DOCTYPE_DTD: S++,\n        DOCTYPE_DTD_QUOTED: S++,\n        COMMENT_STARTING: S++,\n        COMMENT: S++,\n        COMMENT_ENDING: S++,\n        COMMENT_ENDED: S++,\n        CDATA: S++,\n        CDATA_ENDING: S++,\n        CDATA_ENDING_2: S++,\n        PROC_INST: S++,\n        PROC_INST_BODY: S++,\n        PROC_INST_ENDING: S++,\n        OPEN_TAG: S++,\n        OPEN_TAG_SLASH: S++,\n        ATTRIB: S++,\n        ATTRIB_NAME: S++,\n        ATTRIB_NAME_SAW_WHITE: S++,\n        ATTRIB_VALUE: S++,\n        ATTRIB_VALUE_QUOTED: S++,\n        ATTRIB_VALUE_CLOSED: S++,\n        ATTRIB_VALUE_UNQUOTED: S++,\n        ATTRIB_VALUE_ENTITY_Q: S++,\n        ATTRIB_VALUE_ENTITY_U: S++,\n        CLOSE_TAG: S++,\n        CLOSE_TAG_SAW_WHITE: S++,\n        SCRIPT: S++,\n        SCRIPT_ENDING: S++ // <script> ... <\n    };\n    sax.XML_ENTITIES = {\n        \"amp\": \"&\",\n        \"gt\": \">\",\n        \"lt\": \"<\",\n        \"quot\": '\"',\n        \"apos\": \"'\"\n    };\n    sax.ENTITIES = {\n        \"amp\": \"&\",\n        \"gt\": \">\",\n        \"lt\": \"<\",\n        \"quot\": '\"',\n        \"apos\": \"'\",\n        \"AElig\": 198,\n        \"Aacute\": 193,\n        \"Acirc\": 194,\n        \"Agrave\": 192,\n        \"Aring\": 197,\n        \"Atilde\": 195,\n        \"Auml\": 196,\n        \"Ccedil\": 199,\n        \"ETH\": 208,\n        \"Eacute\": 201,\n        \"Ecirc\": 202,\n        \"Egrave\": 200,\n        \"Euml\": 203,\n        \"Iacute\": 205,\n        \"Icirc\": 206,\n        \"Igrave\": 204,\n        \"Iuml\": 207,\n        \"Ntilde\": 209,\n        \"Oacute\": 211,\n        \"Ocirc\": 212,\n        \"Ograve\": 210,\n        \"Oslash\": 216,\n        \"Otilde\": 213,\n        \"Ouml\": 214,\n        \"THORN\": 222,\n        \"Uacute\": 218,\n        \"Ucirc\": 219,\n        \"Ugrave\": 217,\n        \"Uuml\": 220,\n        \"Yacute\": 221,\n        \"aacute\": 225,\n        \"acirc\": 226,\n        \"aelig\": 230,\n        \"agrave\": 224,\n        \"aring\": 229,\n        \"atilde\": 227,\n        \"auml\": 228,\n        \"ccedil\": 231,\n        \"eacute\": 233,\n        \"ecirc\": 234,\n        \"egrave\": 232,\n        \"eth\": 240,\n        \"euml\": 235,\n        \"iacute\": 237,\n        \"icirc\": 238,\n        \"igrave\": 236,\n        \"iuml\": 239,\n        \"ntilde\": 241,\n        \"oacute\": 243,\n        \"ocirc\": 244,\n        \"ograve\": 242,\n        \"oslash\": 248,\n        \"otilde\": 245,\n        \"ouml\": 246,\n        \"szlig\": 223,\n        \"thorn\": 254,\n        \"uacute\": 250,\n        \"ucirc\": 251,\n        \"ugrave\": 249,\n        \"uuml\": 252,\n        \"yacute\": 253,\n        \"yuml\": 255,\n        \"copy\": 169,\n        \"reg\": 174,\n        \"nbsp\": 160,\n        \"iexcl\": 161,\n        \"cent\": 162,\n        \"pound\": 163,\n        \"curren\": 164,\n        \"yen\": 165,\n        \"brvbar\": 166,\n        \"sect\": 167,\n        \"uml\": 168,\n        \"ordf\": 170,\n        \"laquo\": 171,\n        \"not\": 172,\n        \"shy\": 173,\n        \"macr\": 175,\n        \"deg\": 176,\n        \"plusmn\": 177,\n        \"sup1\": 185,\n        \"sup2\": 178,\n        \"sup3\": 179,\n        \"acute\": 180,\n        \"micro\": 181,\n        \"para\": 182,\n        \"middot\": 183,\n        \"cedil\": 184,\n        \"ordm\": 186,\n        \"raquo\": 187,\n        \"frac14\": 188,\n        \"frac12\": 189,\n        \"frac34\": 190,\n        \"iquest\": 191,\n        \"times\": 215,\n        \"divide\": 247,\n        \"OElig\": 338,\n        \"oelig\": 339,\n        \"Scaron\": 352,\n        \"scaron\": 353,\n        \"Yuml\": 376,\n        \"fnof\": 402,\n        \"circ\": 710,\n        \"tilde\": 732,\n        \"Alpha\": 913,\n        \"Beta\": 914,\n        \"Gamma\": 915,\n        \"Delta\": 916,\n        \"Epsilon\": 917,\n        \"Zeta\": 918,\n        \"Eta\": 919,\n        \"Theta\": 920,\n        \"Iota\": 921,\n        \"Kappa\": 922,\n        \"Lambda\": 923,\n        \"Mu\": 924,\n        \"Nu\": 925,\n        \"Xi\": 926,\n        \"Omicron\": 927,\n        \"Pi\": 928,\n        \"Rho\": 929,\n        \"Sigma\": 931,\n        \"Tau\": 932,\n        \"Upsilon\": 933,\n        \"Phi\": 934,\n        \"Chi\": 935,\n        \"Psi\": 936,\n        \"Omega\": 937,\n        \"alpha\": 945,\n        \"beta\": 946,\n        \"gamma\": 947,\n        \"delta\": 948,\n        \"epsilon\": 949,\n        \"zeta\": 950,\n        \"eta\": 951,\n        \"theta\": 952,\n        \"iota\": 953,\n        \"kappa\": 954,\n        \"lambda\": 955,\n        \"mu\": 956,\n        \"nu\": 957,\n        \"xi\": 958,\n        \"omicron\": 959,\n        \"pi\": 960,\n        \"rho\": 961,\n        \"sigmaf\": 962,\n        \"sigma\": 963,\n        \"tau\": 964,\n        \"upsilon\": 965,\n        \"phi\": 966,\n        \"chi\": 967,\n        \"psi\": 968,\n        \"omega\": 969,\n        \"thetasym\": 977,\n        \"upsih\": 978,\n        \"piv\": 982,\n        \"ensp\": 8194,\n        \"emsp\": 8195,\n        \"thinsp\": 8201,\n        \"zwnj\": 8204,\n        \"zwj\": 8205,\n        \"lrm\": 8206,\n        \"rlm\": 8207,\n        \"ndash\": 8211,\n        \"mdash\": 8212,\n        \"lsquo\": 8216,\n        \"rsquo\": 8217,\n        \"sbquo\": 8218,\n        \"ldquo\": 8220,\n        \"rdquo\": 8221,\n        \"bdquo\": 8222,\n        \"dagger\": 8224,\n        \"Dagger\": 8225,\n        \"bull\": 8226,\n        \"hellip\": 8230,\n        \"permil\": 8240,\n        \"prime\": 8242,\n        \"Prime\": 8243,\n        \"lsaquo\": 8249,\n        \"rsaquo\": 8250,\n        \"oline\": 8254,\n        \"frasl\": 8260,\n        \"euro\": 8364,\n        \"image\": 8465,\n        \"weierp\": 8472,\n        \"real\": 8476,\n        \"trade\": 8482,\n        \"alefsym\": 8501,\n        \"larr\": 8592,\n        \"uarr\": 8593,\n        \"rarr\": 8594,\n        \"darr\": 8595,\n        \"harr\": 8596,\n        \"crarr\": 8629,\n        \"lArr\": 8656,\n        \"uArr\": 8657,\n        \"rArr\": 8658,\n        \"dArr\": 8659,\n        \"hArr\": 8660,\n        \"forall\": 8704,\n        \"part\": 8706,\n        \"exist\": 8707,\n        \"empty\": 8709,\n        \"nabla\": 8711,\n        \"isin\": 8712,\n        \"notin\": 8713,\n        \"ni\": 8715,\n        \"prod\": 8719,\n        \"sum\": 8721,\n        \"minus\": 8722,\n        \"lowast\": 8727,\n        \"radic\": 8730,\n        \"prop\": 8733,\n        \"infin\": 8734,\n        \"ang\": 8736,\n        \"and\": 8743,\n        \"or\": 8744,\n        \"cap\": 8745,\n        \"cup\": 8746,\n        \"int\": 8747,\n        \"there4\": 8756,\n        \"sim\": 8764,\n        \"cong\": 8773,\n        \"asymp\": 8776,\n        \"ne\": 8800,\n        \"equiv\": 8801,\n        \"le\": 8804,\n        \"ge\": 8805,\n        \"sub\": 8834,\n        \"sup\": 8835,\n        \"nsub\": 8836,\n        \"sube\": 8838,\n        \"supe\": 8839,\n        \"oplus\": 8853,\n        \"otimes\": 8855,\n        \"perp\": 8869,\n        \"sdot\": 8901,\n        \"lceil\": 8968,\n        \"rceil\": 8969,\n        \"lfloor\": 8970,\n        \"rfloor\": 8971,\n        \"lang\": 9001,\n        \"rang\": 9002,\n        \"loz\": 9674,\n        \"spades\": 9824,\n        \"clubs\": 9827,\n        \"hearts\": 9829,\n        \"diams\": 9830\n    };\n    Object.keys(sax.ENTITIES).forEach(function(key) {\n        var e = sax.ENTITIES[key];\n        var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n        sax.ENTITIES[key] = s;\n    });\n    for(var s in sax.STATE){\n        sax.STATE[sax.STATE[s]] = s;\n    }\n    // shorthand\n    S = sax.STATE;\n    function emit(parser, event, data) {\n        parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n        if (parser.textNode) closeText(parser);\n        emit(parser, nodeType, data);\n    }\n    function closeText(parser) {\n        parser.textNode = textopts(parser.opt, parser.textNode);\n        if (parser.textNode) emit(parser, \"ontext\", parser.textNode);\n        parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n        if (opt.trim) text = text.trim();\n        if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n        return text;\n    }\n    function error(parser, er) {\n        closeText(parser);\n        if (parser.trackPosition) {\n            er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n        }\n        er = new Error(er);\n        parser.error = er;\n        emit(parser, \"onerror\", er);\n        return parser;\n    }\n    function end(parser) {\n        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n            error(parser, \"Unexpected end\");\n        }\n        closeText(parser);\n        parser.c = \"\";\n        parser.closed = true;\n        emit(parser, \"onend\");\n        SAXParser.call(parser, parser.strict, parser.opt);\n        return parser;\n    }\n    function strictFail(parser, message) {\n        if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n            throw new Error(\"bad call to strictFail\");\n        }\n        if (parser.strict) {\n            error(parser, message);\n        }\n    }\n    function newTag(parser) {\n        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        var tag = parser.tag = {\n            name: parser.tagName,\n            attributes: {}\n        };\n        // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (parser.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        parser.attribList.length = 0;\n        emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute) {\n        var i = name.indexOf(\":\");\n        var qualName = i < 0 ? [\n            \"\",\n            name\n        ] : name.split(\":\");\n        var prefix = qualName[0];\n        var local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === \"xmlns\") {\n            prefix = \"xmlns\";\n            local = \"\";\n        }\n        return {\n            prefix: prefix,\n            local: local\n        };\n    }\n    function attrib(parser) {\n        if (!parser.strict) {\n            parser.attribName = parser.attribName[parser.looseCase]();\n        }\n        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n            parser.attribName = parser.attribValue = \"\";\n            return;\n        }\n        if (parser.opt.xmlns) {\n            var qn = qname(parser.attribName, true);\n            var prefix = qn.prefix;\n            var local = qn.local;\n            if (prefix === \"xmlns\") {\n                // namespace binding attribute. push the binding into scope\n                if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                    strictFail(parser, \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n                    strictFail(parser, \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else {\n                    var tag = parser.tag;\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = parser.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            parser.attribList.push([\n                parser.attribName,\n                parser.attribValue\n            ]);\n        } else {\n            // in non-xmlns mode, we can emit the event right away\n            parser.tag.attributes[parser.attribName] = parser.attribValue;\n            emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: parser.attribValue\n            });\n        }\n        parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n        if (parser.opt.xmlns) {\n            // emit namespace binding events\n            var tag = parser.tag;\n            // add namespace info to tag\n            var qn = qname(parser.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || \"\";\n            if (tag.prefix && !tag.uri) {\n                strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                tag.uri = qn.prefix;\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns && parent.ns !== tag.ns) {\n                Object.keys(tag.ns).forEach(function(p) {\n                    emitNode(parser, \"onopennamespace\", {\n                        prefix: p,\n                        uri: tag.ns[p]\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for(var i = 0, l = parser.attribList.length; i < l; i++){\n                var nv = parser.attribList[i];\n                var name = nv[0];\n                var value = nv[1];\n                var qualName = qname(name, true);\n                var prefix = qualName.prefix;\n                var local = qualName.local;\n                var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                var a = {\n                    name: name,\n                    value: value,\n                    prefix: prefix,\n                    local: local,\n                    uri: uri\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== \"xmlns\" && !uri) {\n                    strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                    a.uri = prefix;\n                }\n                parser.tag.attributes[name] = a;\n                emitNode(parser, \"onattribute\", a);\n            }\n            parser.attribList.length = 0;\n        }\n        parser.tag.isSelfClosing = !!selfClosing;\n        // process the tag\n        parser.sawRoot = true;\n        parser.tags.push(parser.tag);\n        emitNode(parser, \"onopentag\", parser.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                parser.state = S.SCRIPT;\n            } else {\n                parser.state = S.TEXT;\n            }\n            parser.tag = null;\n            parser.tagName = \"\";\n        }\n        parser.attribName = parser.attribValue = \"\";\n        parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n        if (!parser.tagName) {\n            strictFail(parser, \"Weird empty close tag.\");\n            parser.textNode += \"</>\";\n            parser.state = S.TEXT;\n            return;\n        }\n        if (parser.script) {\n            if (parser.tagName !== \"script\") {\n                parser.script += \"</\" + parser.tagName + \">\";\n                parser.tagName = \"\";\n                parser.state = S.SCRIPT;\n                return;\n            }\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        var t = parser.tags.length;\n        var tagName = parser.tagName;\n        if (!parser.strict) {\n            tagName = tagName[parser.looseCase]();\n        }\n        var closeTo = tagName;\n        while(t--){\n            var close = parser.tags[t];\n            if (close.name !== closeTo) {\n                // fail the first time in strict mode\n                strictFail(parser, \"Unexpected close tag\");\n            } else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n            parser.textNode += \"</\" + parser.tagName + \">\";\n            parser.state = S.TEXT;\n            return;\n        }\n        parser.tagName = tagName;\n        var s = parser.tags.length;\n        while(s-- > t){\n            var tag = parser.tag = parser.tags.pop();\n            parser.tagName = parser.tag.name;\n            emitNode(parser, \"onclosetag\", parser.tagName);\n            var x = {};\n            for(var i in tag.ns){\n                x[i] = tag.ns[i];\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                Object.keys(tag.ns).forEach(function(p) {\n                    var n = tag.ns[p];\n                    emitNode(parser, \"onclosenamespace\", {\n                        prefix: p,\n                        uri: n\n                    });\n                });\n            }\n        }\n        if (t === 0) parser.closedRoot = true;\n        parser.tagName = parser.attribValue = parser.attribName = \"\";\n        parser.attribList.length = 0;\n        parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n        var entity = parser.entity;\n        var entityLC = entity.toLowerCase();\n        var num;\n        var numStr = \"\";\n        if (parser.ENTITIES[entity]) {\n            return parser.ENTITIES[entity];\n        }\n        if (parser.ENTITIES[entityLC]) {\n            return parser.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === \"#\") {\n            if (entity.charAt(1) === \"x\") {\n                entity = entity.slice(2);\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            } else {\n                entity = entity.slice(1);\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, \"\");\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            strictFail(parser, \"Invalid character entity\");\n            return \"&\" + parser.entity + \";\";\n        }\n        return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n        if (c === \"<\") {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n        } else if (!isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            strictFail(parser, \"Non-whitespace before first tag.\");\n            parser.textNode = c;\n            parser.state = S.TEXT;\n        }\n    }\n    function charAt(chunk, i) {\n        var result = \"\";\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    function write(chunk) {\n        var parser = this;\n        if (this.error) {\n            throw this.error;\n        }\n        if (parser.closed) {\n            return error(parser, \"Cannot write after close. Assign an onready handler.\");\n        }\n        if (chunk === null) {\n            return end(parser);\n        }\n        if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        var i = 0;\n        var c = \"\";\n        while(true){\n            c = charAt(chunk, i++);\n            parser.c = c;\n            if (!c) {\n                break;\n            }\n            if (parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                } else {\n                    parser.column++;\n                }\n            }\n            switch(parser.state){\n                case S.BEGIN:\n                    parser.state = S.BEGIN_WHITESPACE;\n                    if (c === \"\\uFEFF\") {\n                        continue;\n                    }\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.BEGIN_WHITESPACE:\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.TEXT:\n                    if (parser.sawRoot && !parser.closedRoot) {\n                        var starti = i - 1;\n                        while(c && c !== \"<\" && c !== \"&\"){\n                            c = charAt(chunk, i++);\n                            if (c && parser.trackPosition) {\n                                parser.position++;\n                                if (c === \"\\n\") {\n                                    parser.line++;\n                                    parser.column = 0;\n                                } else {\n                                    parser.column++;\n                                }\n                            }\n                        }\n                        parser.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    } else {\n                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                            strictFail(parser, \"Text data outside of root node.\");\n                        }\n                        if (c === \"&\") {\n                            parser.state = S.TEXT_ENTITY;\n                        } else {\n                            parser.textNode += c;\n                        }\n                    }\n                    continue;\n                case S.SCRIPT:\n                    // only non-strict\n                    if (c === \"<\") {\n                        parser.state = S.SCRIPT_ENDING;\n                    } else {\n                        parser.script += c;\n                    }\n                    continue;\n                case S.SCRIPT_ENDING:\n                    if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                    } else {\n                        parser.script += \"<\" + c;\n                        parser.state = S.SCRIPT;\n                    }\n                    continue;\n                case S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === \"!\") {\n                        parser.state = S.SGML_DECL;\n                        parser.sgmlDecl = \"\";\n                    } else if (isWhitespace(c)) {\n                    // wait for it...\n                    } else if (isMatch(nameStart, c)) {\n                        parser.state = S.OPEN_TAG;\n                        parser.tagName = c;\n                    } else if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                        parser.tagName = \"\";\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST;\n                        parser.procInstName = parser.procInstBody = \"\";\n                    } else {\n                        strictFail(parser, \"Unencoded <\");\n                        // if there was some whitespace, then add that in.\n                        if (parser.startTagPosition + 1 < parser.position) {\n                            var pad = parser.position - parser.startTagPosition;\n                            c = new Array(pad).join(\" \") + c;\n                        }\n                        parser.textNode += \"<\" + c;\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.SGML_DECL:\n                    if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                        emitNode(parser, \"onopencdata\");\n                        parser.state = S.CDATA;\n                        parser.sgmlDecl = \"\";\n                        parser.cdata = \"\";\n                    } else if (parser.sgmlDecl + c === \"--\") {\n                        parser.state = S.COMMENT;\n                        parser.comment = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                        parser.state = S.DOCTYPE;\n                        if (parser.doctype || parser.sawRoot) {\n                            strictFail(parser, \"Inappropriately located doctype declaration\");\n                        }\n                        parser.doctype = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if (c === \">\") {\n                        emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                        parser.sgmlDecl = \"\";\n                        parser.state = S.TEXT;\n                    } else if (isQuote(c)) {\n                        parser.state = S.SGML_DECL_QUOTED;\n                        parser.sgmlDecl += c;\n                    } else {\n                        parser.sgmlDecl += c;\n                    }\n                    continue;\n                case S.SGML_DECL_QUOTED:\n                    if (c === parser.q) {\n                        parser.state = S.SGML_DECL;\n                        parser.q = \"\";\n                    }\n                    parser.sgmlDecl += c;\n                    continue;\n                case S.DOCTYPE:\n                    if (c === \">\") {\n                        parser.state = S.TEXT;\n                        emitNode(parser, \"ondoctype\", parser.doctype);\n                        parser.doctype = true // just remember that we saw it.\n                        ;\n                    } else {\n                        parser.doctype += c;\n                        if (c === \"[\") {\n                            parser.state = S.DOCTYPE_DTD;\n                        } else if (isQuote(c)) {\n                            parser.state = S.DOCTYPE_QUOTED;\n                            parser.q = c;\n                        }\n                    }\n                    continue;\n                case S.DOCTYPE_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.q = \"\";\n                        parser.state = S.DOCTYPE;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD:\n                    parser.doctype += c;\n                    if (c === \"]\") {\n                        parser.state = S.DOCTYPE;\n                    } else if (isQuote(c)) {\n                        parser.state = S.DOCTYPE_DTD_QUOTED;\n                        parser.q = c;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.q = \"\";\n                    }\n                    continue;\n                case S.COMMENT:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDING;\n                    } else {\n                        parser.comment += c;\n                    }\n                    continue;\n                case S.COMMENT_ENDING:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDED;\n                        parser.comment = textopts(parser.opt, parser.comment);\n                        if (parser.comment) {\n                            emitNode(parser, \"oncomment\", parser.comment);\n                        }\n                        parser.comment = \"\";\n                    } else {\n                        parser.comment += \"-\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    continue;\n                case S.COMMENT_ENDED:\n                    if (c !== \">\") {\n                        strictFail(parser, \"Malformed comment\");\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        parser.comment += \"--\" + c;\n                        parser.state = S.COMMENT;\n                    } else {\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.CDATA:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING;\n                    } else {\n                        parser.cdata += c;\n                    }\n                    continue;\n                case S.CDATA_ENDING:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING_2;\n                    } else {\n                        parser.cdata += \"]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.CDATA_ENDING_2:\n                    if (c === \">\") {\n                        if (parser.cdata) {\n                            emitNode(parser, \"oncdata\", parser.cdata);\n                        }\n                        emitNode(parser, \"onclosecdata\");\n                        parser.cdata = \"\";\n                        parser.state = S.TEXT;\n                    } else if (c === \"]\") {\n                        parser.cdata += \"]\";\n                    } else {\n                        parser.cdata += \"]]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.PROC_INST:\n                    if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.PROC_INST_BODY;\n                    } else {\n                        parser.procInstName += c;\n                    }\n                    continue;\n                case S.PROC_INST_BODY:\n                    if (!parser.procInstBody && isWhitespace(c)) {\n                        continue;\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else {\n                        parser.procInstBody += c;\n                    }\n                    continue;\n                case S.PROC_INST_ENDING:\n                    if (c === \">\") {\n                        emitNode(parser, \"onprocessinginstruction\", {\n                            name: parser.procInstName,\n                            body: parser.procInstBody\n                        });\n                        parser.procInstName = parser.procInstBody = \"\";\n                        parser.state = S.TEXT;\n                    } else {\n                        parser.procInstBody += \"?\" + c;\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    continue;\n                case S.OPEN_TAG:\n                    if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else {\n                        newTag(parser);\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (c === \"/\") {\n                            parser.state = S.OPEN_TAG_SLASH;\n                        } else {\n                            if (!isWhitespace(c)) {\n                                strictFail(parser, \"Invalid character in tag name\");\n                            }\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.OPEN_TAG_SLASH:\n                    if (c === \">\") {\n                        openTag(parser, true);\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (c === \">\") {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.attribValue = parser.attribName;\n                        attrib(parser);\n                        openTag(parser);\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                    } else if (isMatch(nameBody, c)) {\n                        parser.attribName += c;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (isWhitespace(c)) {\n                        continue;\n                    } else {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.tag.attributes[parser.attribName] = \"\";\n                        parser.attribValue = \"\";\n                        emitNode(parser, \"onattribute\", {\n                            name: parser.attribName,\n                            value: \"\"\n                        });\n                        parser.attribName = \"\";\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (isMatch(nameStart, c)) {\n                            parser.attribName = c;\n                            parser.state = S.ATTRIB_NAME;\n                        } else {\n                            strictFail(parser, \"Invalid attribute name\");\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.ATTRIB_VALUE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (isQuote(c)) {\n                        parser.q = c;\n                        parser.state = S.ATTRIB_VALUE_QUOTED;\n                    } else {\n                        strictFail(parser, \"Unquoted attribute value\");\n                        parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                        parser.attribValue = c;\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_QUOTED:\n                    if (c !== parser.q) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    parser.q = \"\";\n                    parser.state = S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case S.ATTRIB_VALUE_CLOSED:\n                    if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        strictFail(parser, \"No whitespace between attributes\");\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_UNQUOTED:\n                    if (!isAttribEnd(c)) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    if (c === \">\") {\n                        openTag(parser);\n                    } else {\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.CLOSE_TAG:\n                    if (!parser.tagName) {\n                        if (isWhitespace(c)) {\n                            continue;\n                        } else if (notMatch(nameStart, c)) {\n                            if (parser.script) {\n                                parser.script += \"</\" + c;\n                                parser.state = S.SCRIPT;\n                            } else {\n                                strictFail(parser, \"Invalid tagname in closing tag.\");\n                            }\n                        } else {\n                            parser.tagName = c;\n                        }\n                    } else if (c === \">\") {\n                        closeTag(parser);\n                    } else if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else if (parser.script) {\n                        parser.script += \"</\" + parser.tagName;\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                    } else {\n                        if (!isWhitespace(c)) {\n                            strictFail(parser, \"Invalid tagname in closing tag\");\n                        }\n                        parser.state = S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case S.CLOSE_TAG_SAW_WHITE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === \">\") {\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Invalid characters in closing tag\");\n                    }\n                    continue;\n                case S.TEXT_ENTITY:\n                case S.ATTRIB_VALUE_ENTITY_Q:\n                case S.ATTRIB_VALUE_ENTITY_U:\n                    var returnState;\n                    var buffer;\n                    switch(parser.state){\n                        case S.TEXT_ENTITY:\n                            returnState = S.TEXT;\n                            buffer = \"textNode\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = S.ATTRIB_VALUE_QUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                    }\n                    if (c === \";\") {\n                        parser[buffer] += parseEntity(parser);\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                        parser.entity += c;\n                    } else {\n                        strictFail(parser, \"Invalid character in entity name\");\n                        parser[buffer] += \"&\" + parser.entity + c;\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    }\n                    continue;\n                default:\n                    throw new Error(parser, \"Unknown state: \" + parser.state);\n            }\n        } // while\n        if (parser.position >= parser.bufferCheckPosition) {\n            checkBufferLength(parser);\n        }\n        return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ /* istanbul ignore next */ if (!String.fromCodePoint) {\n        (function() {\n            var stringFromCharCode = String.fromCharCode;\n            var floor = Math.floor;\n            var fromCodePoint = function() {\n                var MAX_SIZE = 0x4000;\n                var codeUnits = [];\n                var highSurrogate;\n                var lowSurrogate;\n                var index = -1;\n                var length = arguments.length;\n                if (!length) {\n                    return \"\";\n                }\n                var result = \"\";\n                while(++index < length){\n                    var codePoint = Number(arguments[index]);\n                    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                    codePoint < 0 || // not a valid Unicode code point\n                    codePoint > 0x10FFFF || // not a valid Unicode code point\n                    floor(codePoint) !== codePoint // not an integer\n                    ) {\n                        throw RangeError(\"Invalid code point: \" + codePoint);\n                    }\n                    if (codePoint <= 0xFFFF) {\n                        codeUnits.push(codePoint);\n                    } else {\n                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        codePoint -= 0x10000;\n                        highSurrogate = (codePoint >> 10) + 0xD800;\n                        lowSurrogate = codePoint % 0x400 + 0xDC00;\n                        codeUnits.push(highSurrogate, lowSurrogate);\n                    }\n                    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                        result += stringFromCharCode.apply(null, codeUnits);\n                        codeUnits.length = 0;\n                    }\n                }\n                return result;\n            };\n            /* istanbul ignore next */ if (Object.defineProperty) {\n                Object.defineProperty(String, \"fromCodePoint\", {\n                    value: fromCodePoint,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                String.fromCodePoint = fromCodePoint;\n            }\n        })();\n    }\n})( false ? 0 : exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/sax/lib/sax.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/Utility.js":
/*!************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/Utility.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var assign, camelCase, capitalize, isArray, isEmpty, isFunction, isObject, isPlainObject, kebabCase, snakeCase, titleCase, words, slice = [].slice, hasProp = {}.hasOwnProperty;\n    assign = function() {\n        var i, key, len, source, sources, target;\n        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n        if (isFunction(Object.assign)) {\n            Object.assign.apply(null, arguments);\n        } else {\n            for(i = 0, len = sources.length; i < len; i++){\n                source = sources[i];\n                if (source != null) {\n                    for(key in source){\n                        if (!hasProp.call(source, key)) continue;\n                        target[key] = source[key];\n                    }\n                }\n            }\n        }\n        return target;\n    };\n    isFunction = function(val) {\n        return !!val && Object.prototype.toString.call(val) === \"[object Function]\";\n    };\n    isObject = function(val) {\n        var ref;\n        return !!val && ((ref = typeof val) === \"function\" || ref === \"object\");\n    };\n    isArray = function(val) {\n        if (isFunction(Array.isArray)) {\n            return Array.isArray(val);\n        } else {\n            return Object.prototype.toString.call(val) === \"[object Array]\";\n        }\n    };\n    isEmpty = function(val) {\n        var key;\n        if (isArray(val)) {\n            return !val.length;\n        } else {\n            for(key in val){\n                if (!hasProp.call(val, key)) continue;\n                return false;\n            }\n            return true;\n        }\n    };\n    isPlainObject = function(val) {\n        var ctor, proto;\n        return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === \"function\" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);\n    };\n    words = function(val) {\n        return (val.split(/[-_\\s]+|(?=[A-Z][a-z])/) || []).filter(function(n) {\n            return !!n;\n        });\n    };\n    camelCase = function(val) {\n        var i, index, len, r, ref, word;\n        r = \"\";\n        ref = words(val);\n        for(index = i = 0, len = ref.length; i < len; index = ++i){\n            word = ref[index];\n            r += index ? capitalize(word.toLowerCase()) : word.toLowerCase();\n        }\n        return r;\n    };\n    titleCase = function(val) {\n        var i, index, len, r, ref, word;\n        r = \"\";\n        ref = words(val);\n        for(index = i = 0, len = ref.length; i < len; index = ++i){\n            word = ref[index];\n            r += capitalize(word.toLowerCase());\n        }\n        return r;\n    };\n    kebabCase = function(val) {\n        var i, index, len, r, ref, word;\n        r = \"\";\n        ref = words(val);\n        for(index = i = 0, len = ref.length; i < len; index = ++i){\n            word = ref[index];\n            r += (index ? \"-\" : \"\") + word.toLowerCase();\n        }\n        return r;\n    };\n    snakeCase = function(val) {\n        var i, index, len, r, ref, word;\n        r = \"\";\n        ref = words(val);\n        for(index = i = 0, len = ref.length; i < len; index = ++i){\n            word = ref[index];\n            r += (index ? \"_\" : \"\") + word.toLowerCase();\n        }\n        return r;\n    };\n    capitalize = function(val) {\n        return val.charAt(0).toUpperCase() + val.slice(1);\n    };\n    module.exports.assign = assign;\n    module.exports.isFunction = isFunction;\n    module.exports.isObject = isObject;\n    module.exports.isArray = isArray;\n    module.exports.isEmpty = isEmpty;\n    module.exports.isPlainObject = isPlainObject;\n    module.exports.camelCase = camelCase;\n    module.exports.titleCase = titleCase;\n    module.exports.kebabCase = kebabCase;\n    module.exports.snakeCase = snakeCase;\n    module.exports.capitalize = capitalize;\n    module.exports.words = words;\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/Utility.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLAttribute.js":
/*!*****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLAttribute.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLAttribute;\n    module.exports = XMLAttribute = function() {\n        function XMLAttribute(parent, name, value) {\n            this.options = parent.options;\n            this.stringify = parent.stringify;\n            if (name == null) {\n                throw new Error(\"Missing attribute name of element \" + parent.name);\n            }\n            if (value == null) {\n                throw new Error(\"Missing attribute value for attribute \" + name + \" of element \" + parent.name);\n            }\n            this.name = this.stringify.attName(name);\n            this.value = this.stringify.attValue(value);\n        }\n        XMLAttribute.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLAttribute.prototype.toString = function(options) {\n            return this.options.writer.set(options).attribute(this);\n        };\n        return XMLAttribute;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTEF0dHJpYnV0ZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUE7SUFFSkMsT0FBT0MsT0FBTyxHQUFHRixlQUFlO1FBQzlCLFNBQVNBLGFBQWFHLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxLQUFLO1lBQ3ZDLElBQUksQ0FBQ0MsT0FBTyxHQUFHSCxPQUFPRyxPQUFPO1lBQzdCLElBQUksQ0FBQ0MsU0FBUyxHQUFHSixPQUFPSSxTQUFTO1lBQ2pDLElBQUlILFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJSSxNQUFNLHVDQUF1Q0wsT0FBT0MsSUFBSTtZQUNwRTtZQUNBLElBQUlDLFNBQVMsTUFBTTtnQkFDakIsTUFBTSxJQUFJRyxNQUFNLDJDQUEyQ0osT0FBTyxpQkFBaUJELE9BQU9DLElBQUk7WUFDaEc7WUFDQSxJQUFJLENBQUNBLElBQUksR0FBRyxJQUFJLENBQUNHLFNBQVMsQ0FBQ0UsT0FBTyxDQUFDTDtZQUNuQyxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0csUUFBUSxDQUFDTDtRQUN2QztRQUVBTCxhQUFhVyxTQUFTLENBQUNDLEtBQUssR0FBRztZQUM3QixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBZCxhQUFhVyxTQUFTLENBQUNJLFFBQVEsR0FBRyxTQUFTVCxPQUFPO1lBQ2hELE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNVLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDWCxTQUFTWSxTQUFTLENBQUMsSUFBSTtRQUN4RDtRQUVBLE9BQU9sQjtJQUVUO0FBRUYsR0FBR21CLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQXR0cmlidXRlLmpzP2UxZDEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTEF0dHJpYnV0ZTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTEF0dHJpYnV0ZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxBdHRyaWJ1dGUocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgdGhpcy5vcHRpb25zID0gcGFyZW50Lm9wdGlvbnM7XG4gICAgICB0aGlzLnN0cmluZ2lmeSA9IHBhcmVudC5zdHJpbmdpZnk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYXR0cmlidXRlIG5hbWUgb2YgZWxlbWVudCBcIiArIHBhcmVudC5uYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgYXR0cmlidXRlIHZhbHVlIGZvciBhdHRyaWJ1dGUgXCIgKyBuYW1lICsgXCIgb2YgZWxlbWVudCBcIiArIHBhcmVudC5uYW1lKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5LmF0dE5hbWUobmFtZSk7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuYXR0VmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIFhNTEF0dHJpYnV0ZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxBdHRyaWJ1dGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmF0dHJpYnV0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTEF0dHJpYnV0ZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTEF0dHJpYnV0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJlbnQiLCJuYW1lIiwidmFsdWUiLCJvcHRpb25zIiwic3RyaW5naWZ5IiwiRXJyb3IiLCJhdHROYW1lIiwiYXR0VmFsdWUiLCJwcm90b3R5cGUiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwid3JpdGVyIiwic2V0IiwiYXR0cmlidXRlIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLAttribute.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLCData.js":
/*!*************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLCData.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLCData, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLCData = function(superClass) {\n        extend(XMLCData, superClass);\n        function XMLCData(parent, text) {\n            XMLCData.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing CDATA text\");\n            }\n            this.text = this.stringify.cdata(text);\n        }\n        XMLCData.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLCData.prototype.toString = function(options) {\n            return this.options.writer.set(options).cdata(this);\n        };\n        return XMLCData;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENEYXRhLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxVQUFVQyxTQUNaQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQkMsT0FBT0MsT0FBTyxHQUFHZixXQUFXLFNBQVVnQixVQUFVO1FBQzlDZCxPQUFPRixVQUFVZ0I7UUFFakIsU0FBU2hCLFNBQVNJLE1BQU0sRUFBRWEsSUFBSTtZQUM1QmpCLFNBQVNXLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUMxQyxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUNBLElBQUksQ0FBQ0QsSUFBSSxHQUFHLElBQUksQ0FBQ0UsU0FBUyxDQUFDQyxLQUFLLENBQUNIO1FBQ25DO1FBRUFqQixTQUFTVSxTQUFTLENBQUNXLEtBQUssR0FBRztZQUN6QixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBdkIsU0FBU1UsU0FBUyxDQUFDYyxRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUM1QyxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0YsU0FBU0wsS0FBSyxDQUFDLElBQUk7UUFDcEQ7UUFFQSxPQUFPcEI7SUFFVCxFQUFHQztBQUVMLEdBQUdNLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MQ0RhdGEuanM/MDBiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MQ0RhdGEsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxDRGF0YSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTENEYXRhLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTENEYXRhKHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MQ0RhdGEuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBDREFUQSB0ZXh0XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy50ZXh0ID0gdGhpcy5zdHJpbmdpZnkuY2RhdGEodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MQ0RhdGEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmNkYXRhKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQ0RhdGE7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MQ0RhdGEiLCJYTUxOb2RlIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwidGV4dCIsIkVycm9yIiwic3RyaW5naWZ5IiwiY2RhdGEiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLCData.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLComment.js":
/*!***************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLComment.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLComment, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLComment = function(superClass) {\n        extend(XMLComment, superClass);\n        function XMLComment(parent, text) {\n            XMLComment.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing comment text\");\n            }\n            this.text = this.stringify.comment(text);\n        }\n        XMLComment.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLComment.prototype.toString = function(options) {\n            return this.options.writer.set(options).comment(this);\n        };\n        return XMLComment;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTENvbW1lbnQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFlBQVlDLFNBQ2RDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JYLFVBQVVZLG1CQUFPQSxDQUFDO0lBRWxCQyxPQUFPQyxPQUFPLEdBQUdmLGFBQWEsU0FBVWdCLFVBQVU7UUFDaERkLE9BQU9GLFlBQVlnQjtRQUVuQixTQUFTaEIsV0FBV0ksTUFBTSxFQUFFYSxJQUFJO1lBQzlCakIsV0FBV1csU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQzVDLElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNO1lBQ2xCO1lBQ0EsSUFBSSxDQUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDRSxTQUFTLENBQUNDLE9BQU8sQ0FBQ0g7UUFDckM7UUFFQWpCLFdBQVdVLFNBQVMsQ0FBQ1csS0FBSyxHQUFHO1lBQzNCLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUF2QixXQUFXVSxTQUFTLENBQUNjLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzlDLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDRixTQUFTTCxPQUFPLENBQUMsSUFBSTtRQUN0RDtRQUVBLE9BQU9wQjtJQUVULEVBQUdDO0FBRUwsR0FBR00sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxDb21tZW50LmpzPzgwNmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTENvbW1lbnQsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxDb21tZW50ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MQ29tbWVudCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxDb21tZW50KHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MQ29tbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNvbW1lbnQgdGV4dFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudGV4dCA9IHRoaXMuc3RyaW5naWZ5LmNvbW1lbnQodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MQ29tbWVudC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxDb21tZW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnNldChvcHRpb25zKS5jb21tZW50KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MQ29tbWVudDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxDb21tZW50IiwiWE1MTm9kZSIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsInRleHQiLCJFcnJvciIsInN0cmluZ2lmeSIsImNvbW1lbnQiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLComment.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDAttList.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDTDAttList, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLDTDAttList = function(superClass) {\n        extend(XMLDTDAttList, superClass);\n        function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            XMLDTDAttList.__super__.constructor.call(this, parent);\n            if (elementName == null) {\n                throw new Error(\"Missing DTD element name\");\n            }\n            if (attributeName == null) {\n                throw new Error(\"Missing DTD attribute name\");\n            }\n            if (!attributeType) {\n                throw new Error(\"Missing DTD attribute type\");\n            }\n            if (!defaultValueType) {\n                throw new Error(\"Missing DTD attribute default\");\n            }\n            if (defaultValueType.indexOf(\"#\") !== 0) {\n                defaultValueType = \"#\" + defaultValueType;\n            }\n            if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT\");\n            }\n            if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n                throw new Error(\"Default value only applies to #FIXED or #DEFAULT\");\n            }\n            this.elementName = this.stringify.eleName(elementName);\n            this.attributeName = this.stringify.attName(attributeName);\n            this.attributeType = this.stringify.dtdAttType(attributeType);\n            this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n            this.defaultValueType = defaultValueType;\n        }\n        XMLDTDAttList.prototype.toString = function(options) {\n            return this.options.writer.set(options).dtdAttList(this);\n        };\n        return XMLDTDAttList;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREF0dExpc3QuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLGVBQWVDLFNBQ2pCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQkMsT0FBT0MsT0FBTyxHQUFHZixnQkFBZ0IsU0FBVWdCLFVBQVU7UUFDbkRkLE9BQU9GLGVBQWVnQjtRQUV0QixTQUFTaEIsY0FBY0ksTUFBTSxFQUFFYSxXQUFXLEVBQUVDLGFBQWEsRUFBRUMsYUFBYSxFQUFFQyxnQkFBZ0IsRUFBRUMsWUFBWTtZQUN0R3JCLGNBQWNXLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUMvQyxJQUFJYSxlQUFlLE1BQU07Z0JBQ3ZCLE1BQU0sSUFBSUssTUFBTTtZQUNsQjtZQUNBLElBQUlKLGlCQUFpQixNQUFNO2dCQUN6QixNQUFNLElBQUlJLE1BQU07WUFDbEI7WUFDQSxJQUFJLENBQUNILGVBQWU7Z0JBQ2xCLE1BQU0sSUFBSUcsTUFBTTtZQUNsQjtZQUNBLElBQUksQ0FBQ0Ysa0JBQWtCO2dCQUNyQixNQUFNLElBQUlFLE1BQU07WUFDbEI7WUFDQSxJQUFJRixpQkFBaUJHLE9BQU8sQ0FBQyxTQUFTLEdBQUc7Z0JBQ3ZDSCxtQkFBbUIsTUFBTUE7WUFDM0I7WUFDQSxJQUFJLENBQUNBLGlCQUFpQkksS0FBSyxDQUFDLDJDQUEyQztnQkFDckUsTUFBTSxJQUFJRixNQUFNO1lBQ2xCO1lBQ0EsSUFBSUQsZ0JBQWdCLENBQUNELGlCQUFpQkksS0FBSyxDQUFDLHdCQUF3QjtnQkFDbEUsTUFBTSxJQUFJRixNQUFNO1lBQ2xCO1lBQ0EsSUFBSSxDQUFDTCxXQUFXLEdBQUcsSUFBSSxDQUFDUSxTQUFTLENBQUNDLE9BQU8sQ0FBQ1Q7WUFDMUMsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSSxDQUFDTyxTQUFTLENBQUNFLE9BQU8sQ0FBQ1Q7WUFDNUMsSUFBSSxDQUFDQyxhQUFhLEdBQUcsSUFBSSxDQUFDTSxTQUFTLENBQUNHLFVBQVUsQ0FBQ1Q7WUFDL0MsSUFBSSxDQUFDRSxZQUFZLEdBQUcsSUFBSSxDQUFDSSxTQUFTLENBQUNJLGFBQWEsQ0FBQ1I7WUFDakQsSUFBSSxDQUFDRCxnQkFBZ0IsR0FBR0E7UUFDMUI7UUFFQXBCLGNBQWNVLFNBQVMsQ0FBQ29CLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQ2pELE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDRixTQUFTRyxVQUFVLENBQUMsSUFBSTtRQUN6RDtRQUVBLE9BQU9sQztJQUVULEVBQUdDO0FBRUwsR0FBR00sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxEVERBdHRMaXN0LmpzPzczY2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERUREF0dExpc3QsIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVERBdHRMaXN0ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MRFREQXR0TGlzdCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVERBdHRMaXN0KHBhcmVudCwgZWxlbWVudE5hbWUsIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVR5cGUsIGRlZmF1bHRWYWx1ZVR5cGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgWE1MRFREQXR0TGlzdC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKGVsZW1lbnROYW1lID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBEVEQgZWxlbWVudCBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgbmFtZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghYXR0cmlidXRlVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgdHlwZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBhdHRyaWJ1dGUgZGVmYXVsdFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWVUeXBlLmluZGV4T2YoJyMnKSAhPT0gMCkge1xuICAgICAgICBkZWZhdWx0VmFsdWVUeXBlID0gJyMnICsgZGVmYXVsdFZhbHVlVHlwZTtcbiAgICAgIH1cbiAgICAgIGlmICghZGVmYXVsdFZhbHVlVHlwZS5tYXRjaCgvXigjUkVRVUlSRUR8I0lNUExJRUR8I0ZJWEVEfCNERUZBVUxUKSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGRlZmF1bHQgdmFsdWUgdHlwZTsgZXhwZWN0ZWQ6ICNSRVFVSVJFRCwgI0lNUExJRUQsICNGSVhFRCBvciAjREVGQVVMVFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0VmFsdWUgJiYgIWRlZmF1bHRWYWx1ZVR5cGUubWF0Y2goL14oI0ZJWEVEfCNERUZBVUxUKSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEZWZhdWx0IHZhbHVlIG9ubHkgYXBwbGllcyB0byAjRklYRUQgb3IgI0RFRkFVTFRcIik7XG4gICAgICB9XG4gICAgICB0aGlzLmVsZW1lbnROYW1lID0gdGhpcy5zdHJpbmdpZnkuZWxlTmFtZShlbGVtZW50TmFtZSk7XG4gICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSB0aGlzLnN0cmluZ2lmeS5hdHROYW1lKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgdGhpcy5hdHRyaWJ1dGVUeXBlID0gdGhpcy5zdHJpbmdpZnkuZHRkQXR0VHlwZShhdHRyaWJ1dGVUeXBlKTtcbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZHRkQXR0RGVmYXVsdChkZWZhdWx0VmFsdWUpO1xuICAgICAgdGhpcy5kZWZhdWx0VmFsdWVUeXBlID0gZGVmYXVsdFZhbHVlVHlwZTtcbiAgICB9XG5cbiAgICBYTUxEVERBdHRMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnNldChvcHRpb25zKS5kdGRBdHRMaXN0KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFREQXR0TGlzdDtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxEVERBdHRMaXN0IiwiWE1MTm9kZSIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsImVsZW1lbnROYW1lIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZVR5cGUiLCJkZWZhdWx0VmFsdWVUeXBlIiwiZGVmYXVsdFZhbHVlIiwiRXJyb3IiLCJpbmRleE9mIiwibWF0Y2giLCJzdHJpbmdpZnkiLCJlbGVOYW1lIiwiYXR0TmFtZSIsImR0ZEF0dFR5cGUiLCJkdGRBdHREZWZhdWx0IiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwic2V0IiwiZHRkQXR0TGlzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDTDElement.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDElement.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDTDElement, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLDTDElement = function(superClass) {\n        extend(XMLDTDElement, superClass);\n        function XMLDTDElement(parent, name, value) {\n            XMLDTDElement.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing DTD element name\");\n            }\n            if (!value) {\n                value = \"(#PCDATA)\";\n            }\n            if (Array.isArray(value)) {\n                value = \"(\" + value.join(\",\") + \")\";\n            }\n            this.name = this.stringify.eleName(name);\n            this.value = this.stringify.dtdElementValue(value);\n        }\n        XMLDTDElement.prototype.toString = function(options) {\n            return this.options.writer.set(options).dtdElement(this);\n        };\n        return XMLDTDElement;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLGVBQWVDLFNBQ2pCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQkMsT0FBT0MsT0FBTyxHQUFHZixnQkFBZ0IsU0FBVWdCLFVBQVU7UUFDbkRkLE9BQU9GLGVBQWVnQjtRQUV0QixTQUFTaEIsY0FBY0ksTUFBTSxFQUFFYSxJQUFJLEVBQUVDLEtBQUs7WUFDeENsQixjQUFjVyxTQUFTLENBQUNGLFdBQVcsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRUg7WUFDL0MsSUFBSWEsUUFBUSxNQUFNO2dCQUNoQixNQUFNLElBQUlFLE1BQU07WUFDbEI7WUFDQSxJQUFJLENBQUNELE9BQU87Z0JBQ1ZBLFFBQVE7WUFDVjtZQUNBLElBQUlFLE1BQU1DLE9BQU8sQ0FBQ0gsUUFBUTtnQkFDeEJBLFFBQVEsTUFBTUEsTUFBTUksSUFBSSxDQUFDLE9BQU87WUFDbEM7WUFDQSxJQUFJLENBQUNMLElBQUksR0FBRyxJQUFJLENBQUNNLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDUDtZQUNuQyxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJLENBQUNLLFNBQVMsQ0FBQ0UsZUFBZSxDQUFDUDtRQUM5QztRQUVBbEIsY0FBY1UsU0FBUyxDQUFDZ0IsUUFBUSxHQUFHLFNBQVNDLE9BQU87WUFDakQsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNGLFNBQVNHLFVBQVUsQ0FBQyxJQUFJO1FBQ3pEO1FBRUEsT0FBTzlCO0lBRVQsRUFBR0M7QUFFTCxHQUFHTSxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVsZW1lbnQuanM/ZDhjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRFRERWxlbWVudCwgWE1MTm9kZSxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVsZW1lbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICAgIGV4dGVuZChYTUxEVERFbGVtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERUREVsZW1lbnQocGFyZW50LCBuYW1lLCB2YWx1ZSkge1xuICAgICAgWE1MRFRERWxlbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIERURCBlbGVtZW50IG5hbWVcIik7XG4gICAgICB9XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gJygjUENEQVRBKSc7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSAnKCcgKyB2YWx1ZS5qb2luKCcsJykgKyAnKSc7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5lbGVOYW1lKG5hbWUpO1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc3RyaW5naWZ5LmR0ZEVsZW1lbnRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgWE1MRFRERWxlbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykuZHRkRWxlbWVudCh0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTERUREVsZW1lbnQ7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MRFRERWxlbWVudCIsIlhNTE5vZGUiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJuYW1lIiwidmFsdWUiLCJFcnJvciIsIkFycmF5IiwiaXNBcnJheSIsImpvaW4iLCJzdHJpbmdpZnkiLCJlbGVOYW1lIiwiZHRkRWxlbWVudFZhbHVlIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwic2V0IiwiZHRkRWxlbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js":
/*!*****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDEntity.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDTDEntity, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLDTDEntity = function(superClass) {\n        extend(XMLDTDEntity, superClass);\n        function XMLDTDEntity(parent, pe, name, value) {\n            XMLDTDEntity.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing entity name\");\n            }\n            if (value == null) {\n                throw new Error(\"Missing entity value\");\n            }\n            this.pe = !!pe;\n            this.name = this.stringify.eleName(name);\n            if (!isObject(value)) {\n                this.value = this.stringify.dtdEntityValue(value);\n            } else {\n                if (!value.pubID && !value.sysID) {\n                    throw new Error(\"Public and/or system identifiers are required for an external entity\");\n                }\n                if (value.pubID && !value.sysID) {\n                    throw new Error(\"System identifier is required for a public external entity\");\n                }\n                if (value.pubID != null) {\n                    this.pubID = this.stringify.dtdPubID(value.pubID);\n                }\n                if (value.sysID != null) {\n                    this.sysID = this.stringify.dtdSysID(value.sysID);\n                }\n                if (value.nData != null) {\n                    this.nData = this.stringify.dtdNData(value.nData);\n                }\n                if (this.pe && this.nData) {\n                    throw new Error(\"Notation declaration is not allowed in a parameter entity\");\n                }\n            }\n        }\n        XMLDTDEntity.prototype.toString = function(options) {\n            return this.options.writer.set(options).dtdEntity(this);\n        };\n        return XMLDTDEntity;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERUREVudGl0eS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsY0FBY0MsU0FBU0MsVUFDekJDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JYLFdBQVdZLHdHQUE2QjtJQUV4Q2IsVUFBVWEsbUJBQU9BLENBQUM7SUFFbEJDLE9BQU9DLE9BQU8sR0FBR2hCLGVBQWUsU0FBVWlCLFVBQVU7UUFDbERkLE9BQU9ILGNBQWNpQjtRQUVyQixTQUFTakIsYUFBYUssTUFBTSxFQUFFYSxFQUFFLEVBQUVDLElBQUksRUFBRUMsS0FBSztZQUMzQ3BCLGFBQWFZLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUM5QyxJQUFJYyxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUUsTUFBTTtZQUNsQjtZQUNBLElBQUlELFNBQVMsTUFBTTtnQkFDakIsTUFBTSxJQUFJQyxNQUFNO1lBQ2xCO1lBQ0EsSUFBSSxDQUFDSCxFQUFFLEdBQUcsQ0FBQyxDQUFDQTtZQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0csU0FBUyxDQUFDQyxPQUFPLENBQUNKO1lBQ25DLElBQUksQ0FBQ2pCLFNBQVNrQixRQUFRO2dCQUNwQixJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNFLFNBQVMsQ0FBQ0UsY0FBYyxDQUFDSjtZQUM3QyxPQUFPO2dCQUNMLElBQUksQ0FBQ0EsTUFBTUssS0FBSyxJQUFJLENBQUNMLE1BQU1NLEtBQUssRUFBRTtvQkFDaEMsTUFBTSxJQUFJTCxNQUFNO2dCQUNsQjtnQkFDQSxJQUFJRCxNQUFNSyxLQUFLLElBQUksQ0FBQ0wsTUFBTU0sS0FBSyxFQUFFO29CQUMvQixNQUFNLElBQUlMLE1BQU07Z0JBQ2xCO2dCQUNBLElBQUlELE1BQU1LLEtBQUssSUFBSSxNQUFNO29CQUN2QixJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNILFNBQVMsQ0FBQ0ssUUFBUSxDQUFDUCxNQUFNSyxLQUFLO2dCQUNsRDtnQkFDQSxJQUFJTCxNQUFNTSxLQUFLLElBQUksTUFBTTtvQkFDdkIsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDSixTQUFTLENBQUNNLFFBQVEsQ0FBQ1IsTUFBTU0sS0FBSztnQkFDbEQ7Z0JBQ0EsSUFBSU4sTUFBTVMsS0FBSyxJQUFJLE1BQU07b0JBQ3ZCLElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUksQ0FBQ1AsU0FBUyxDQUFDUSxRQUFRLENBQUNWLE1BQU1TLEtBQUs7Z0JBQ2xEO2dCQUNBLElBQUksSUFBSSxDQUFDWCxFQUFFLElBQUksSUFBSSxDQUFDVyxLQUFLLEVBQUU7b0JBQ3pCLE1BQU0sSUFBSVIsTUFBTTtnQkFDbEI7WUFDRjtRQUNGO1FBRUFyQixhQUFhVyxTQUFTLENBQUNvQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUNoRCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0YsU0FBU0csU0FBUyxDQUFDLElBQUk7UUFDeEQ7UUFFQSxPQUFPbkM7SUFFVCxFQUFHQztBQUVMLEdBQUdPLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFRERW50aXR5LmpzP2E4YWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERUREVudGl0eSwgWE1MTm9kZSwgaXNPYmplY3QsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBpc09iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzT2JqZWN0O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTERUREVudGl0eSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERUREVudGl0eSwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxEVERFbnRpdHkocGFyZW50LCBwZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERUREVudGl0eS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGVudGl0eSBuYW1lXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBlbnRpdHkgdmFsdWVcIik7XG4gICAgICB9XG4gICAgICB0aGlzLnBlID0gISFwZTtcbiAgICAgIHRoaXMubmFtZSA9IHRoaXMuc3RyaW5naWZ5LmVsZU5hbWUobmFtZSk7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuZHRkRW50aXR5VmFsdWUodmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF2YWx1ZS5wdWJJRCAmJiAhdmFsdWUuc3lzSUQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQdWJsaWMgYW5kL29yIHN5c3RlbSBpZGVudGlmaWVycyBhcmUgcmVxdWlyZWQgZm9yIGFuIGV4dGVybmFsIGVudGl0eVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUucHViSUQgJiYgIXZhbHVlLnN5c0lEKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3lzdGVtIGlkZW50aWZpZXIgaXMgcmVxdWlyZWQgZm9yIGEgcHVibGljIGV4dGVybmFsIGVudGl0eVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUucHViSUQgIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucHViSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRQdWJJRCh2YWx1ZS5wdWJJRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlLnN5c0lEICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnN5c0lEID0gdGhpcy5zdHJpbmdpZnkuZHRkU3lzSUQodmFsdWUuc3lzSUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5uRGF0YSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5uRGF0YSA9IHRoaXMuc3RyaW5naWZ5LmR0ZE5EYXRhKHZhbHVlLm5EYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wZSAmJiB0aGlzLm5EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90YXRpb24gZGVjbGFyYXRpb24gaXMgbm90IGFsbG93ZWQgaW4gYSBwYXJhbWV0ZXIgZW50aXR5XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MRFRERW50aXR5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMud3JpdGVyLnNldChvcHRpb25zKS5kdGRFbnRpdHkodGhpcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEVERFbnRpdHk7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MRFRERW50aXR5IiwiWE1MTm9kZSIsImlzT2JqZWN0IiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwicGUiLCJuYW1lIiwidmFsdWUiLCJFcnJvciIsInN0cmluZ2lmeSIsImVsZU5hbWUiLCJkdGRFbnRpdHlWYWx1ZSIsInB1YklEIiwic3lzSUQiLCJkdGRQdWJJRCIsImR0ZFN5c0lEIiwibkRhdGEiLCJkdGRORGF0YSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsInNldCIsImR0ZEVudGl0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js":
/*!*******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDTDNotation.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDTDNotation, XMLNode, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLDTDNotation = function(superClass) {\n        extend(XMLDTDNotation, superClass);\n        function XMLDTDNotation(parent, name, value) {\n            XMLDTDNotation.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing notation name\");\n            }\n            if (!value.pubID && !value.sysID) {\n                throw new Error(\"Public or system identifiers are required for an external entity\");\n            }\n            this.name = this.stringify.eleName(name);\n            if (value.pubID != null) {\n                this.pubID = this.stringify.dtdPubID(value.pubID);\n            }\n            if (value.sysID != null) {\n                this.sysID = this.stringify.dtdSysID(value.sysID);\n            }\n        }\n        XMLDTDNotation.prototype.toString = function(options) {\n            return this.options.writer.set(options).dtdNotation(this);\n        };\n        return XMLDTDNotation;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERURE5vdGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxnQkFBZ0JDLFNBQ2xCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxVQUFVWSxtQkFBT0EsQ0FBQztJQUVsQkMsT0FBT0MsT0FBTyxHQUFHZixpQkFBaUIsU0FBVWdCLFVBQVU7UUFDcERkLE9BQU9GLGdCQUFnQmdCO1FBRXZCLFNBQVNoQixlQUFlSSxNQUFNLEVBQUVhLElBQUksRUFBRUMsS0FBSztZQUN6Q2xCLGVBQWVXLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUNoRCxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUUsTUFBTTtZQUNsQjtZQUNBLElBQUksQ0FBQ0QsTUFBTUUsS0FBSyxJQUFJLENBQUNGLE1BQU1HLEtBQUssRUFBRTtnQkFDaEMsTUFBTSxJQUFJRixNQUFNO1lBQ2xCO1lBQ0EsSUFBSSxDQUFDRixJQUFJLEdBQUcsSUFBSSxDQUFDSyxTQUFTLENBQUNDLE9BQU8sQ0FBQ047WUFDbkMsSUFBSUMsTUFBTUUsS0FBSyxJQUFJLE1BQU07Z0JBQ3ZCLElBQUksQ0FBQ0EsS0FBSyxHQUFHLElBQUksQ0FBQ0UsU0FBUyxDQUFDRSxRQUFRLENBQUNOLE1BQU1FLEtBQUs7WUFDbEQ7WUFDQSxJQUFJRixNQUFNRyxLQUFLLElBQUksTUFBTTtnQkFDdkIsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNHLFFBQVEsQ0FBQ1AsTUFBTUcsS0FBSztZQUNsRDtRQUNGO1FBRUFyQixlQUFlVSxTQUFTLENBQUNnQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUNsRCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0YsU0FBU0csV0FBVyxDQUFDLElBQUk7UUFDMUQ7UUFFQSxPQUFPOUI7SUFFVCxFQUFHQztBQUVMLEdBQUdNLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRFRETm90YXRpb24uanM/MThlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRFRETm90YXRpb24sIFhNTE5vZGUsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEVEROb3RhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERURE5vdGF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERURE5vdGF0aW9uKHBhcmVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIFhNTERURE5vdGF0aW9uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHBhcmVudCk7XG4gICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgbm90YXRpb24gbmFtZVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghdmFsdWUucHViSUQgJiYgIXZhbHVlLnN5c0lEKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlB1YmxpYyBvciBzeXN0ZW0gaWRlbnRpZmllcnMgYXJlIHJlcXVpcmVkIGZvciBhbiBleHRlcm5hbCBlbnRpdHlcIik7XG4gICAgICB9XG4gICAgICB0aGlzLm5hbWUgPSB0aGlzLnN0cmluZ2lmeS5lbGVOYW1lKG5hbWUpO1xuICAgICAgaWYgKHZhbHVlLnB1YklEICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5wdWJJRCA9IHRoaXMuc3RyaW5naWZ5LmR0ZFB1YklEKHZhbHVlLnB1YklEKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5zeXNJRCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzSUQgPSB0aGlzLnN0cmluZ2lmeS5kdGRTeXNJRCh2YWx1ZS5zeXNJRCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgWE1MRFRETm90YXRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmR0ZE5vdGF0aW9uKHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRFRETm90YXRpb247XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MRFRETm90YXRpb24iLCJYTUxOb2RlIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwibmFtZSIsInZhbHVlIiwiRXJyb3IiLCJwdWJJRCIsInN5c0lEIiwic3RyaW5naWZ5IiwiZWxlTmFtZSIsImR0ZFB1YklEIiwiZHRkU3lzSUQiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJzZXQiLCJkdGROb3RhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDeclaration.js":
/*!*******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDeclaration.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDeclaration, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLDeclaration = function(superClass) {\n        extend(XMLDeclaration, superClass);\n        function XMLDeclaration(parent, version, encoding, standalone) {\n            var ref;\n            XMLDeclaration.__super__.constructor.call(this, parent);\n            if (isObject(version)) {\n                ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n            }\n            if (!version) {\n                version = \"1.0\";\n            }\n            this.version = this.stringify.xmlVersion(version);\n            if (encoding != null) {\n                this.encoding = this.stringify.xmlEncoding(encoding);\n            }\n            if (standalone != null) {\n                this.standalone = this.stringify.xmlStandalone(standalone);\n            }\n        }\n        XMLDeclaration.prototype.toString = function(options) {\n            return this.options.writer.set(options).declaration(this);\n        };\n        return XMLDeclaration;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERlY2xhcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxnQkFBZ0JDLFNBQVNDLFVBQzNCQyxTQUFTLFNBQVNDLEtBQUssRUFBRUMsTUFBTTtRQUFJLElBQUssSUFBSUMsT0FBT0QsT0FBUTtZQUFFLElBQUlFLFFBQVFDLElBQUksQ0FBQ0gsUUFBUUMsTUFBTUYsS0FBSyxDQUFDRSxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBSTtRQUFFO1FBQUUsU0FBU0c7WUFBUyxJQUFJLENBQUNDLFdBQVcsR0FBR047UUFBTztRQUFFSyxLQUFLRSxTQUFTLEdBQUdOLE9BQU9NLFNBQVM7UUFBRVAsTUFBTU8sU0FBUyxHQUFHLElBQUlGO1FBQVFMLE1BQU1RLFNBQVMsR0FBR1AsT0FBT00sU0FBUztRQUFFLE9BQU9QO0lBQU8sR0FDelJHLFVBQVUsQ0FBQyxFQUFFTSxjQUFjO0lBRTdCWCxXQUFXWSx3R0FBNkI7SUFFeENiLFVBQVVhLG1CQUFPQSxDQUFDO0lBRWxCQyxPQUFPQyxPQUFPLEdBQUdoQixpQkFBaUIsU0FBVWlCLFVBQVU7UUFDcERkLE9BQU9ILGdCQUFnQmlCO1FBRXZCLFNBQVNqQixlQUFlSyxNQUFNLEVBQUVhLE9BQU8sRUFBRUMsUUFBUSxFQUFFQyxVQUFVO1lBQzNELElBQUlDO1lBQ0pyQixlQUFlWSxTQUFTLENBQUNGLFdBQVcsQ0FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRUg7WUFDaEQsSUFBSUgsU0FBU2dCLFVBQVU7Z0JBQ3JCRyxNQUFNSCxTQUFTQSxVQUFVRyxJQUFJSCxPQUFPLEVBQUVDLFdBQVdFLElBQUlGLFFBQVEsRUFBRUMsYUFBYUMsSUFBSUQsVUFBVTtZQUM1RjtZQUNBLElBQUksQ0FBQ0YsU0FBUztnQkFDWkEsVUFBVTtZQUNaO1lBQ0EsSUFBSSxDQUFDQSxPQUFPLEdBQUcsSUFBSSxDQUFDSSxTQUFTLENBQUNDLFVBQVUsQ0FBQ0w7WUFDekMsSUFBSUMsWUFBWSxNQUFNO2dCQUNwQixJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJLENBQUNHLFNBQVMsQ0FBQ0UsV0FBVyxDQUFDTDtZQUM3QztZQUNBLElBQUlDLGNBQWMsTUFBTTtnQkFDdEIsSUFBSSxDQUFDQSxVQUFVLEdBQUcsSUFBSSxDQUFDRSxTQUFTLENBQUNHLGFBQWEsQ0FBQ0w7WUFDakQ7UUFDRjtRQUVBcEIsZUFBZVcsU0FBUyxDQUFDZSxRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUNsRCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0YsU0FBU0csV0FBVyxDQUFDLElBQUk7UUFDMUQ7UUFFQSxPQUFPOUI7SUFFVCxFQUFHQztBQUVMLEdBQUdPLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MRGVjbGFyYXRpb24uanM/NzFiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MRGVjbGFyYXRpb24sIFhNTE5vZGUsIGlzT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNPYmplY3QgPSByZXF1aXJlKCcuL1V0aWxpdHknKS5pc09iamVjdDtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEZWNsYXJhdGlvbiA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERlY2xhcmF0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERlY2xhcmF0aW9uKHBhcmVudCwgdmVyc2lvbiwgZW5jb2RpbmcsIHN0YW5kYWxvbmUpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBYTUxEZWNsYXJhdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKGlzT2JqZWN0KHZlcnNpb24pKSB7XG4gICAgICAgIHJlZiA9IHZlcnNpb24sIHZlcnNpb24gPSByZWYudmVyc2lvbiwgZW5jb2RpbmcgPSByZWYuZW5jb2RpbmcsIHN0YW5kYWxvbmUgPSByZWYuc3RhbmRhbG9uZTtcbiAgICAgIH1cbiAgICAgIGlmICghdmVyc2lvbikge1xuICAgICAgICB2ZXJzaW9uID0gJzEuMCc7XG4gICAgICB9XG4gICAgICB0aGlzLnZlcnNpb24gPSB0aGlzLnN0cmluZ2lmeS54bWxWZXJzaW9uKHZlcnNpb24pO1xuICAgICAgaWYgKGVuY29kaW5nICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5lbmNvZGluZyA9IHRoaXMuc3RyaW5naWZ5LnhtbEVuY29kaW5nKGVuY29kaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFuZGFsb25lICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zdGFuZGFsb25lID0gdGhpcy5zdHJpbmdpZnkueG1sU3RhbmRhbG9uZShzdGFuZGFsb25lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxEZWNsYXJhdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykuZGVjbGFyYXRpb24odGhpcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBYTUxEZWNsYXJhdGlvbjtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxEZWNsYXJhdGlvbiIsIlhNTE5vZGUiLCJpc09iamVjdCIsImV4dGVuZCIsImNoaWxkIiwicGFyZW50Iiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJjdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic3VwZXJDbGFzcyIsInZlcnNpb24iLCJlbmNvZGluZyIsInN0YW5kYWxvbmUiLCJyZWYiLCJzdHJpbmdpZnkiLCJ4bWxWZXJzaW9uIiwieG1sRW5jb2RpbmciLCJ4bWxTdGFuZGFsb25lIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwic2V0IiwiZGVjbGFyYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDocType.js":
/*!***************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDocType.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNode, isObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isObject = (__webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\").isObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    module.exports = XMLDocType = function(superClass) {\n        extend(XMLDocType, superClass);\n        function XMLDocType(parent, pubID, sysID) {\n            var ref, ref1;\n            XMLDocType.__super__.constructor.call(this, parent);\n            this.documentObject = parent;\n            if (isObject(pubID)) {\n                ref = pubID, pubID = ref.pubID, sysID = ref.sysID;\n            }\n            if (sysID == null) {\n                ref1 = [\n                    pubID,\n                    sysID\n                ], sysID = ref1[0], pubID = ref1[1];\n            }\n            if (pubID != null) {\n                this.pubID = this.stringify.dtdPubID(pubID);\n            }\n            if (sysID != null) {\n                this.sysID = this.stringify.dtdSysID(sysID);\n            }\n        }\n        XMLDocType.prototype.element = function(name, value) {\n            var child;\n            child = new XMLDTDElement(this, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            var child;\n            child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.entity = function(name, value) {\n            var child;\n            child = new XMLDTDEntity(this, false, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.pEntity = function(name, value) {\n            var child;\n            child = new XMLDTDEntity(this, true, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.notation = function(name, value) {\n            var child;\n            child = new XMLDTDNotation(this, name, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLDocType.prototype.toString = function(options) {\n            return this.options.writer.set(options).docType(this);\n        };\n        XMLDocType.prototype.ele = function(name, value) {\n            return this.element(name, value);\n        };\n        XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        };\n        XMLDocType.prototype.ent = function(name, value) {\n            return this.entity(name, value);\n        };\n        XMLDocType.prototype.pent = function(name, value) {\n            return this.pEntity(name, value);\n        };\n        XMLDocType.prototype.not = function(name, value) {\n            return this.notation(name, value);\n        };\n        XMLDocType.prototype.up = function() {\n            return this.root() || this.documentObject;\n        };\n        return XMLDocType;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDocType.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDocument.js":
/*!****************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDocument.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    isPlainObject = (__webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\").isPlainObject);\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    module.exports = XMLDocument = function(superClass) {\n        extend(XMLDocument, superClass);\n        function XMLDocument(options) {\n            XMLDocument.__super__.constructor.call(this, null);\n            options || (options = {});\n            if (!options.writer) {\n                options.writer = new XMLStringWriter();\n            }\n            this.options = options;\n            this.stringify = new XMLStringifier(options);\n            this.isDocument = true;\n        }\n        XMLDocument.prototype.end = function(writer) {\n            var writerOptions;\n            if (!writer) {\n                writer = this.options.writer;\n            } else if (isPlainObject(writer)) {\n                writerOptions = writer;\n                writer = this.options.writer.set(writerOptions);\n            }\n            return writer.document(this);\n        };\n        XMLDocument.prototype.toString = function(options) {\n            return this.options.writer.set(options).document(this);\n        };\n        return XMLDocument;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERvY3VtZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxhQUFhQyxTQUFTQyxpQkFBaUJDLGdCQUFnQkMsZUFDekRDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JYLGdCQUFnQlksNkdBQWtDO0lBRWxEZixVQUFVZSxtQkFBT0EsQ0FBQztJQUVsQmIsaUJBQWlCYSxtQkFBT0EsQ0FBQztJQUV6QmQsa0JBQWtCYyxtQkFBT0EsQ0FBQztJQUUxQkMsT0FBT0MsT0FBTyxHQUFHbEIsY0FBYyxTQUFVbUIsVUFBVTtRQUNqRGQsT0FBT0wsYUFBYW1CO1FBRXBCLFNBQVNuQixZQUFZb0IsT0FBTztZQUMxQnBCLFlBQVljLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzdDVSxXQUFZQSxDQUFBQSxVQUFVLENBQUM7WUFDdkIsSUFBSSxDQUFDQSxRQUFRQyxNQUFNLEVBQUU7Z0JBQ25CRCxRQUFRQyxNQUFNLEdBQUcsSUFBSW5CO1lBQ3ZCO1lBQ0EsSUFBSSxDQUFDa0IsT0FBTyxHQUFHQTtZQUNmLElBQUksQ0FBQ0UsU0FBUyxHQUFHLElBQUluQixlQUFlaUI7WUFDcEMsSUFBSSxDQUFDRyxVQUFVLEdBQUc7UUFDcEI7UUFFQXZCLFlBQVlhLFNBQVMsQ0FBQ1csR0FBRyxHQUFHLFNBQVNILE1BQU07WUFDekMsSUFBSUk7WUFDSixJQUFJLENBQUNKLFFBQVE7Z0JBQ1hBLFNBQVMsSUFBSSxDQUFDRCxPQUFPLENBQUNDLE1BQU07WUFDOUIsT0FBTyxJQUFJakIsY0FBY2lCLFNBQVM7Z0JBQ2hDSSxnQkFBZ0JKO2dCQUNoQkEsU0FBUyxJQUFJLENBQUNELE9BQU8sQ0FBQ0MsTUFBTSxDQUFDSyxHQUFHLENBQUNEO1lBQ25DO1lBQ0EsT0FBT0osT0FBT00sUUFBUSxDQUFDLElBQUk7UUFDN0I7UUFFQTNCLFlBQVlhLFNBQVMsQ0FBQ2UsUUFBUSxHQUFHLFNBQVNSLE9BQU87WUFDL0MsT0FBTyxJQUFJLENBQUNBLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDSyxHQUFHLENBQUNOLFNBQVNPLFFBQVEsQ0FBQyxJQUFJO1FBQ3ZEO1FBRUEsT0FBTzNCO0lBRVQsRUFBR0M7QUFFTCxHQUFHUyxJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTERvY3VtZW50LmpzPzUyOGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERvY3VtZW50LCBYTUxOb2RlLCBYTUxTdHJpbmdXcml0ZXIsIFhNTFN0cmluZ2lmaWVyLCBpc1BsYWluT2JqZWN0LFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vVXRpbGl0eScpLmlzUGxhaW5PYmplY3Q7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIFhNTFN0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdpZmllcicpO1xuXG4gIFhNTFN0cmluZ1dyaXRlciA9IHJlcXVpcmUoJy4vWE1MU3RyaW5nV3JpdGVyJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxEb2N1bWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTERvY3VtZW50LCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTERvY3VtZW50KG9wdGlvbnMpIHtcbiAgICAgIFhNTERvY3VtZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG51bGwpO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIGlmICghb3B0aW9ucy53cml0ZXIpIHtcbiAgICAgICAgb3B0aW9ucy53cml0ZXIgPSBuZXcgWE1MU3RyaW5nV3JpdGVyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgdGhpcy5zdHJpbmdpZnkgPSBuZXcgWE1MU3RyaW5naWZpZXIob3B0aW9ucyk7XG4gICAgICB0aGlzLmlzRG9jdW1lbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIFhNTERvY3VtZW50LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbih3cml0ZXIpIHtcbiAgICAgIHZhciB3cml0ZXJPcHRpb25zO1xuICAgICAgaWYgKCF3cml0ZXIpIHtcbiAgICAgICAgd3JpdGVyID0gdGhpcy5vcHRpb25zLndyaXRlcjtcbiAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh3cml0ZXIpKSB7XG4gICAgICAgIHdyaXRlck9wdGlvbnMgPSB3cml0ZXI7XG4gICAgICAgIHdyaXRlciA9IHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KHdyaXRlck9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyaXRlci5kb2N1bWVudCh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MRG9jdW1lbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLmRvY3VtZW50KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MRG9jdW1lbnQ7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MRG9jdW1lbnQiLCJYTUxOb2RlIiwiWE1MU3RyaW5nV3JpdGVyIiwiWE1MU3RyaW5naWZpZXIiLCJpc1BsYWluT2JqZWN0IiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwib3B0aW9ucyIsIndyaXRlciIsInN0cmluZ2lmeSIsImlzRG9jdW1lbnQiLCJlbmQiLCJ3cml0ZXJPcHRpb25zIiwic2V0IiwiZG9jdW1lbnQiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDocument.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLDocumentCB.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLDocumentCB.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, isFunction, isObject, isPlainObject, ref, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject;\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    XMLStringifier = __webpack_require__(/*! ./XMLStringifier */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLStringifier.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    module.exports = XMLDocumentCB = function() {\n        function XMLDocumentCB(options, onData, onEnd) {\n            var writerOptions;\n            options || (options = {});\n            if (!options.writer) {\n                options.writer = new XMLStringWriter(options);\n            } else if (isPlainObject(options.writer)) {\n                writerOptions = options.writer;\n                options.writer = new XMLStringWriter(writerOptions);\n            }\n            this.options = options;\n            this.writer = options.writer;\n            this.stringify = new XMLStringifier(options);\n            this.onDataCallback = onData || function() {};\n            this.onEndCallback = onEnd || function() {};\n            this.currentNode = null;\n            this.currentLevel = -1;\n            this.openTags = {};\n            this.documentStarted = false;\n            this.documentCompleted = false;\n            this.root = null;\n        }\n        XMLDocumentCB.prototype.node = function(name, attributes, text) {\n            var ref1;\n            if (name == null) {\n                throw new Error(\"Missing node name\");\n            }\n            if (this.root && this.currentLevel === -1) {\n                throw new Error(\"Document can only have one root node\");\n            }\n            this.openCurrent();\n            name = name.valueOf();\n            if (attributes == null) {\n                attributes = {};\n            }\n            attributes = attributes.valueOf();\n            if (!isObject(attributes)) {\n                ref1 = [\n                    attributes,\n                    text\n                ], text = ref1[0], attributes = ref1[1];\n            }\n            this.currentNode = new XMLElement(this, name, attributes);\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            if (text != null) {\n                this.text(text);\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.element = function(name, attributes, text) {\n            if (this.currentNode && this.currentNode instanceof XMLDocType) {\n                return this.dtdElement.apply(this, arguments);\n            } else {\n                return this.node(name, attributes, text);\n            }\n        };\n        XMLDocumentCB.prototype.attribute = function(name, value) {\n            var attName, attValue;\n            if (!this.currentNode || this.currentNode.children) {\n                throw new Error(\"att() can only be used immediately after an ele() call in callback mode\");\n            }\n            if (name != null) {\n                name = name.valueOf();\n            }\n            if (isObject(name)) {\n                for(attName in name){\n                    if (!hasProp.call(name, attName)) continue;\n                    attValue = name[attName];\n                    this.attribute(attName, attValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                if (!this.options.skipNullAttributes || value != null) {\n                    this.currentNode.attributes[name] = new XMLAttribute(this, name, value);\n                }\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.text = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLText(this, value);\n            this.onData(this.writer.text(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.cdata = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLCData(this, value);\n            this.onData(this.writer.cdata(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.comment = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLComment(this, value);\n            this.onData(this.writer.comment(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.raw = function(value) {\n            var node;\n            this.openCurrent();\n            node = new XMLRaw(this, value);\n            this.onData(this.writer.raw(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.instruction = function(target, value) {\n            var i, insTarget, insValue, len, node;\n            this.openCurrent();\n            if (target != null) {\n                target = target.valueOf();\n            }\n            if (value != null) {\n                value = value.valueOf();\n            }\n            if (Array.isArray(target)) {\n                for(i = 0, len = target.length; i < len; i++){\n                    insTarget = target[i];\n                    this.instruction(insTarget);\n                }\n            } else if (isObject(target)) {\n                for(insTarget in target){\n                    if (!hasProp.call(target, insTarget)) continue;\n                    insValue = target[insTarget];\n                    this.instruction(insTarget, insValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                node = new XMLProcessingInstruction(this, target, value);\n                this.onData(this.writer.processingInstruction(node, this.currentLevel + 1));\n            }\n            return this;\n        };\n        XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\n            var node;\n            this.openCurrent();\n            if (this.documentStarted) {\n                throw new Error(\"declaration() must be the first node\");\n            }\n            node = new XMLDeclaration(this, version, encoding, standalone);\n            this.onData(this.writer.declaration(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\n            this.openCurrent();\n            if (root == null) {\n                throw new Error(\"Missing root node name\");\n            }\n            if (this.root) {\n                throw new Error(\"dtd() must come before the root node\");\n            }\n            this.currentNode = new XMLDocType(this, pubID, sysID);\n            this.currentNode.rootNodeName = root;\n            this.currentNode.children = false;\n            this.currentLevel++;\n            this.openTags[this.currentLevel] = this.currentNode;\n            return this;\n        };\n        XMLDocumentCB.prototype.dtdElement = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDElement(this, name, value);\n            this.onData(this.writer.dtdElement(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n            this.onData(this.writer.dtdAttList(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.entity = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, false, name, value);\n            this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.pEntity = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDEntity(this, true, name, value);\n            this.onData(this.writer.dtdEntity(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.notation = function(name, value) {\n            var node;\n            this.openCurrent();\n            node = new XMLDTDNotation(this, name, value);\n            this.onData(this.writer.dtdNotation(node, this.currentLevel + 1));\n            return this;\n        };\n        XMLDocumentCB.prototype.up = function() {\n            if (this.currentLevel < 0) {\n                throw new Error(\"The document node has no parent\");\n            }\n            if (this.currentNode) {\n                if (this.currentNode.children) {\n                    this.closeNode(this.currentNode);\n                } else {\n                    this.openNode(this.currentNode);\n                }\n                this.currentNode = null;\n            } else {\n                this.closeNode(this.openTags[this.currentLevel]);\n            }\n            delete this.openTags[this.currentLevel];\n            this.currentLevel--;\n            return this;\n        };\n        XMLDocumentCB.prototype.end = function() {\n            while(this.currentLevel >= 0){\n                this.up();\n            }\n            return this.onEnd();\n        };\n        XMLDocumentCB.prototype.openCurrent = function() {\n            if (this.currentNode) {\n                this.currentNode.children = true;\n                return this.openNode(this.currentNode);\n            }\n        };\n        XMLDocumentCB.prototype.openNode = function(node) {\n            if (!node.isOpen) {\n                if (!this.root && this.currentLevel === 0 && node instanceof XMLElement) {\n                    this.root = node;\n                }\n                this.onData(this.writer.openNode(node, this.currentLevel));\n                return node.isOpen = true;\n            }\n        };\n        XMLDocumentCB.prototype.closeNode = function(node) {\n            if (!node.isClosed) {\n                this.onData(this.writer.closeNode(node, this.currentLevel));\n                return node.isClosed = true;\n            }\n        };\n        XMLDocumentCB.prototype.onData = function(chunk) {\n            this.documentStarted = true;\n            return this.onDataCallback(chunk);\n        };\n        XMLDocumentCB.prototype.onEnd = function() {\n            this.documentCompleted = true;\n            return this.onEndCallback();\n        };\n        XMLDocumentCB.prototype.ele = function() {\n            return this.element.apply(this, arguments);\n        };\n        XMLDocumentCB.prototype.nod = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.txt = function(value) {\n            return this.text(value);\n        };\n        XMLDocumentCB.prototype.dat = function(value) {\n            return this.cdata(value);\n        };\n        XMLDocumentCB.prototype.com = function(value) {\n            return this.comment(value);\n        };\n        XMLDocumentCB.prototype.ins = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\n            return this.declaration(version, encoding, standalone);\n        };\n        XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\n            return this.doctype(root, pubID, sysID);\n        };\n        XMLDocumentCB.prototype.e = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.n = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLDocumentCB.prototype.t = function(value) {\n            return this.text(value);\n        };\n        XMLDocumentCB.prototype.d = function(value) {\n            return this.cdata(value);\n        };\n        XMLDocumentCB.prototype.c = function(value) {\n            return this.comment(value);\n        };\n        XMLDocumentCB.prototype.r = function(value) {\n            return this.raw(value);\n        };\n        XMLDocumentCB.prototype.i = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLDocumentCB.prototype.att = function() {\n            if (this.currentNode && this.currentNode instanceof XMLDocType) {\n                return this.attList.apply(this, arguments);\n            } else {\n                return this.attribute.apply(this, arguments);\n            }\n        };\n        XMLDocumentCB.prototype.a = function() {\n            if (this.currentNode && this.currentNode instanceof XMLDocType) {\n                return this.attList.apply(this, arguments);\n            } else {\n                return this.attribute.apply(this, arguments);\n            }\n        };\n        XMLDocumentCB.prototype.ent = function(name, value) {\n            return this.entity(name, value);\n        };\n        XMLDocumentCB.prototype.pent = function(name, value) {\n            return this.pEntity(name, value);\n        };\n        XMLDocumentCB.prototype.not = function(name, value) {\n            return this.notation(name, value);\n        };\n        return XMLDocumentCB;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLDocumentCB.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLElement.js":
/*!***************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLElement.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLAttribute, XMLElement, XMLNode, isFunction, isObject, ref, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref.isObject, isFunction = ref.isFunction;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    XMLAttribute = __webpack_require__(/*! ./XMLAttribute */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLAttribute.js\");\n    module.exports = XMLElement = function(superClass) {\n        extend(XMLElement, superClass);\n        function XMLElement(parent, name, attributes) {\n            XMLElement.__super__.constructor.call(this, parent);\n            if (name == null) {\n                throw new Error(\"Missing element name\");\n            }\n            this.name = this.stringify.eleName(name);\n            this.attributes = {};\n            if (attributes != null) {\n                this.attribute(attributes);\n            }\n            if (parent.isDocument) {\n                this.isRoot = true;\n                this.documentObject = parent;\n                parent.rootObject = this;\n            }\n        }\n        XMLElement.prototype.clone = function() {\n            var att, attName, clonedSelf, ref1;\n            clonedSelf = Object.create(this);\n            if (clonedSelf.isRoot) {\n                clonedSelf.documentObject = null;\n            }\n            clonedSelf.attributes = {};\n            ref1 = this.attributes;\n            for(attName in ref1){\n                if (!hasProp.call(ref1, attName)) continue;\n                att = ref1[attName];\n                clonedSelf.attributes[attName] = att.clone();\n            }\n            clonedSelf.children = [];\n            this.children.forEach(function(child) {\n                var clonedChild;\n                clonedChild = child.clone();\n                clonedChild.parent = clonedSelf;\n                return clonedSelf.children.push(clonedChild);\n            });\n            return clonedSelf;\n        };\n        XMLElement.prototype.attribute = function(name, value) {\n            var attName, attValue;\n            if (name != null) {\n                name = name.valueOf();\n            }\n            if (isObject(name)) {\n                for(attName in name){\n                    if (!hasProp.call(name, attName)) continue;\n                    attValue = name[attName];\n                    this.attribute(attName, attValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                if (!this.options.skipNullAttributes || value != null) {\n                    this.attributes[name] = new XMLAttribute(this, name, value);\n                }\n            }\n            return this;\n        };\n        XMLElement.prototype.removeAttribute = function(name) {\n            var attName, i, len;\n            if (name == null) {\n                throw new Error(\"Missing attribute name\");\n            }\n            name = name.valueOf();\n            if (Array.isArray(name)) {\n                for(i = 0, len = name.length; i < len; i++){\n                    attName = name[i];\n                    delete this.attributes[attName];\n                }\n            } else {\n                delete this.attributes[name];\n            }\n            return this;\n        };\n        XMLElement.prototype.toString = function(options) {\n            return this.options.writer.set(options).element(this);\n        };\n        XMLElement.prototype.att = function(name, value) {\n            return this.attribute(name, value);\n        };\n        XMLElement.prototype.a = function(name, value) {\n            return this.attribute(name, value);\n        };\n        return XMLElement;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLElement.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js":
/*!************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLNode.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLProcessingInstruction, XMLRaw, XMLText, isEmpty, isFunction, isObject, ref, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\"), isObject = ref.isObject, isFunction = ref.isFunction, isEmpty = ref.isEmpty;\n    XMLElement = null;\n    XMLCData = null;\n    XMLComment = null;\n    XMLDeclaration = null;\n    XMLDocType = null;\n    XMLRaw = null;\n    XMLText = null;\n    XMLProcessingInstruction = null;\n    module.exports = XMLNode = function() {\n        function XMLNode(parent) {\n            this.parent = parent;\n            if (this.parent) {\n                this.options = this.parent.options;\n                this.stringify = this.parent.stringify;\n            }\n            this.children = [];\n            if (!XMLElement) {\n                XMLElement = __webpack_require__(/*! ./XMLElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLElement.js\");\n                XMLCData = __webpack_require__(/*! ./XMLCData */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLCData.js\");\n                XMLComment = __webpack_require__(/*! ./XMLComment */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLComment.js\");\n                XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n                XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDocType.js\");\n                XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLRaw.js\");\n                XMLText = __webpack_require__(/*! ./XMLText */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLText.js\");\n                XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n            }\n        }\n        XMLNode.prototype.element = function(name, attributes, text) {\n            var childNode, item, j, k, key, lastChild, len, len1, ref1, val;\n            lastChild = null;\n            if (attributes == null) {\n                attributes = {};\n            }\n            attributes = attributes.valueOf();\n            if (!isObject(attributes)) {\n                ref1 = [\n                    attributes,\n                    text\n                ], text = ref1[0], attributes = ref1[1];\n            }\n            if (name != null) {\n                name = name.valueOf();\n            }\n            if (Array.isArray(name)) {\n                for(j = 0, len = name.length; j < len; j++){\n                    item = name[j];\n                    lastChild = this.element(item);\n                }\n            } else if (isFunction(name)) {\n                lastChild = this.element(name.apply());\n            } else if (isObject(name)) {\n                for(key in name){\n                    if (!hasProp.call(name, key)) continue;\n                    val = name[key];\n                    if (isFunction(val)) {\n                        val = val.apply();\n                    }\n                    if (isObject(val) && isEmpty(val)) {\n                        val = null;\n                    }\n                    if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n                        lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n                    } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n                        for(k = 0, len1 = val.length; k < len1; k++){\n                            item = val[k];\n                            childNode = {};\n                            childNode[key] = item;\n                            lastChild = this.element(childNode);\n                        }\n                    } else if (isObject(val)) {\n                        lastChild = this.element(key);\n                        lastChild.element(val);\n                    } else {\n                        lastChild = this.element(key, val);\n                    }\n                }\n            } else {\n                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n                    lastChild = this.text(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n                    lastChild = this.cdata(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n                    lastChild = this.comment(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n                    lastChild = this.raw(text);\n                } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n                    lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n                } else {\n                    lastChild = this.node(name, attributes, text);\n                }\n            }\n            if (lastChild == null) {\n                throw new Error(\"Could not create any elements with: \" + name);\n            }\n            return lastChild;\n        };\n        XMLNode.prototype.insertBefore = function(name, attributes, text) {\n            var child, i, removed;\n            if (this.isRoot) {\n                throw new Error(\"Cannot insert elements at root level\");\n            }\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i);\n            child = this.parent.element(name, attributes, text);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return child;\n        };\n        XMLNode.prototype.insertAfter = function(name, attributes, text) {\n            var child, i, removed;\n            if (this.isRoot) {\n                throw new Error(\"Cannot insert elements at root level\");\n            }\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.element(name, attributes, text);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return child;\n        };\n        XMLNode.prototype.remove = function() {\n            var i, ref1;\n            if (this.isRoot) {\n                throw new Error(\"Cannot remove the root element\");\n            }\n            i = this.parent.children.indexOf(this);\n            [].splice.apply(this.parent.children, [\n                i,\n                i - i + 1\n            ].concat(ref1 = [])), ref1;\n            return this.parent;\n        };\n        XMLNode.prototype.node = function(name, attributes, text) {\n            var child, ref1;\n            if (name != null) {\n                name = name.valueOf();\n            }\n            attributes || (attributes = {});\n            attributes = attributes.valueOf();\n            if (!isObject(attributes)) {\n                ref1 = [\n                    attributes,\n                    text\n                ], text = ref1[0], attributes = ref1[1];\n            }\n            child = new XMLElement(this, name, attributes);\n            if (text != null) {\n                child.text(text);\n            }\n            this.children.push(child);\n            return child;\n        };\n        XMLNode.prototype.text = function(value) {\n            var child;\n            child = new XMLText(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.cdata = function(value) {\n            var child;\n            child = new XMLCData(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.comment = function(value) {\n            var child;\n            child = new XMLComment(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.commentBefore = function(value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i);\n            child = this.parent.comment(value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.commentAfter = function(value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.comment(value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.raw = function(value) {\n            var child;\n            child = new XMLRaw(this, value);\n            this.children.push(child);\n            return this;\n        };\n        XMLNode.prototype.instruction = function(target, value) {\n            var insTarget, insValue, instruction, j, len;\n            if (target != null) {\n                target = target.valueOf();\n            }\n            if (value != null) {\n                value = value.valueOf();\n            }\n            if (Array.isArray(target)) {\n                for(j = 0, len = target.length; j < len; j++){\n                    insTarget = target[j];\n                    this.instruction(insTarget);\n                }\n            } else if (isObject(target)) {\n                for(insTarget in target){\n                    if (!hasProp.call(target, insTarget)) continue;\n                    insValue = target[insTarget];\n                    this.instruction(insTarget, insValue);\n                }\n            } else {\n                if (isFunction(value)) {\n                    value = value.apply();\n                }\n                instruction = new XMLProcessingInstruction(this, target, value);\n                this.children.push(instruction);\n            }\n            return this;\n        };\n        XMLNode.prototype.instructionBefore = function(target, value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i);\n            child = this.parent.instruction(target, value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.instructionAfter = function(target, value) {\n            var child, i, removed;\n            i = this.parent.children.indexOf(this);\n            removed = this.parent.children.splice(i + 1);\n            child = this.parent.instruction(target, value);\n            Array.prototype.push.apply(this.parent.children, removed);\n            return this;\n        };\n        XMLNode.prototype.declaration = function(version, encoding, standalone) {\n            var doc, xmldec;\n            doc = this.document();\n            xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n            if (doc.children[0] instanceof XMLDeclaration) {\n                doc.children[0] = xmldec;\n            } else {\n                doc.children.unshift(xmldec);\n            }\n            return doc.root() || doc;\n        };\n        XMLNode.prototype.doctype = function(pubID, sysID) {\n            var child, doc, doctype, i, j, k, len, len1, ref1, ref2;\n            doc = this.document();\n            doctype = new XMLDocType(doc, pubID, sysID);\n            ref1 = doc.children;\n            for(i = j = 0, len = ref1.length; j < len; i = ++j){\n                child = ref1[i];\n                if (child instanceof XMLDocType) {\n                    doc.children[i] = doctype;\n                    return doctype;\n                }\n            }\n            ref2 = doc.children;\n            for(i = k = 0, len1 = ref2.length; k < len1; i = ++k){\n                child = ref2[i];\n                if (child.isRoot) {\n                    doc.children.splice(i, 0, doctype);\n                    return doctype;\n                }\n            }\n            doc.children.push(doctype);\n            return doctype;\n        };\n        XMLNode.prototype.up = function() {\n            if (this.isRoot) {\n                throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n            }\n            return this.parent;\n        };\n        XMLNode.prototype.root = function() {\n            var node;\n            node = this;\n            while(node){\n                if (node.isDocument) {\n                    return node.rootObject;\n                } else if (node.isRoot) {\n                    return node;\n                } else {\n                    node = node.parent;\n                }\n            }\n        };\n        XMLNode.prototype.document = function() {\n            var node;\n            node = this;\n            while(node){\n                if (node.isDocument) {\n                    return node;\n                } else {\n                    node = node.parent;\n                }\n            }\n        };\n        XMLNode.prototype.end = function(options) {\n            return this.document().end(options);\n        };\n        XMLNode.prototype.prev = function() {\n            var i;\n            i = this.parent.children.indexOf(this);\n            if (i < 1) {\n                throw new Error(\"Already at the first node\");\n            }\n            return this.parent.children[i - 1];\n        };\n        XMLNode.prototype.next = function() {\n            var i;\n            i = this.parent.children.indexOf(this);\n            if (i === -1 || i === this.parent.children.length - 1) {\n                throw new Error(\"Already at the last node\");\n            }\n            return this.parent.children[i + 1];\n        };\n        XMLNode.prototype.importDocument = function(doc) {\n            var clonedRoot;\n            clonedRoot = doc.root().clone();\n            clonedRoot.parent = this;\n            clonedRoot.isRoot = false;\n            this.children.push(clonedRoot);\n            return this;\n        };\n        XMLNode.prototype.ele = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLNode.prototype.nod = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLNode.prototype.txt = function(value) {\n            return this.text(value);\n        };\n        XMLNode.prototype.dat = function(value) {\n            return this.cdata(value);\n        };\n        XMLNode.prototype.com = function(value) {\n            return this.comment(value);\n        };\n        XMLNode.prototype.ins = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLNode.prototype.doc = function() {\n            return this.document();\n        };\n        XMLNode.prototype.dec = function(version, encoding, standalone) {\n            return this.declaration(version, encoding, standalone);\n        };\n        XMLNode.prototype.dtd = function(pubID, sysID) {\n            return this.doctype(pubID, sysID);\n        };\n        XMLNode.prototype.e = function(name, attributes, text) {\n            return this.element(name, attributes, text);\n        };\n        XMLNode.prototype.n = function(name, attributes, text) {\n            return this.node(name, attributes, text);\n        };\n        XMLNode.prototype.t = function(value) {\n            return this.text(value);\n        };\n        XMLNode.prototype.d = function(value) {\n            return this.cdata(value);\n        };\n        XMLNode.prototype.c = function(value) {\n            return this.comment(value);\n        };\n        XMLNode.prototype.r = function(value) {\n            return this.raw(value);\n        };\n        XMLNode.prototype.i = function(target, value) {\n            return this.instruction(target, value);\n        };\n        XMLNode.prototype.u = function() {\n            return this.up();\n        };\n        XMLNode.prototype.importXMLBuilder = function(doc) {\n            return this.importDocument(doc);\n        };\n        return XMLNode;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js":
/*!*****************************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLNode, XMLProcessingInstruction, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLProcessingInstruction = function(superClass) {\n        extend(XMLProcessingInstruction, superClass);\n        function XMLProcessingInstruction(parent, target, value) {\n            XMLProcessingInstruction.__super__.constructor.call(this, parent);\n            if (target == null) {\n                throw new Error(\"Missing instruction target\");\n            }\n            this.target = this.stringify.insTarget(target);\n            if (value) {\n                this.value = this.stringify.insValue(value);\n            }\n        }\n        XMLProcessingInstruction.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLProcessingInstruction.prototype.toString = function(options) {\n            return this.options.writer.set(options).processingInstruction(this);\n        };\n        return XMLProcessingInstruction;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsU0FBU0MsMEJBQ1hDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JaLFVBQVVhLG1CQUFPQSxDQUFDO0lBRWxCQyxPQUFPQyxPQUFPLEdBQUdkLDJCQUEyQixTQUFVZSxVQUFVO1FBQzlEZCxPQUFPRCwwQkFBMEJlO1FBRWpDLFNBQVNmLHlCQUF5QkcsTUFBTSxFQUFFYSxNQUFNLEVBQUVDLEtBQUs7WUFDckRqQix5QkFBeUJVLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUMxRCxJQUFJYSxVQUFVLE1BQU07Z0JBQ2xCLE1BQU0sSUFBSUUsTUFBTTtZQUNsQjtZQUNBLElBQUksQ0FBQ0YsTUFBTSxHQUFHLElBQUksQ0FBQ0csU0FBUyxDQUFDQyxTQUFTLENBQUNKO1lBQ3ZDLElBQUlDLE9BQU87Z0JBQ1QsSUFBSSxDQUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDRSxTQUFTLENBQUNFLFFBQVEsQ0FBQ0o7WUFDdkM7UUFDRjtRQUVBakIseUJBQXlCUyxTQUFTLENBQUNhLEtBQUssR0FBRztZQUN6QyxPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBeEIseUJBQXlCUyxTQUFTLENBQUNnQixRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUM1RCxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0YsU0FBU0cscUJBQXFCLENBQUMsSUFBSTtRQUNwRTtRQUVBLE9BQU83QjtJQUVULEVBQUdEO0FBRUwsR0FBR08sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24uanM/YzhmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTAuMFxuKGZ1bmN0aW9uKCkge1xuICB2YXIgWE1MTm9kZSwgWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLFxuICAgIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgWE1MTm9kZSA9IHJlcXVpcmUoJy4vWE1MTm9kZScpO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBzdXBlckNsYXNzKTtcblxuICAgIGZ1bmN0aW9uIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbihwYXJlbnQsIHRhcmdldCwgdmFsdWUpIHtcbiAgICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgaW5zdHJ1Y3Rpb24gdGFyZ2V0XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLnN0cmluZ2lmeS5pbnNUYXJnZXQodGFyZ2V0KTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5zdHJpbmdpZnkuaW5zVmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIH07XG5cbiAgICBYTUxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy53cml0ZXIuc2V0KG9wdGlvbnMpLnByb2Nlc3NpbmdJbnN0cnVjdGlvbih0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFByb2Nlc3NpbmdJbnN0cnVjdGlvbjtcblxuICB9KShYTUxOb2RlKTtcblxufSkuY2FsbCh0aGlzKTtcbiJdLCJuYW1lcyI6WyJYTUxOb2RlIiwiWE1MUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJrZXkiLCJoYXNQcm9wIiwiY2FsbCIsImN0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9fc3VwZXJfXyIsImhhc093blByb3BlcnR5IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdXBlckNsYXNzIiwidGFyZ2V0IiwidmFsdWUiLCJFcnJvciIsInN0cmluZ2lmeSIsImluc1RhcmdldCIsImluc1ZhbHVlIiwiY2xvbmUiLCJPYmplY3QiLCJjcmVhdGUiLCJ0b1N0cmluZyIsIm9wdGlvbnMiLCJ3cml0ZXIiLCJzZXQiLCJwcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLRaw.js":
/*!***********************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLRaw.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLNode, XMLRaw, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLRaw = function(superClass) {\n        extend(XMLRaw, superClass);\n        function XMLRaw(parent, text) {\n            XMLRaw.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing raw text\");\n            }\n            this.value = this.stringify.raw(text);\n        }\n        XMLRaw.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLRaw.prototype.toString = function(options) {\n            return this.options.writer.set(options).raw(this);\n        };\n        return XMLRaw;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFJhdy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsbUNBQW1DO0FBQ2xDO0lBQ0MsSUFBSUEsU0FBU0MsUUFDWEMsU0FBUyxTQUFTQyxLQUFLLEVBQUVDLE1BQU07UUFBSSxJQUFLLElBQUlDLE9BQU9ELE9BQVE7WUFBRSxJQUFJRSxRQUFRQyxJQUFJLENBQUNILFFBQVFDLE1BQU1GLEtBQUssQ0FBQ0UsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQUk7UUFBRTtRQUFFLFNBQVNHO1lBQVMsSUFBSSxDQUFDQyxXQUFXLEdBQUdOO1FBQU87UUFBRUssS0FBS0UsU0FBUyxHQUFHTixPQUFPTSxTQUFTO1FBQUVQLE1BQU1PLFNBQVMsR0FBRyxJQUFJRjtRQUFRTCxNQUFNUSxTQUFTLEdBQUdQLE9BQU9NLFNBQVM7UUFBRSxPQUFPUDtJQUFPLEdBQ3pSRyxVQUFVLENBQUMsRUFBRU0sY0FBYztJQUU3QlosVUFBVWEsbUJBQU9BLENBQUM7SUFFbEJDLE9BQU9DLE9BQU8sR0FBR2QsU0FBUyxTQUFVZSxVQUFVO1FBQzVDZCxPQUFPRCxRQUFRZTtRQUVmLFNBQVNmLE9BQU9HLE1BQU0sRUFBRWEsSUFBSTtZQUMxQmhCLE9BQU9VLFNBQVMsQ0FBQ0YsV0FBVyxDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFSDtZQUN4QyxJQUFJYSxRQUFRLE1BQU07Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUNBLElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxHQUFHLENBQUNKO1FBQ2xDO1FBRUFoQixPQUFPUyxTQUFTLENBQUNZLEtBQUssR0FBRztZQUN2QixPQUFPQyxPQUFPQyxNQUFNLENBQUMsSUFBSTtRQUMzQjtRQUVBdkIsT0FBT1MsU0FBUyxDQUFDZSxRQUFRLEdBQUcsU0FBU0MsT0FBTztZQUMxQyxPQUFPLElBQUksQ0FBQ0EsT0FBTyxDQUFDQyxNQUFNLENBQUNDLEdBQUcsQ0FBQ0YsU0FBU0wsR0FBRyxDQUFDLElBQUk7UUFDbEQ7UUFFQSxPQUFPcEI7SUFFVCxFQUFHRDtBQUVMLEdBQUdPLElBQUksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1sYnVpbGRlci9saWIvWE1MUmF3LmpzP2QzMjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTE5vZGUsIFhNTFJhdyxcbiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIFhNTE5vZGUgPSByZXF1aXJlKCcuL1hNTE5vZGUnKTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IFhNTFJhdyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gICAgZXh0ZW5kKFhNTFJhdywgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxSYXcocGFyZW50LCB0ZXh0KSB7XG4gICAgICBYTUxSYXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyZW50KTtcbiAgICAgIGlmICh0ZXh0ID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyByYXcgdGV4dFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5yYXcodGV4dCk7XG4gICAgfVxuXG4gICAgWE1MUmF3LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgfTtcblxuICAgIFhNTFJhdy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykucmF3KHRoaXMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gWE1MUmF3O1xuXG4gIH0pKFhNTE5vZGUpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTE5vZGUiLCJYTUxSYXciLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ0ZXh0IiwiRXJyb3IiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsInJhdyIsImNsb25lIiwiT2JqZWN0IiwiY3JlYXRlIiwidG9TdHJpbmciLCJvcHRpb25zIiwid3JpdGVyIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLRaw.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLStreamWriter.js":
/*!********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLStreamWriter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStreamWriter, XMLText, XMLWriterBase, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    module.exports = XMLStreamWriter = function(superClass) {\n        extend(XMLStreamWriter, superClass);\n        function XMLStreamWriter(stream, options) {\n            this.stream = stream;\n            XMLStreamWriter.__super__.constructor.call(this, options);\n        }\n        XMLStreamWriter.prototype.document = function(doc) {\n            var child, i, j, len, len1, ref, ref1, results;\n            ref = doc.children;\n            for(i = 0, len = ref.length; i < len; i++){\n                child = ref[i];\n                child.isLastRootNode = false;\n            }\n            doc.children[doc.children.length - 1].isLastRootNode = true;\n            ref1 = doc.children;\n            results = [];\n            for(j = 0, len1 = ref1.length; j < len1; j++){\n                child = ref1[j];\n                switch(false){\n                    case !(child instanceof XMLDeclaration):\n                        results.push(this.declaration(child));\n                        break;\n                    case !(child instanceof XMLDocType):\n                        results.push(this.docType(child));\n                        break;\n                    case !(child instanceof XMLComment):\n                        results.push(this.comment(child));\n                        break;\n                    case !(child instanceof XMLProcessingInstruction):\n                        results.push(this.processingInstruction(child));\n                        break;\n                    default:\n                        results.push(this.element(child));\n                }\n            }\n            return results;\n        };\n        XMLStreamWriter.prototype.attribute = function(att) {\n            return this.stream.write(\" \" + att.name + '=\"' + att.value + '\"');\n        };\n        XMLStreamWriter.prototype.cdata = function(node, level) {\n            return this.stream.write(this.space(level) + \"<![CDATA[\" + node.text + \"]]>\" + this.endline(node));\n        };\n        XMLStreamWriter.prototype.comment = function(node, level) {\n            return this.stream.write(this.space(level) + \"<!-- \" + node.text + \" -->\" + this.endline(node));\n        };\n        XMLStreamWriter.prototype.declaration = function(node, level) {\n            this.stream.write(this.space(level));\n            this.stream.write('<?xml version=\"' + node.version + '\"');\n            if (node.encoding != null) {\n                this.stream.write(' encoding=\"' + node.encoding + '\"');\n            }\n            if (node.standalone != null) {\n                this.stream.write(' standalone=\"' + node.standalone + '\"');\n            }\n            this.stream.write(\"?>\");\n            return this.stream.write(this.endline(node));\n        };\n        XMLStreamWriter.prototype.docType = function(node, level) {\n            var child, i, len, ref;\n            level || (level = 0);\n            this.stream.write(this.space(level));\n            this.stream.write(\"<!DOCTYPE \" + node.root().name);\n            if (node.pubID && node.sysID) {\n                this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n            } else if (node.sysID) {\n                this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n            }\n            if (node.children.length > 0) {\n                this.stream.write(\" [\");\n                this.stream.write(this.endline(node));\n                ref = node.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    switch(false){\n                        case !(child instanceof XMLDTDAttList):\n                            this.dtdAttList(child, level + 1);\n                            break;\n                        case !(child instanceof XMLDTDElement):\n                            this.dtdElement(child, level + 1);\n                            break;\n                        case !(child instanceof XMLDTDEntity):\n                            this.dtdEntity(child, level + 1);\n                            break;\n                        case !(child instanceof XMLDTDNotation):\n                            this.dtdNotation(child, level + 1);\n                            break;\n                        case !(child instanceof XMLCData):\n                            this.cdata(child, level + 1);\n                            break;\n                        case !(child instanceof XMLComment):\n                            this.comment(child, level + 1);\n                            break;\n                        case !(child instanceof XMLProcessingInstruction):\n                            this.processingInstruction(child, level + 1);\n                            break;\n                        default:\n                            throw new Error(\"Unknown DTD node type: \" + child.constructor.name);\n                    }\n                }\n                this.stream.write(\"]\");\n            }\n            this.stream.write(\">\");\n            return this.stream.write(this.endline(node));\n        };\n        XMLStreamWriter.prototype.element = function(node, level) {\n            var att, child, i, len, name, ref, ref1, space;\n            level || (level = 0);\n            space = this.space(level);\n            this.stream.write(space + \"<\" + node.name);\n            ref = node.attributes;\n            for(name in ref){\n                if (!hasProp.call(ref, name)) continue;\n                att = ref[name];\n                this.attribute(att);\n            }\n            if (node.children.length === 0 || node.children.every(function(e) {\n                return e.value === \"\";\n            })) {\n                if (this.allowEmpty) {\n                    this.stream.write(\"></\" + node.name + \">\");\n                } else {\n                    this.stream.write(\"/>\");\n                }\n            } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {\n                this.stream.write(\">\");\n                this.stream.write(node.children[0].value);\n                this.stream.write(\"</\" + node.name + \">\");\n            } else {\n                this.stream.write(\">\" + this.newline);\n                ref1 = node.children;\n                for(i = 0, len = ref1.length; i < len; i++){\n                    child = ref1[i];\n                    switch(false){\n                        case !(child instanceof XMLCData):\n                            this.cdata(child, level + 1);\n                            break;\n                        case !(child instanceof XMLComment):\n                            this.comment(child, level + 1);\n                            break;\n                        case !(child instanceof XMLElement):\n                            this.element(child, level + 1);\n                            break;\n                        case !(child instanceof XMLRaw):\n                            this.raw(child, level + 1);\n                            break;\n                        case !(child instanceof XMLText):\n                            this.text(child, level + 1);\n                            break;\n                        case !(child instanceof XMLProcessingInstruction):\n                            this.processingInstruction(child, level + 1);\n                            break;\n                        default:\n                            throw new Error(\"Unknown XML node type: \" + child.constructor.name);\n                    }\n                }\n                this.stream.write(space + \"</\" + node.name + \">\");\n            }\n            return this.stream.write(this.endline(node));\n        };\n        XMLStreamWriter.prototype.processingInstruction = function(node, level) {\n            this.stream.write(this.space(level) + \"<?\" + node.target);\n            if (node.value) {\n                this.stream.write(\" \" + node.value);\n            }\n            return this.stream.write(\"?>\" + this.endline(node));\n        };\n        XMLStreamWriter.prototype.raw = function(node, level) {\n            return this.stream.write(this.space(level) + node.value + this.endline(node));\n        };\n        XMLStreamWriter.prototype.text = function(node, level) {\n            return this.stream.write(this.space(level) + node.value + this.endline(node));\n        };\n        XMLStreamWriter.prototype.dtdAttList = function(node, level) {\n            this.stream.write(this.space(level) + \"<!ATTLIST \" + node.elementName + \" \" + node.attributeName + \" \" + node.attributeType);\n            if (node.defaultValueType !== \"#DEFAULT\") {\n                this.stream.write(\" \" + node.defaultValueType);\n            }\n            if (node.defaultValue) {\n                this.stream.write(' \"' + node.defaultValue + '\"');\n            }\n            return this.stream.write(\">\" + this.endline(node));\n        };\n        XMLStreamWriter.prototype.dtdElement = function(node, level) {\n            return this.stream.write(this.space(level) + \"<!ELEMENT \" + node.name + \" \" + node.value + \">\" + this.endline(node));\n        };\n        XMLStreamWriter.prototype.dtdEntity = function(node, level) {\n            this.stream.write(this.space(level) + \"<!ENTITY\");\n            if (node.pe) {\n                this.stream.write(\" %\");\n            }\n            this.stream.write(\" \" + node.name);\n            if (node.value) {\n                this.stream.write(' \"' + node.value + '\"');\n            } else {\n                if (node.pubID && node.sysID) {\n                    this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n                } else if (node.sysID) {\n                    this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n                }\n                if (node.nData) {\n                    this.stream.write(\" NDATA \" + node.nData);\n                }\n            }\n            return this.stream.write(\">\" + this.endline(node));\n        };\n        XMLStreamWriter.prototype.dtdNotation = function(node, level) {\n            this.stream.write(this.space(level) + \"<!NOTATION \" + node.name);\n            if (node.pubID && node.sysID) {\n                this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n            } else if (node.pubID) {\n                this.stream.write(' PUBLIC \"' + node.pubID + '\"');\n            } else if (node.sysID) {\n                this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n            }\n            return this.stream.write(\">\" + this.endline(node));\n        };\n        XMLStreamWriter.prototype.endline = function(node) {\n            if (!node.isLastRootNode) {\n                return this.newline;\n            } else {\n                return \"\";\n            }\n        };\n        return XMLStreamWriter;\n    }(XMLWriterBase);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLStreamWriter.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLStringWriter.js":
/*!********************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLStringWriter.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLText, XMLWriterBase, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLDeclaration = __webpack_require__(/*! ./XMLDeclaration */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDeclaration.js\");\n    XMLDocType = __webpack_require__(/*! ./XMLDocType */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDocType.js\");\n    XMLCData = __webpack_require__(/*! ./XMLCData */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLCData.js\");\n    XMLComment = __webpack_require__(/*! ./XMLComment */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLComment.js\");\n    XMLElement = __webpack_require__(/*! ./XMLElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLElement.js\");\n    XMLRaw = __webpack_require__(/*! ./XMLRaw */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLRaw.js\");\n    XMLText = __webpack_require__(/*! ./XMLText */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLText.js\");\n    XMLProcessingInstruction = __webpack_require__(/*! ./XMLProcessingInstruction */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLProcessingInstruction.js\");\n    XMLDTDAttList = __webpack_require__(/*! ./XMLDTDAttList */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDAttList.js\");\n    XMLDTDElement = __webpack_require__(/*! ./XMLDTDElement */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDElement.js\");\n    XMLDTDEntity = __webpack_require__(/*! ./XMLDTDEntity */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDEntity.js\");\n    XMLDTDNotation = __webpack_require__(/*! ./XMLDTDNotation */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDTDNotation.js\");\n    XMLWriterBase = __webpack_require__(/*! ./XMLWriterBase */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLWriterBase.js\");\n    module.exports = XMLStringWriter = function(superClass) {\n        extend(XMLStringWriter, superClass);\n        function XMLStringWriter(options) {\n            XMLStringWriter.__super__.constructor.call(this, options);\n        }\n        XMLStringWriter.prototype.document = function(doc) {\n            var child, i, len, r, ref;\n            r = \"\";\n            ref = doc.children;\n            for(i = 0, len = ref.length; i < len; i++){\n                child = ref[i];\n                r += (function() {\n                    switch(false){\n                        case !(child instanceof XMLDeclaration):\n                            return this.declaration(child);\n                        case !(child instanceof XMLDocType):\n                            return this.docType(child);\n                        case !(child instanceof XMLComment):\n                            return this.comment(child);\n                        case !(child instanceof XMLProcessingInstruction):\n                            return this.processingInstruction(child);\n                        default:\n                            return this.element(child, 0);\n                    }\n                }).call(this);\n            }\n            if (this.pretty && r.slice(-this.newline.length) === this.newline) {\n                r = r.slice(0, -this.newline.length);\n            }\n            return r;\n        };\n        XMLStringWriter.prototype.attribute = function(att) {\n            return \" \" + att.name + '=\"' + att.value + '\"';\n        };\n        XMLStringWriter.prototype.cdata = function(node, level) {\n            return this.space(level) + \"<![CDATA[\" + node.text + \"]]>\" + this.newline;\n        };\n        XMLStringWriter.prototype.comment = function(node, level) {\n            return this.space(level) + \"<!-- \" + node.text + \" -->\" + this.newline;\n        };\n        XMLStringWriter.prototype.declaration = function(node, level) {\n            var r;\n            r = this.space(level);\n            r += '<?xml version=\"' + node.version + '\"';\n            if (node.encoding != null) {\n                r += ' encoding=\"' + node.encoding + '\"';\n            }\n            if (node.standalone != null) {\n                r += ' standalone=\"' + node.standalone + '\"';\n            }\n            r += \"?>\";\n            r += this.newline;\n            return r;\n        };\n        XMLStringWriter.prototype.docType = function(node, level) {\n            var child, i, len, r, ref;\n            level || (level = 0);\n            r = this.space(level);\n            r += \"<!DOCTYPE \" + node.root().name;\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            if (node.children.length > 0) {\n                r += \" [\";\n                r += this.newline;\n                ref = node.children;\n                for(i = 0, len = ref.length; i < len; i++){\n                    child = ref[i];\n                    r += (function() {\n                        switch(false){\n                            case !(child instanceof XMLDTDAttList):\n                                return this.dtdAttList(child, level + 1);\n                            case !(child instanceof XMLDTDElement):\n                                return this.dtdElement(child, level + 1);\n                            case !(child instanceof XMLDTDEntity):\n                                return this.dtdEntity(child, level + 1);\n                            case !(child instanceof XMLDTDNotation):\n                                return this.dtdNotation(child, level + 1);\n                            case !(child instanceof XMLCData):\n                                return this.cdata(child, level + 1);\n                            case !(child instanceof XMLComment):\n                                return this.comment(child, level + 1);\n                            case !(child instanceof XMLProcessingInstruction):\n                                return this.processingInstruction(child, level + 1);\n                            default:\n                                throw new Error(\"Unknown DTD node type: \" + child.constructor.name);\n                        }\n                    }).call(this);\n                }\n                r += \"]\";\n            }\n            r += \">\";\n            r += this.newline;\n            return r;\n        };\n        XMLStringWriter.prototype.element = function(node, level) {\n            var att, child, i, len, name, r, ref, ref1, space;\n            level || (level = 0);\n            space = this.space(level);\n            r = \"\";\n            r += space + \"<\" + node.name;\n            ref = node.attributes;\n            for(name in ref){\n                if (!hasProp.call(ref, name)) continue;\n                att = ref[name];\n                r += this.attribute(att);\n            }\n            if (node.children.length === 0 || node.children.every(function(e) {\n                return e.value === \"\";\n            })) {\n                if (this.allowEmpty) {\n                    r += \"></\" + node.name + \">\" + this.newline;\n                } else {\n                    r += \"/>\" + this.newline;\n                }\n            } else if (this.pretty && node.children.length === 1 && node.children[0].value != null) {\n                r += \">\";\n                r += node.children[0].value;\n                r += \"</\" + node.name + \">\" + this.newline;\n            } else {\n                r += \">\" + this.newline;\n                ref1 = node.children;\n                for(i = 0, len = ref1.length; i < len; i++){\n                    child = ref1[i];\n                    r += (function() {\n                        switch(false){\n                            case !(child instanceof XMLCData):\n                                return this.cdata(child, level + 1);\n                            case !(child instanceof XMLComment):\n                                return this.comment(child, level + 1);\n                            case !(child instanceof XMLElement):\n                                return this.element(child, level + 1);\n                            case !(child instanceof XMLRaw):\n                                return this.raw(child, level + 1);\n                            case !(child instanceof XMLText):\n                                return this.text(child, level + 1);\n                            case !(child instanceof XMLProcessingInstruction):\n                                return this.processingInstruction(child, level + 1);\n                            default:\n                                throw new Error(\"Unknown XML node type: \" + child.constructor.name);\n                        }\n                    }).call(this);\n                }\n                r += space + \"</\" + node.name + \">\" + this.newline;\n            }\n            return r;\n        };\n        XMLStringWriter.prototype.processingInstruction = function(node, level) {\n            var r;\n            r = this.space(level) + \"<?\" + node.target;\n            if (node.value) {\n                r += \" \" + node.value;\n            }\n            r += \"?>\" + this.newline;\n            return r;\n        };\n        XMLStringWriter.prototype.raw = function(node, level) {\n            return this.space(level) + node.value + this.newline;\n        };\n        XMLStringWriter.prototype.text = function(node, level) {\n            return this.space(level) + node.value + this.newline;\n        };\n        XMLStringWriter.prototype.dtdAttList = function(node, level) {\n            var r;\n            r = this.space(level) + \"<!ATTLIST \" + node.elementName + \" \" + node.attributeName + \" \" + node.attributeType;\n            if (node.defaultValueType !== \"#DEFAULT\") {\n                r += \" \" + node.defaultValueType;\n            }\n            if (node.defaultValue) {\n                r += ' \"' + node.defaultValue + '\"';\n            }\n            r += \">\" + this.newline;\n            return r;\n        };\n        XMLStringWriter.prototype.dtdElement = function(node, level) {\n            return this.space(level) + \"<!ELEMENT \" + node.name + \" \" + node.value + \">\" + this.newline;\n        };\n        XMLStringWriter.prototype.dtdEntity = function(node, level) {\n            var r;\n            r = this.space(level) + \"<!ENTITY\";\n            if (node.pe) {\n                r += \" %\";\n            }\n            r += \" \" + node.name;\n            if (node.value) {\n                r += ' \"' + node.value + '\"';\n            } else {\n                if (node.pubID && node.sysID) {\n                    r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                } else if (node.sysID) {\n                    r += ' SYSTEM \"' + node.sysID + '\"';\n                }\n                if (node.nData) {\n                    r += \" NDATA \" + node.nData;\n                }\n            }\n            r += \">\" + this.newline;\n            return r;\n        };\n        XMLStringWriter.prototype.dtdNotation = function(node, level) {\n            var r;\n            r = this.space(level) + \"<!NOTATION \" + node.name;\n            if (node.pubID && node.sysID) {\n                r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n            } else if (node.pubID) {\n                r += ' PUBLIC \"' + node.pubID + '\"';\n            } else if (node.sysID) {\n                r += ' SYSTEM \"' + node.sysID + '\"';\n            }\n            r += \">\" + this.newline;\n            return r;\n        };\n        XMLStringWriter.prototype.openNode = function(node, level) {\n            var att, name, r, ref;\n            level || (level = 0);\n            if (node instanceof XMLElement) {\n                r = this.space(level) + \"<\" + node.name;\n                ref = node.attributes;\n                for(name in ref){\n                    if (!hasProp.call(ref, name)) continue;\n                    att = ref[name];\n                    r += this.attribute(att);\n                }\n                r += (node.children ? \">\" : \"/>\") + this.newline;\n                return r;\n            } else {\n                r = this.space(level) + \"<!DOCTYPE \" + node.rootNodeName;\n                if (node.pubID && node.sysID) {\n                    r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n                } else if (node.sysID) {\n                    r += ' SYSTEM \"' + node.sysID + '\"';\n                }\n                r += (node.children ? \" [\" : \">\") + this.newline;\n                return r;\n            }\n        };\n        XMLStringWriter.prototype.closeNode = function(node, level) {\n            level || (level = 0);\n            switch(false){\n                case !(node instanceof XMLElement):\n                    return this.space(level) + \"</\" + node.name + \">\" + this.newline;\n                case !(node instanceof XMLDocType):\n                    return this.space(level) + \"]>\" + this.newline;\n            }\n        };\n        return XMLStringWriter;\n    }(XMLWriterBase);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLStringifier.js":
/*!*******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLStringifier.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLStringifier, camelCase, kebabCase, ref, snakeCase, titleCase, bind = function(fn, me) {\n        return function() {\n            return fn.apply(me, arguments);\n        };\n    }, hasProp = {}.hasOwnProperty;\n    ref = __webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\"), camelCase = ref.camelCase, titleCase = ref.titleCase, kebabCase = ref.kebabCase, snakeCase = ref.snakeCase;\n    module.exports = XMLStringifier = function() {\n        function XMLStringifier(options) {\n            this.assertLegalChar = bind(this.assertLegalChar, this);\n            var key, ref1, value;\n            options || (options = {});\n            this.allowSurrogateChars = options.allowSurrogateChars;\n            this.noDoubleEncoding = options.noDoubleEncoding;\n            this.textCase = options.textCase;\n            ref1 = options.stringify || {};\n            for(key in ref1){\n                if (!hasProp.call(ref1, key)) continue;\n                value = ref1[key];\n                this[key] = value;\n            }\n        }\n        XMLStringifier.prototype.eleName = function(val) {\n            val = \"\" + val || \"\";\n            val = this.applyCase(val);\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.eleText = function(val) {\n            val = \"\" + val || \"\";\n            return this.assertLegalChar(this.elEscape(val));\n        };\n        XMLStringifier.prototype.cdata = function(val) {\n            val = \"\" + val || \"\";\n            val = val.replace(\"]]>\", \"]]]]><![CDATA[>\");\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.comment = function(val) {\n            val = \"\" + val || \"\";\n            if (val.match(/--/)) {\n                throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n            }\n            return this.assertLegalChar(val);\n        };\n        XMLStringifier.prototype.raw = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.attName = function(val) {\n            val = \"\" + val || \"\";\n            return val = this.applyCase(val);\n        };\n        XMLStringifier.prototype.attValue = function(val) {\n            val = \"\" + val || \"\";\n            return this.attEscape(val);\n        };\n        XMLStringifier.prototype.insTarget = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.insValue = function(val) {\n            val = \"\" + val || \"\";\n            if (val.match(/\\?>/)) {\n                throw new Error(\"Invalid processing instruction value: \" + val);\n            }\n            return val;\n        };\n        XMLStringifier.prototype.xmlVersion = function(val) {\n            val = \"\" + val || \"\";\n            if (!val.match(/1\\.[0-9]+/)) {\n                throw new Error(\"Invalid version number: \" + val);\n            }\n            return val;\n        };\n        XMLStringifier.prototype.xmlEncoding = function(val) {\n            val = \"\" + val || \"\";\n            if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {\n                throw new Error(\"Invalid encoding: \" + val);\n            }\n            return val;\n        };\n        XMLStringifier.prototype.xmlStandalone = function(val) {\n            if (val) {\n                return \"yes\";\n            } else {\n                return \"no\";\n            }\n        };\n        XMLStringifier.prototype.dtdPubID = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.dtdSysID = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.dtdElementValue = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.dtdAttType = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.dtdAttDefault = function(val) {\n            if (val != null) {\n                return \"\" + val || \"\";\n            } else {\n                return val;\n            }\n        };\n        XMLStringifier.prototype.dtdEntityValue = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.dtdNData = function(val) {\n            return \"\" + val || \"\";\n        };\n        XMLStringifier.prototype.convertAttKey = \"@\";\n        XMLStringifier.prototype.convertPIKey = \"?\";\n        XMLStringifier.prototype.convertTextKey = \"#text\";\n        XMLStringifier.prototype.convertCDataKey = \"#cdata\";\n        XMLStringifier.prototype.convertCommentKey = \"#comment\";\n        XMLStringifier.prototype.convertRawKey = \"#raw\";\n        XMLStringifier.prototype.assertLegalChar = function(str) {\n            var chars, chr;\n            if (this.allowSurrogateChars) {\n                chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\n            } else {\n                chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n            }\n            chr = str.match(chars);\n            if (chr) {\n                throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);\n            }\n            return str;\n        };\n        XMLStringifier.prototype.applyCase = function(str) {\n            switch(this.textCase){\n                case \"camel\":\n                    return camelCase(str);\n                case \"title\":\n                    return titleCase(str);\n                case \"kebab\":\n                case \"lower\":\n                    return kebabCase(str);\n                case \"snake\":\n                    return snakeCase(str);\n                case \"upper\":\n                    return kebabCase(str).toUpperCase();\n                default:\n                    return str;\n            }\n        };\n        XMLStringifier.prototype.elEscape = function(str) {\n            var ampregex;\n            ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n            return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\r/g, \"&#xD;\");\n        };\n        XMLStringifier.prototype.attEscape = function(str) {\n            var ampregex;\n            ampregex = this.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n            return str.replace(ampregex, \"&amp;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n        };\n        return XMLStringifier;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLStringifier.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLText.js":
/*!************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLText.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLNode, XMLText, extend = function(child, parent) {\n        for(var key in parent){\n            if (hasProp.call(parent, key)) child[key] = parent[key];\n        }\n        function ctor() {\n            this.constructor = child;\n        }\n        ctor.prototype = parent.prototype;\n        child.prototype = new ctor();\n        child.__super__ = parent.prototype;\n        return child;\n    }, hasProp = {}.hasOwnProperty;\n    XMLNode = __webpack_require__(/*! ./XMLNode */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLNode.js\");\n    module.exports = XMLText = function(superClass) {\n        extend(XMLText, superClass);\n        function XMLText(parent, text) {\n            XMLText.__super__.constructor.call(this, parent);\n            if (text == null) {\n                throw new Error(\"Missing element text\");\n            }\n            this.value = this.stringify.eleText(text);\n        }\n        XMLText.prototype.clone = function() {\n            return Object.create(this);\n        };\n        XMLText.prototype.toString = function(options) {\n            return this.options.writer.set(options).text(this);\n        };\n        return XMLText;\n    }(XMLNode);\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFRleHQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLFNBQVNDLFNBQ1hDLFNBQVMsU0FBU0MsS0FBSyxFQUFFQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxPQUFPRCxPQUFRO1lBQUUsSUFBSUUsUUFBUUMsSUFBSSxDQUFDSCxRQUFRQyxNQUFNRixLQUFLLENBQUNFLElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFJO1FBQUU7UUFBRSxTQUFTRztZQUFTLElBQUksQ0FBQ0MsV0FBVyxHQUFHTjtRQUFPO1FBQUVLLEtBQUtFLFNBQVMsR0FBR04sT0FBT00sU0FBUztRQUFFUCxNQUFNTyxTQUFTLEdBQUcsSUFBSUY7UUFBUUwsTUFBTVEsU0FBUyxHQUFHUCxPQUFPTSxTQUFTO1FBQUUsT0FBT1A7SUFBTyxHQUN6UkcsVUFBVSxDQUFDLEVBQUVNLGNBQWM7SUFFN0JaLFVBQVVhLG1CQUFPQSxDQUFDO0lBRWxCQyxPQUFPQyxPQUFPLEdBQUdkLFVBQVUsU0FBVWUsVUFBVTtRQUM3Q2QsT0FBT0QsU0FBU2U7UUFFaEIsU0FBU2YsUUFBUUcsTUFBTSxFQUFFYSxJQUFJO1lBQzNCaEIsUUFBUVUsU0FBUyxDQUFDRixXQUFXLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVIO1lBQ3pDLElBQUlhLFFBQVEsTUFBTTtnQkFDaEIsTUFBTSxJQUFJQyxNQUFNO1lBQ2xCO1lBQ0EsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNDLE9BQU8sQ0FBQ0o7UUFDdEM7UUFFQWhCLFFBQVFTLFNBQVMsQ0FBQ1ksS0FBSyxHQUFHO1lBQ3hCLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJO1FBQzNCO1FBRUF2QixRQUFRUyxTQUFTLENBQUNlLFFBQVEsR0FBRyxTQUFTQyxPQUFPO1lBQzNDLE9BQU8sSUFBSSxDQUFDQSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDRixTQUFTVCxJQUFJLENBQUMsSUFBSTtRQUNuRDtRQUVBLE9BQU9oQjtJQUVULEVBQUdEO0FBRUwsR0FBR08sSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxUZXh0LmpzP2FkNzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTE5vZGUsIFhNTFRleHQsXG4gICAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICAgIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuICBYTUxOb2RlID0gcmVxdWlyZSgnLi9YTUxOb2RlJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBYTUxUZXh0ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgICBleHRlbmQoWE1MVGV4dCwgc3VwZXJDbGFzcyk7XG5cbiAgICBmdW5jdGlvbiBYTUxUZXh0KHBhcmVudCwgdGV4dCkge1xuICAgICAgWE1MVGV4dC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBwYXJlbnQpO1xuICAgICAgaWYgKHRleHQgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGVsZW1lbnQgdGV4dFwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0cmluZ2lmeS5lbGVUZXh0KHRleHQpO1xuICAgIH1cblxuICAgIFhNTFRleHQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICB9O1xuXG4gICAgWE1MVGV4dC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLndyaXRlci5zZXQob3B0aW9ucykudGV4dCh0aGlzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFhNTFRleHQ7XG5cbiAgfSkoWE1MTm9kZSk7XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MTm9kZSIsIlhNTFRleHQiLCJleHRlbmQiLCJjaGlsZCIsInBhcmVudCIsImtleSIsImhhc1Byb3AiLCJjYWxsIiwiY3RvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX19zdXBlcl9fIiwiaGFzT3duUHJvcGVydHkiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN1cGVyQ2xhc3MiLCJ0ZXh0IiwiRXJyb3IiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsImVsZVRleHQiLCJjbG9uZSIsIk9iamVjdCIsImNyZWF0ZSIsInRvU3RyaW5nIiwib3B0aW9ucyIsIndyaXRlciIsInNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLText.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/XMLWriterBase.js":
/*!******************************************************!*\
  !*** ./node_modules/xmlbuilder/lib/XMLWriterBase.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLWriterBase, hasProp = {}.hasOwnProperty;\n    module.exports = XMLWriterBase = function() {\n        function XMLWriterBase(options) {\n            var key, ref, ref1, ref2, ref3, ref4, value;\n            options || (options = {});\n            this.pretty = options.pretty || false;\n            this.allowEmpty = (ref = options.allowEmpty) != null ? ref : false;\n            if (this.pretty) {\n                this.indent = (ref1 = options.indent) != null ? ref1 : \"  \";\n                this.newline = (ref2 = options.newline) != null ? ref2 : \"\\n\";\n                this.offset = (ref3 = options.offset) != null ? ref3 : 0;\n            } else {\n                this.indent = \"\";\n                this.newline = \"\";\n                this.offset = 0;\n            }\n            ref4 = options.writer || {};\n            for(key in ref4){\n                if (!hasProp.call(ref4, key)) continue;\n                value = ref4[key];\n                this[key] = value;\n            }\n        }\n        XMLWriterBase.prototype.set = function(options) {\n            var key, ref, value;\n            options || (options = {});\n            if (\"pretty\" in options) {\n                this.pretty = options.pretty;\n            }\n            if (\"allowEmpty\" in options) {\n                this.allowEmpty = options.allowEmpty;\n            }\n            if (this.pretty) {\n                this.indent = \"indent\" in options ? options.indent : \"  \";\n                this.newline = \"newline\" in options ? options.newline : \"\\n\";\n                this.offset = \"offset\" in options ? options.offset : 0;\n            } else {\n                this.indent = \"\";\n                this.newline = \"\";\n                this.offset = 0;\n            }\n            ref = options.writer || {};\n            for(key in ref){\n                if (!hasProp.call(ref, key)) continue;\n                value = ref[key];\n                this[key] = value;\n            }\n            return this;\n        };\n        XMLWriterBase.prototype.space = function(level) {\n            if (this.pretty) {\n                return new Array((level || 0) + this.offset + 1).join(this.indent);\n            } else {\n                return \"\";\n            }\n        };\n        return XMLWriterBase;\n    }();\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL1hNTFdyaXRlckJhc2UuanMiLCJtYXBwaW5ncyI6IjtBQUFBLG1DQUFtQztBQUNsQztJQUNDLElBQUlBLGVBQ0ZDLFVBQVUsQ0FBQyxFQUFFQyxjQUFjO0lBRTdCQyxPQUFPQyxPQUFPLEdBQUdKLGdCQUFnQjtRQUMvQixTQUFTQSxjQUFjSyxPQUFPO1lBQzVCLElBQUlDLEtBQUtDLEtBQUtDLE1BQU1DLE1BQU1DLE1BQU1DLE1BQU1DO1lBQ3RDUCxXQUFZQSxDQUFBQSxVQUFVLENBQUM7WUFDdkIsSUFBSSxDQUFDUSxNQUFNLEdBQUdSLFFBQVFRLE1BQU0sSUFBSTtZQUNoQyxJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDUCxNQUFNRixRQUFRUyxVQUFVLEtBQUssT0FBT1AsTUFBTTtZQUM3RCxJQUFJLElBQUksQ0FBQ00sTUFBTSxFQUFFO2dCQUNmLElBQUksQ0FBQ0UsTUFBTSxHQUFHLENBQUNQLE9BQU9ILFFBQVFVLE1BQU0sS0FBSyxPQUFPUCxPQUFPO2dCQUN2RCxJQUFJLENBQUNRLE9BQU8sR0FBRyxDQUFDUCxPQUFPSixRQUFRVyxPQUFPLEtBQUssT0FBT1AsT0FBTztnQkFDekQsSUFBSSxDQUFDUSxNQUFNLEdBQUcsQ0FBQ1AsT0FBT0wsUUFBUVksTUFBTSxLQUFLLE9BQU9QLE9BQU87WUFDekQsT0FBTztnQkFDTCxJQUFJLENBQUNLLE1BQU0sR0FBRztnQkFDZCxJQUFJLENBQUNDLE9BQU8sR0FBRztnQkFDZixJQUFJLENBQUNDLE1BQU0sR0FBRztZQUNoQjtZQUNBTixPQUFPTixRQUFRYSxNQUFNLElBQUksQ0FBQztZQUMxQixJQUFLWixPQUFPSyxLQUFNO2dCQUNoQixJQUFJLENBQUNWLFFBQVFrQixJQUFJLENBQUNSLE1BQU1MLE1BQU07Z0JBQzlCTSxRQUFRRCxJQUFJLENBQUNMLElBQUk7Z0JBQ2pCLElBQUksQ0FBQ0EsSUFBSSxHQUFHTTtZQUNkO1FBQ0Y7UUFFQVosY0FBY29CLFNBQVMsQ0FBQ0MsR0FBRyxHQUFHLFNBQVNoQixPQUFPO1lBQzVDLElBQUlDLEtBQUtDLEtBQUtLO1lBQ2RQLFdBQVlBLENBQUFBLFVBQVUsQ0FBQztZQUN2QixJQUFJLFlBQVlBLFNBQVM7Z0JBQ3ZCLElBQUksQ0FBQ1EsTUFBTSxHQUFHUixRQUFRUSxNQUFNO1lBQzlCO1lBQ0EsSUFBSSxnQkFBZ0JSLFNBQVM7Z0JBQzNCLElBQUksQ0FBQ1MsVUFBVSxHQUFHVCxRQUFRUyxVQUFVO1lBQ3RDO1lBQ0EsSUFBSSxJQUFJLENBQUNELE1BQU0sRUFBRTtnQkFDZixJQUFJLENBQUNFLE1BQU0sR0FBRyxZQUFZVixVQUFVQSxRQUFRVSxNQUFNLEdBQUc7Z0JBQ3JELElBQUksQ0FBQ0MsT0FBTyxHQUFHLGFBQWFYLFVBQVVBLFFBQVFXLE9BQU8sR0FBRztnQkFDeEQsSUFBSSxDQUFDQyxNQUFNLEdBQUcsWUFBWVosVUFBVUEsUUFBUVksTUFBTSxHQUFHO1lBQ3ZELE9BQU87Z0JBQ0wsSUFBSSxDQUFDRixNQUFNLEdBQUc7Z0JBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUc7Z0JBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUc7WUFDaEI7WUFDQVYsTUFBTUYsUUFBUWEsTUFBTSxJQUFJLENBQUM7WUFDekIsSUFBS1osT0FBT0MsSUFBSztnQkFDZixJQUFJLENBQUNOLFFBQVFrQixJQUFJLENBQUNaLEtBQUtELE1BQU07Z0JBQzdCTSxRQUFRTCxHQUFHLENBQUNELElBQUk7Z0JBQ2hCLElBQUksQ0FBQ0EsSUFBSSxHQUFHTTtZQUNkO1lBQ0EsT0FBTyxJQUFJO1FBQ2I7UUFFQVosY0FBY29CLFNBQVMsQ0FBQ0UsS0FBSyxHQUFHLFNBQVNDLEtBQUs7WUFDNUMsSUFBSSxJQUFJLENBQUNWLE1BQU0sRUFBRTtnQkFDZixPQUFPLElBQUlXLE1BQU0sQ0FBQ0QsU0FBUyxLQUFLLElBQUksQ0FBQ04sTUFBTSxHQUFHLEdBQUdRLElBQUksQ0FBQyxJQUFJLENBQUNWLE1BQU07WUFDbkUsT0FBTztnQkFDTCxPQUFPO1lBQ1Q7UUFDRjtRQUVBLE9BQU9mO0lBRVQ7QUFFRixHQUFHbUIsSUFBSSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy94bWxidWlsZGVyL2xpYi9YTUxXcml0ZXJCYXNlLmpzPzNiMmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTFdyaXRlckJhc2UsXG4gICAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG4gIG1vZHVsZS5leHBvcnRzID0gWE1MV3JpdGVyQmFzZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBYTUxXcml0ZXJCYXNlKG9wdGlvbnMpIHtcbiAgICAgIHZhciBrZXksIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgdmFsdWU7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgdGhpcy5wcmV0dHkgPSBvcHRpb25zLnByZXR0eSB8fCBmYWxzZTtcbiAgICAgIHRoaXMuYWxsb3dFbXB0eSA9IChyZWYgPSBvcHRpb25zLmFsbG93RW1wdHkpICE9IG51bGwgPyByZWYgOiBmYWxzZTtcbiAgICAgIGlmICh0aGlzLnByZXR0eSkge1xuICAgICAgICB0aGlzLmluZGVudCA9IChyZWYxID0gb3B0aW9ucy5pbmRlbnQpICE9IG51bGwgPyByZWYxIDogJyAgJztcbiAgICAgICAgdGhpcy5uZXdsaW5lID0gKHJlZjIgPSBvcHRpb25zLm5ld2xpbmUpICE9IG51bGwgPyByZWYyIDogJ1xcbic7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gKHJlZjMgPSBvcHRpb25zLm9mZnNldCkgIT0gbnVsbCA/IHJlZjMgOiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbmRlbnQgPSAnJztcbiAgICAgICAgdGhpcy5uZXdsaW5lID0gJyc7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgIH1cbiAgICAgIHJlZjQgPSBvcHRpb25zLndyaXRlciB8fCB7fTtcbiAgICAgIGZvciAoa2V5IGluIHJlZjQpIHtcbiAgICAgICAgaWYgKCFoYXNQcm9wLmNhbGwocmVmNCwga2V5KSkgY29udGludWU7XG4gICAgICAgIHZhbHVlID0gcmVmNFtrZXldO1xuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICAgIGlmIChcInByZXR0eVwiIGluIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wcmV0dHkgPSBvcHRpb25zLnByZXR0eTtcbiAgICAgIH1cbiAgICAgIGlmIChcImFsbG93RW1wdHlcIiBpbiBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuYWxsb3dFbXB0eSA9IG9wdGlvbnMuYWxsb3dFbXB0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByZXR0eSkge1xuICAgICAgICB0aGlzLmluZGVudCA9IFwiaW5kZW50XCIgaW4gb3B0aW9ucyA/IG9wdGlvbnMuaW5kZW50IDogJyAgJztcbiAgICAgICAgdGhpcy5uZXdsaW5lID0gXCJuZXdsaW5lXCIgaW4gb3B0aW9ucyA/IG9wdGlvbnMubmV3bGluZSA6ICdcXG4nO1xuICAgICAgICB0aGlzLm9mZnNldCA9IFwib2Zmc2V0XCIgaW4gb3B0aW9ucyA/IG9wdGlvbnMub2Zmc2V0IDogMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW5kZW50ID0gJyc7XG4gICAgICAgIHRoaXMubmV3bGluZSA9ICcnO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICB9XG4gICAgICByZWYgPSBvcHRpb25zLndyaXRlciB8fCB7fTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICBpZiAoIWhhc1Byb3AuY2FsbChyZWYsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBYTUxXcml0ZXJCYXNlLnByb3RvdHlwZS5zcGFjZSA9IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgICBpZiAodGhpcy5wcmV0dHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheSgobGV2ZWwgfHwgMCkgKyB0aGlzLm9mZnNldCArIDEpLmpvaW4odGhpcy5pbmRlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gWE1MV3JpdGVyQmFzZTtcblxuICB9KSgpO1xuXG59KS5jYWxsKHRoaXMpO1xuIl0sIm5hbWVzIjpbIlhNTFdyaXRlckJhc2UiLCJoYXNQcm9wIiwiaGFzT3duUHJvcGVydHkiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImtleSIsInJlZiIsInJlZjEiLCJyZWYyIiwicmVmMyIsInJlZjQiLCJ2YWx1ZSIsInByZXR0eSIsImFsbG93RW1wdHkiLCJpbmRlbnQiLCJuZXdsaW5lIiwib2Zmc2V0Iiwid3JpdGVyIiwiY2FsbCIsInByb3RvdHlwZSIsInNldCIsInNwYWNlIiwibGV2ZWwiLCJBcnJheSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/XMLWriterBase.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlbuilder/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/xmlbuilder/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n// Generated by CoffeeScript 1.10.0\n(function() {\n    var XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\n    ref = __webpack_require__(/*! ./Utility */ \"(middleware)/./node_modules/xmlbuilder/lib/Utility.js\"), assign = ref.assign, isFunction = ref.isFunction;\n    XMLDocument = __webpack_require__(/*! ./XMLDocument */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDocument.js\");\n    XMLDocumentCB = __webpack_require__(/*! ./XMLDocumentCB */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLDocumentCB.js\");\n    XMLStringWriter = __webpack_require__(/*! ./XMLStringWriter */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLStringWriter.js\");\n    XMLStreamWriter = __webpack_require__(/*! ./XMLStreamWriter */ \"(middleware)/./node_modules/xmlbuilder/lib/XMLStreamWriter.js\");\n    module.exports.create = function(name, xmldec, doctype, options) {\n        var doc, root;\n        if (name == null) {\n            throw new Error(\"Root element needs a name\");\n        }\n        options = assign({}, xmldec, doctype, options);\n        doc = new XMLDocument(options);\n        root = doc.element(name);\n        if (!options.headless) {\n            doc.declaration(options);\n            if (options.pubID != null || options.sysID != null) {\n                doc.doctype(options);\n            }\n        }\n        return root;\n    };\n    module.exports.begin = function(options, onData, onEnd) {\n        var ref1;\n        if (isFunction(options)) {\n            ref1 = [\n                options,\n                onData\n            ], onData = ref1[0], onEnd = ref1[1];\n            options = {};\n        }\n        if (onData) {\n            return new XMLDocumentCB(options, onData, onEnd);\n        } else {\n            return new XMLDocument(options);\n        }\n    };\n    module.exports.stringWriter = function(options) {\n        return new XMLStringWriter(options);\n    };\n    module.exports.streamWriter = function(stream, options) {\n        return new XMLStreamWriter(stream, options);\n    };\n}).call(void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxtQ0FBbUM7QUFDbEM7SUFDQyxJQUFJQSxhQUFhQyxlQUFlQyxpQkFBaUJDLGlCQUFpQkMsUUFBUUMsWUFBWUM7SUFFdEZBLE1BQU1DLG1CQUFPQSxDQUFDLDJFQUFjSCxTQUFTRSxJQUFJRixNQUFNLEVBQUVDLGFBQWFDLElBQUlELFVBQVU7SUFFNUVMLGNBQWNPLG1CQUFPQSxDQUFDO0lBRXRCTixnQkFBZ0JNLG1CQUFPQSxDQUFDO0lBRXhCSixrQkFBa0JJLG1CQUFPQSxDQUFDO0lBRTFCTCxrQkFBa0JLLG1CQUFPQSxDQUFDO0lBRTFCQyxxQkFBcUIsR0FBRyxTQUFTRyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxPQUFPO1FBQzdELElBQUlDLEtBQUtDO1FBQ1QsSUFBSUwsUUFBUSxNQUFNO1lBQ2hCLE1BQU0sSUFBSU0sTUFBTTtRQUNsQjtRQUNBSCxVQUFVVixPQUFPLENBQUMsR0FBR1EsUUFBUUMsU0FBU0M7UUFDdENDLE1BQU0sSUFBSWYsWUFBWWM7UUFDdEJFLE9BQU9ELElBQUlHLE9BQU8sQ0FBQ1A7UUFDbkIsSUFBSSxDQUFDRyxRQUFRSyxRQUFRLEVBQUU7WUFDckJKLElBQUlLLFdBQVcsQ0FBQ047WUFDaEIsSUFBSSxRQUFTTyxLQUFLLElBQUksUUFBVVAsUUFBUVEsS0FBSyxJQUFJLE1BQU87Z0JBQ3REUCxJQUFJRixPQUFPLENBQUNDO1lBQ2Q7UUFDRjtRQUNBLE9BQU9FO0lBQ1Q7SUFFQVIsb0JBQW9CLEdBQUcsU0FBU00sT0FBTyxFQUFFVSxNQUFNLEVBQUVDLEtBQUs7UUFDcEQsSUFBSUM7UUFDSixJQUFJckIsV0FBV1MsVUFBVTtZQUN2QlksT0FBTztnQkFBQ1o7Z0JBQVNVO2FBQU8sRUFBRUEsU0FBU0UsSUFBSSxDQUFDLEVBQUUsRUFBRUQsUUFBUUMsSUFBSSxDQUFDLEVBQUU7WUFDM0RaLFVBQVUsQ0FBQztRQUNiO1FBQ0EsSUFBSVUsUUFBUTtZQUNWLE9BQU8sSUFBSXZCLGNBQWNhLFNBQVNVLFFBQVFDO1FBQzVDLE9BQU87WUFDTCxPQUFPLElBQUl6QixZQUFZYztRQUN6QjtJQUNGO0lBRUFOLDJCQUEyQixHQUFHLFNBQVNNLE9BQU87UUFDNUMsT0FBTyxJQUFJWCxnQkFBZ0JXO0lBQzdCO0lBRUFOLDJCQUEyQixHQUFHLFNBQVNxQixNQUFNLEVBQUVmLE9BQU87UUFDcEQsT0FBTyxJQUFJWixnQkFBZ0IyQixRQUFRZjtJQUNyQztBQUVGLEdBQUdnQixJQUFJLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3htbGJ1aWxkZXIvbGliL2luZGV4LmpzPzYxZTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGVkIGJ5IENvZmZlZVNjcmlwdCAxLjEwLjBcbihmdW5jdGlvbigpIHtcbiAgdmFyIFhNTERvY3VtZW50LCBYTUxEb2N1bWVudENCLCBYTUxTdHJlYW1Xcml0ZXIsIFhNTFN0cmluZ1dyaXRlciwgYXNzaWduLCBpc0Z1bmN0aW9uLCByZWY7XG5cbiAgcmVmID0gcmVxdWlyZSgnLi9VdGlsaXR5JyksIGFzc2lnbiA9IHJlZi5hc3NpZ24sIGlzRnVuY3Rpb24gPSByZWYuaXNGdW5jdGlvbjtcblxuICBYTUxEb2N1bWVudCA9IHJlcXVpcmUoJy4vWE1MRG9jdW1lbnQnKTtcblxuICBYTUxEb2N1bWVudENCID0gcmVxdWlyZSgnLi9YTUxEb2N1bWVudENCJyk7XG5cbiAgWE1MU3RyaW5nV3JpdGVyID0gcmVxdWlyZSgnLi9YTUxTdHJpbmdXcml0ZXInKTtcblxuICBYTUxTdHJlYW1Xcml0ZXIgPSByZXF1aXJlKCcuL1hNTFN0cmVhbVdyaXRlcicpO1xuXG4gIG1vZHVsZS5leHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uKG5hbWUsIHhtbGRlYywgZG9jdHlwZSwgb3B0aW9ucykge1xuICAgIHZhciBkb2MsIHJvb3Q7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9vdCBlbGVtZW50IG5lZWRzIGEgbmFtZVwiKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IGFzc2lnbih7fSwgeG1sZGVjLCBkb2N0eXBlLCBvcHRpb25zKTtcbiAgICBkb2MgPSBuZXcgWE1MRG9jdW1lbnQob3B0aW9ucyk7XG4gICAgcm9vdCA9IGRvYy5lbGVtZW50KG5hbWUpO1xuICAgIGlmICghb3B0aW9ucy5oZWFkbGVzcykge1xuICAgICAgZG9jLmRlY2xhcmF0aW9uKG9wdGlvbnMpO1xuICAgICAgaWYgKChvcHRpb25zLnB1YklEICE9IG51bGwpIHx8IChvcHRpb25zLnN5c0lEICE9IG51bGwpKSB7XG4gICAgICAgIGRvYy5kb2N0eXBlKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcm9vdDtcbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cy5iZWdpbiA9IGZ1bmN0aW9uKG9wdGlvbnMsIG9uRGF0YSwgb25FbmQpIHtcbiAgICB2YXIgcmVmMTtcbiAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgcmVmMSA9IFtvcHRpb25zLCBvbkRhdGFdLCBvbkRhdGEgPSByZWYxWzBdLCBvbkVuZCA9IHJlZjFbMV07XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvbkRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MRG9jdW1lbnRDQihvcHRpb25zLCBvbkRhdGEsIG9uRW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBYTUxEb2N1bWVudChvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHMuc3RyaW5nV3JpdGVyID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyaW5nV3JpdGVyKG9wdGlvbnMpO1xuICB9O1xuXG4gIG1vZHVsZS5leHBvcnRzLnN0cmVhbVdyaXRlciA9IGZ1bmN0aW9uKHN0cmVhbSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgWE1MU3RyZWFtV3JpdGVyKHN0cmVhbSwgb3B0aW9ucyk7XG4gIH07XG5cbn0pLmNhbGwodGhpcyk7XG4iXSwibmFtZXMiOlsiWE1MRG9jdW1lbnQiLCJYTUxEb2N1bWVudENCIiwiWE1MU3RyZWFtV3JpdGVyIiwiWE1MU3RyaW5nV3JpdGVyIiwiYXNzaWduIiwiaXNGdW5jdGlvbiIsInJlZiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlIiwibmFtZSIsInhtbGRlYyIsImRvY3R5cGUiLCJvcHRpb25zIiwiZG9jIiwicm9vdCIsIkVycm9yIiwiZWxlbWVudCIsImhlYWRsZXNzIiwiZGVjbGFyYXRpb24iLCJwdWJJRCIsInN5c0lEIiwiYmVnaW4iLCJvbkRhdGEiLCJvbkVuZCIsInJlZjEiLCJzdHJpbmdXcml0ZXIiLCJzdHJlYW1Xcml0ZXIiLCJzdHJlYW0iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlbuilder/lib/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/client.js":
/*!*******************************************!*\
  !*** ./node_modules/xmlrpc/lib/client.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\nvar http = __webpack_require__(/*! http */ \"http\"), https = __webpack_require__(/*! https */ \"https\"), url = __webpack_require__(/*! url */ \"(middleware)/./node_modules/next/dist/compiled/native-url/index.js\"), Serializer = __webpack_require__(/*! ./serializer */ \"(middleware)/./node_modules/xmlrpc/lib/serializer.js\"), Deserializer = __webpack_require__(/*! ./deserializer */ \"(middleware)/./node_modules/xmlrpc/lib/deserializer.js\"), Cookies = __webpack_require__(/*! ./cookies */ \"(middleware)/./node_modules/xmlrpc/lib/cookies.js\");\n/**\n * Creates a Client object for making XML-RPC method calls.\n *\n * @constructor\n * @param {Object|String} options - Server options to make the HTTP request to.\n *                                  Either a URI string\n *                                  (e.g. 'http://localhost:9090') or an object\n *                                  with fields:\n *   - {String} host              - (optional)\n *   - {Number} port\n *   - {String} url               - (optional) - may be used instead of host/port pair\n *   - {Boolean} cookies          - (optional) - if true then cookies returned by server will be stored and sent back on the next calls.\n *                                  Also it will be possible to access/manipulate cookies via #setCookie/#getCookie methods\n * @param {Boolean} isSecure      - True if using https for making calls,\n *                                  otherwise false.\n * @return {Client}\n */ function Client(options, isSecure) {\n    // Invokes with new if called without\n    if (false === this instanceof Client) {\n        return new Client(options, isSecure);\n    }\n    // If a string URI is passed in, converts to URI fields\n    if (typeof options === \"string\") {\n        options = url.parse(options);\n        options.host = options.hostname;\n        options.path = options.pathname;\n    }\n    if (typeof options.url !== \"undefined\") {\n        var parsedUrl = url.parse(options.url);\n        options.host = parsedUrl.hostname;\n        options.path = parsedUrl.pathname;\n        options.port = parsedUrl.port;\n    }\n    // Set the HTTP request headers\n    var headers = {\n        \"User-Agent\": \"NodeJS XML-RPC Client\",\n        \"Content-Type\": \"text/xml\",\n        \"Accept\": \"text/xml\",\n        \"Accept-Charset\": \"UTF8\",\n        \"Connection\": \"Keep-Alive\"\n    };\n    options.headers = options.headers || {};\n    if (options.headers.Authorization == null && options.basic_auth != null && options.basic_auth.user != null && options.basic_auth.pass != null) {\n        var auth = options.basic_auth.user + \":\" + options.basic_auth.pass;\n        options.headers[\"Authorization\"] = \"Basic \" + new Buffer(auth).toString(\"base64\");\n    }\n    for(var attribute in headers){\n        if (options.headers[attribute] === undefined) {\n            options.headers[attribute] = headers[attribute];\n        }\n    }\n    options.method = \"POST\";\n    this.options = options;\n    this.isSecure = isSecure;\n    this.headersProcessors = {\n        processors: [],\n        composeRequest: function(headers) {\n            this.processors.forEach(function(p) {\n                p.composeRequest(headers);\n            });\n        },\n        parseResponse: function(headers) {\n            this.processors.forEach(function(p) {\n                p.parseResponse(headers);\n            });\n        }\n    };\n    if (options.cookies) {\n        this.cookies = new Cookies();\n        this.headersProcessors.processors.unshift(this.cookies);\n    }\n}\n/**\n * Makes an XML-RPC call to the server specified by the constructor's options.\n *\n * @param {String} method     - The method name.\n * @param {Array} params      - Params to send in the call.\n * @param {Function} callback - function(error, value) { ... }\n *   - {Object|null} error    - Any errors when making the call, otherwise null.\n *   - {mixed} value          - The value returned in the method response.\n */ Client.prototype.methodCall = function methodCall(method, params, callback) {\n    var options = this.options;\n    var xml = Serializer.serializeMethodCall(method, params, options.encoding);\n    var transport = this.isSecure ? https : http;\n    options.headers[\"Content-Length\"] = Buffer.byteLength(xml, \"utf8\");\n    this.headersProcessors.composeRequest(options.headers);\n    var request = transport.request(options, (function(response) {\n        var body = [];\n        response.on(\"data\", function(chunk) {\n            body.push(chunk);\n        });\n        function __enrichError(err) {\n            Object.defineProperty(err, \"req\", {\n                value: request\n            });\n            Object.defineProperty(err, \"res\", {\n                value: response\n            });\n            Object.defineProperty(err, \"body\", {\n                value: body.join(\"\")\n            });\n            return err;\n        }\n        if (response.statusCode == 404) {\n            callback(__enrichError(new Error(\"Not Found\")));\n        } else {\n            this.headersProcessors.parseResponse(response.headers);\n            var deserializer = new Deserializer(options.responseEncoding);\n            deserializer.deserializeMethodResponse(response, function(err, result) {\n                if (err) {\n                    err = __enrichError(err);\n                }\n                callback(err, result);\n            });\n        }\n    }).bind(this));\n    request.on(\"error\", callback);\n    request.write(xml, \"utf8\");\n    request.end();\n};\n/**\n * Gets the cookie value by its name. The latest value received from servr with 'Set-Cookie' header is returned\n * Note that method throws an error if cookies were not turned on during client creation (see comments for constructor)\n *\n * @param {String} name name of the cookie to be obtained or changed\n * @return {*} cookie's value\n */ Client.prototype.getCookie = function getCookie(name) {\n    if (!this.cookies) {\n        throw \"Cookies support is not turned on for this client instance\";\n    }\n    return this.cookies.get(name);\n};\n/**\n * Sets the cookie value by its name. The cookie will be sent to the server during the next xml-rpc call.\n * The method returns client itself, so it is possible to chain calls like the following:\n *\n * <code>\n *   client.cookie('login', 'alex').cookie('password', '123');\n * </code>\n *\n * Note that method throws an error if cookies were not turned on during client creation (see comments for constructor)\n *\n * @param {String} name name of the cookie to be changed\n * @param {String} value value to be set.\n * @return {*} client object itself\n */ Client.prototype.setCookie = function setCookie(name, value) {\n    if (!this.cookies) {\n        throw \"Cookies support is not turned on for this client instance\";\n    }\n    this.cookies.set(name, value);\n    return this;\n};\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/client.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/cookies.js":
/*!********************************************!*\
  !*** ./node_modules/xmlrpc/lib/cookies.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * Creates object for cookies manipulation on client side.\n * Allows to parse server's response in order to get cookies and compose http request to transfer cookies to the server\n * @constructor\n */ \nfunction Cookies() {\n    this.cookies = {};\n}\nCookies.prototype = {\n    /**\n   * Obtains value of the cookie with specified name.\n   * This call checks expiration dates and does not return expired cookies.\n   * @param {String} name cookie name\n   * @return {String} cookie value or null\n   */ get: function(name) {\n        var cookie = this.cookies[name];\n        if (cookie && this.checkNotExpired(name)) {\n            return this.cookies[name].value;\n        }\n        return null;\n    },\n    /**\n   * Sets cookie's value and optional options\n   * @param {String} name cookie's name\n   * @param {String} value value\n   * @param {Object} options with the following fields:\n   *  - {Boolean} secure - is cookie secure or not (does not mean anything for now)\n   *  - {Date} expires - cookie's expiration date. If specified then cookie will disappear after that date\n   */ set: function(name, value, options) {\n        var cookie = typeof options == \"object\" ? {\n            value: value,\n            expires: options.expires,\n            secure: options.secure || false,\n            new: options.new || false\n        } : {\n            value: value\n        };\n        if (this.checkNotExpired(name, cookie)) {\n            this.cookies[name] = cookie;\n        }\n    },\n    // For testing purposes\n    getExpirationDate: function(name) {\n        return this.cookies[name] ? this.cookies[name].expires : null;\n    },\n    // Internal function\n    checkNotExpired: function(name, cookie) {\n        if (typeof cookie === \"undefined\") {\n            cookie = this.cookies[name];\n        }\n        var now = new Date();\n        if (cookie && cookie.expires && now > cookie.expires) {\n            delete this.cookies[name];\n            return false;\n        }\n        return true;\n    },\n    /**\n   * Parses headers from server's response for 'set-cookie' header and store cookie's values.\n   * Also parses expiration date\n   * @param headers\n   */ parseResponse: function(headers) {\n        var cookies = headers[\"set-cookie\"];\n        if (cookies) {\n            cookies.forEach((function(c) {\n                var cookiesParams = c.split(\";\");\n                var cookiePair = cookiesParams.shift().split(\"=\");\n                var options = {};\n                cookiesParams.forEach(function(param) {\n                    param = param.trim();\n                    if (param.toLowerCase().indexOf(\"expires\") == 0) {\n                        var date = param.split(\"=\")[1].trim();\n                        options.expires = new Date(date);\n                    }\n                });\n                this.set(cookiePair[0].trim(), cookiePair[1].trim(), options);\n            }).bind(this));\n        }\n    },\n    /**\n   * Adds cookies to the provided headers as array. Does nothing if there are no cookies stored.\n   * This call checks expiration dates and does not add expired cookies.\n   * @param headers\n   */ composeRequest: function(headers) {\n        if (Object.keys(this.cookies).length == 0) {\n            return;\n        }\n        headers[\"Cookie\"] = this.toString();\n    },\n    /**\n   *\n   * @return {String} cookies as 'name=value' pairs joined by semicolon\n   */ toString: function() {\n        return Object.keys(this.cookies).filter(this.checkNotExpired.bind(this)).map((function(name) {\n            return name + \"=\" + this.cookies[name].value;\n        }).bind(this)).join(\";\");\n    }\n};\nmodule.exports = Cookies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbHJwYy9saWIvY29va2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDO0FBQ0QsU0FBU0E7SUFDUCxJQUFJLENBQUNDLE9BQU8sR0FBRyxDQUFDO0FBQ2xCO0FBRUFELFFBQVFFLFNBQVMsR0FBRztJQUNsQjs7Ozs7R0FLQyxHQUNEQyxLQUFLLFNBQVNDLElBQUk7UUFDaEIsSUFBSUMsU0FBUyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0csS0FBSztRQUMvQixJQUFJQyxVQUFVLElBQUksQ0FBQ0MsZUFBZSxDQUFDRixPQUFPO1lBQ3hDLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNHLEtBQUssQ0FBQ0csS0FBSztRQUNqQztRQUNBLE9BQU87SUFDVDtJQUVBOzs7Ozs7O0dBT0MsR0FDREMsS0FBSyxTQUFTSixJQUFJLEVBQUVHLEtBQUssRUFBRUUsT0FBTztRQUNoQyxJQUFJSixTQUFTLE9BQU9JLFdBQVcsV0FDekI7WUFBQ0YsT0FBT0E7WUFBT0csU0FBU0QsUUFBUUMsT0FBTztZQUFFQyxRQUFRRixRQUFRRSxNQUFNLElBQUk7WUFBT0MsS0FBS0gsUUFBUUcsR0FBRyxJQUFJO1FBQUssSUFDbkc7WUFBQ0wsT0FBT0E7UUFBSztRQUNuQixJQUFJLElBQUksQ0FBQ0QsZUFBZSxDQUFDRixNQUFNQyxTQUFTO1lBQ3RDLElBQUksQ0FBQ0osT0FBTyxDQUFDRyxLQUFLLEdBQUdDO1FBQ3ZCO0lBQ0Y7SUFFQSx1QkFBdUI7SUFDdkJRLG1CQUFtQixTQUFTVCxJQUFJO1FBQzlCLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNHLEtBQUssR0FBRyxJQUFJLENBQUNILE9BQU8sQ0FBQ0csS0FBSyxDQUFDTSxPQUFPLEdBQUc7SUFDM0Q7SUFFQSxvQkFBb0I7SUFDcEJKLGlCQUFpQixTQUFTRixJQUFJLEVBQUVDLE1BQU07UUFDcEMsSUFBSSxPQUFPQSxXQUFXLGFBQWE7WUFDakNBLFNBQVMsSUFBSSxDQUFDSixPQUFPLENBQUNHLEtBQUs7UUFDN0I7UUFDQSxJQUFJVSxNQUFNLElBQUlDO1FBQ2QsSUFBSVYsVUFBVUEsT0FBT0ssT0FBTyxJQUFJSSxNQUFNVCxPQUFPSyxPQUFPLEVBQUU7WUFDcEQsT0FBTyxJQUFJLENBQUNULE9BQU8sQ0FBQ0csS0FBSztZQUN6QixPQUFPO1FBQ1Q7UUFDQSxPQUFPO0lBQ1Q7SUFHQTs7OztHQUlDLEdBQ0RZLGVBQWUsU0FBU0MsT0FBTztRQUM3QixJQUFJaEIsVUFBVWdCLE9BQU8sQ0FBQyxhQUFhO1FBQ25DLElBQUloQixTQUFTO1lBQ1hBLFFBQVFpQixPQUFPLENBQUMsVUFBU0MsQ0FBQztnQkFDeEIsSUFBSUMsZ0JBQWdCRCxFQUFFRSxLQUFLLENBQUM7Z0JBQzVCLElBQUlDLGFBQWFGLGNBQWNHLEtBQUssR0FBR0YsS0FBSyxDQUFDO2dCQUM3QyxJQUFJWixVQUFVLENBQUM7Z0JBQ2ZXLGNBQWNGLE9BQU8sQ0FBQyxTQUFTTSxLQUFLO29CQUNsQ0EsUUFBUUEsTUFBTUMsSUFBSTtvQkFDbEIsSUFBSUQsTUFBTUUsV0FBVyxHQUFHQyxPQUFPLENBQUMsY0FBYyxHQUFHO3dCQUMvQyxJQUFJQyxPQUFPSixNQUFNSCxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ksSUFBSTt3QkFDbkNoQixRQUFRQyxPQUFPLEdBQUcsSUFBSUssS0FBS2E7b0JBQzdCO2dCQUNGO2dCQUNBLElBQUksQ0FBQ3BCLEdBQUcsQ0FBQ2MsVUFBVSxDQUFDLEVBQUUsQ0FBQ0csSUFBSSxJQUFJSCxVQUFVLENBQUMsRUFBRSxDQUFDRyxJQUFJLElBQUloQjtZQUN2RCxHQUFFb0IsSUFBSSxDQUFDLElBQUk7UUFDYjtJQUNGO0lBRUE7Ozs7R0FJQyxHQUNEQyxnQkFBZ0IsU0FBU2IsT0FBTztRQUM5QixJQUFJYyxPQUFPQyxJQUFJLENBQUMsSUFBSSxDQUFDL0IsT0FBTyxFQUFFZ0MsTUFBTSxJQUFJLEdBQUc7WUFDekM7UUFDRjtRQUNBaEIsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUNpQixRQUFRO0lBQ25DO0lBR0E7OztHQUdDLEdBQ0RBLFVBQVU7UUFDUixPQUFPSCxPQUFPQyxJQUFJLENBQUMsSUFBSSxDQUFDL0IsT0FBTyxFQUM1QmtDLE1BQU0sQ0FBQyxJQUFJLENBQUM3QixlQUFlLENBQUN1QixJQUFJLENBQUMsSUFBSSxHQUNyQ08sR0FBRyxDQUFDLFVBQVNoQyxJQUFJO1lBQ2xCLE9BQU9BLE9BQU8sTUFBTSxJQUFJLENBQUNILE9BQU8sQ0FBQ0csS0FBSyxDQUFDRyxLQUFLO1FBQzlDLEdBQUVzQixJQUFJLENBQUMsSUFBSSxHQUFHUSxJQUFJLENBQUM7SUFDckI7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUd2QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1scnBjL2xpYi9jb29raWVzLmpzPzEwYjUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVzIG9iamVjdCBmb3IgY29va2llcyBtYW5pcHVsYXRpb24gb24gY2xpZW50IHNpZGUuXG4gKiBBbGxvd3MgdG8gcGFyc2Ugc2VydmVyJ3MgcmVzcG9uc2UgaW4gb3JkZXIgdG8gZ2V0IGNvb2tpZXMgYW5kIGNvbXBvc2UgaHR0cCByZXF1ZXN0IHRvIHRyYW5zZmVyIGNvb2tpZXMgdG8gdGhlIHNlcnZlclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIENvb2tpZXMoKSB7XG4gIHRoaXMuY29va2llcyA9IHt9XG59XG5cbkNvb2tpZXMucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogT2J0YWlucyB2YWx1ZSBvZiB0aGUgY29va2llIHdpdGggc3BlY2lmaWVkIG5hbWUuXG4gICAqIFRoaXMgY2FsbCBjaGVja3MgZXhwaXJhdGlvbiBkYXRlcyBhbmQgZG9lcyBub3QgcmV0dXJuIGV4cGlyZWQgY29va2llcy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgY29va2llIG5hbWVcbiAgICogQHJldHVybiB7U3RyaW5nfSBjb29raWUgdmFsdWUgb3IgbnVsbFxuICAgKi9cbiAgZ2V0OiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGNvb2tpZSA9IHRoaXMuY29va2llc1tuYW1lXVxuICAgIGlmIChjb29raWUgJiYgdGhpcy5jaGVja05vdEV4cGlyZWQobmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvb2tpZXNbbmFtZV0udmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBjb29raWUncyB2YWx1ZSBhbmQgb3B0aW9uYWwgb3B0aW9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBjb29raWUncyBuYW1lXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSB2YWx1ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB3aXRoIHRoZSBmb2xsb3dpbmcgZmllbGRzOlxuICAgKiAgLSB7Qm9vbGVhbn0gc2VjdXJlIC0gaXMgY29va2llIHNlY3VyZSBvciBub3QgKGRvZXMgbm90IG1lYW4gYW55dGhpbmcgZm9yIG5vdylcbiAgICogIC0ge0RhdGV9IGV4cGlyZXMgLSBjb29raWUncyBleHBpcmF0aW9uIGRhdGUuIElmIHNwZWNpZmllZCB0aGVuIGNvb2tpZSB3aWxsIGRpc2FwcGVhciBhZnRlciB0aGF0IGRhdGVcbiAgICovXG4gIHNldDogZnVuY3Rpb24obmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29va2llID0gdHlwZW9mIG9wdGlvbnMgPT0gJ29iamVjdCdcbiAgICAgICAgPyB7dmFsdWU6IHZhbHVlLCBleHBpcmVzOiBvcHRpb25zLmV4cGlyZXMsIHNlY3VyZTogb3B0aW9ucy5zZWN1cmUgfHwgZmFsc2UsIG5ldzogb3B0aW9ucy5uZXcgfHwgZmFsc2V9XG4gICAgICAgIDoge3ZhbHVlOiB2YWx1ZX1cbiAgICBpZiAodGhpcy5jaGVja05vdEV4cGlyZWQobmFtZSwgY29va2llKSkge1xuICAgICAgdGhpcy5jb29raWVzW25hbWVdID0gY29va2llXG4gICAgfVxuICB9LFxuXG4gIC8vIEZvciB0ZXN0aW5nIHB1cnBvc2VzXG4gIGdldEV4cGlyYXRpb25EYXRlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuY29va2llc1tuYW1lXSA/IHRoaXMuY29va2llc1tuYW1lXS5leHBpcmVzIDogbnVsbFxuICB9LFxuXG4gIC8vIEludGVybmFsIGZ1bmN0aW9uXG4gIGNoZWNrTm90RXhwaXJlZDogZnVuY3Rpb24obmFtZSwgY29va2llKSB7XG4gICAgaWYgKHR5cGVvZiBjb29raWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb29raWUgPSB0aGlzLmNvb2tpZXNbbmFtZV1cbiAgICB9XG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKClcbiAgICBpZiAoY29va2llICYmIGNvb2tpZS5leHBpcmVzICYmIG5vdyA+IGNvb2tpZS5leHBpcmVzKSB7XG4gICAgICBkZWxldGUgdGhpcy5jb29raWVzW25hbWVdXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuXG4gIC8qKlxuICAgKiBQYXJzZXMgaGVhZGVycyBmcm9tIHNlcnZlcidzIHJlc3BvbnNlIGZvciAnc2V0LWNvb2tpZScgaGVhZGVyIGFuZCBzdG9yZSBjb29raWUncyB2YWx1ZXMuXG4gICAqIEFsc28gcGFyc2VzIGV4cGlyYXRpb24gZGF0ZVxuICAgKiBAcGFyYW0gaGVhZGVyc1xuICAgKi9cbiAgcGFyc2VSZXNwb25zZTogZnVuY3Rpb24oaGVhZGVycykge1xuICAgIHZhciBjb29raWVzID0gaGVhZGVyc1snc2V0LWNvb2tpZSddXG4gICAgaWYgKGNvb2tpZXMpIHtcbiAgICAgIGNvb2tpZXMuZm9yRWFjaChmdW5jdGlvbihjKSB7XG4gICAgICAgIHZhciBjb29raWVzUGFyYW1zID0gYy5zcGxpdCgnOycpXG4gICAgICAgIHZhciBjb29raWVQYWlyID0gY29va2llc1BhcmFtcy5zaGlmdCgpLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fVxuICAgICAgICBjb29raWVzUGFyYW1zLmZvckVhY2goZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgICAgICBwYXJhbSA9IHBhcmFtLnRyaW0oKVxuICAgICAgICAgIGlmIChwYXJhbS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2V4cGlyZXMnKSA9PSAwKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHBhcmFtLnNwbGl0KCc9JylbMV0udHJpbSgpXG4gICAgICAgICAgICBvcHRpb25zLmV4cGlyZXMgPSBuZXcgRGF0ZShkYXRlKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5zZXQoY29va2llUGFpclswXS50cmltKCksIGNvb2tpZVBhaXJbMV0udHJpbSgpLCBvcHRpb25zKVxuICAgICAgfS5iaW5kKHRoaXMpKVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWRkcyBjb29raWVzIHRvIHRoZSBwcm92aWRlZCBoZWFkZXJzIGFzIGFycmF5LiBEb2VzIG5vdGhpbmcgaWYgdGhlcmUgYXJlIG5vIGNvb2tpZXMgc3RvcmVkLlxuICAgKiBUaGlzIGNhbGwgY2hlY2tzIGV4cGlyYXRpb24gZGF0ZXMgYW5kIGRvZXMgbm90IGFkZCBleHBpcmVkIGNvb2tpZXMuXG4gICAqIEBwYXJhbSBoZWFkZXJzXG4gICAqL1xuICBjb21wb3NlUmVxdWVzdDogZnVuY3Rpb24oaGVhZGVycykge1xuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmNvb2tpZXMpLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaGVhZGVyc1snQ29va2llJ10gPSB0aGlzLnRvU3RyaW5nKClcbiAgfSxcblxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGNvb2tpZXMgYXMgJ25hbWU9dmFsdWUnIHBhaXJzIGpvaW5lZCBieSBzZW1pY29sb25cbiAgICovXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jb29raWVzKVxuICAgICAgLmZpbHRlcih0aGlzLmNoZWNrTm90RXhwaXJlZC5iaW5kKHRoaXMpKVxuICAgICAgLm1hcChmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gbmFtZSArICc9JyArIHRoaXMuY29va2llc1tuYW1lXS52YWx1ZVxuICAgIH0uYmluZCh0aGlzKSkuam9pbignOycpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb29raWVzXG4iXSwibmFtZXMiOlsiQ29va2llcyIsImNvb2tpZXMiLCJwcm90b3R5cGUiLCJnZXQiLCJuYW1lIiwiY29va2llIiwiY2hlY2tOb3RFeHBpcmVkIiwidmFsdWUiLCJzZXQiLCJvcHRpb25zIiwiZXhwaXJlcyIsInNlY3VyZSIsIm5ldyIsImdldEV4cGlyYXRpb25EYXRlIiwibm93IiwiRGF0ZSIsInBhcnNlUmVzcG9uc2UiLCJoZWFkZXJzIiwiZm9yRWFjaCIsImMiLCJjb29raWVzUGFyYW1zIiwic3BsaXQiLCJjb29raWVQYWlyIiwic2hpZnQiLCJwYXJhbSIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJkYXRlIiwiYmluZCIsImNvbXBvc2VSZXF1ZXN0IiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInRvU3RyaW5nIiwiZmlsdGVyIiwibWFwIiwiam9pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/cookies.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/customtype.js":
/*!***********************************************!*\
  !*** ./node_modules/xmlrpc/lib/customtype.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("\nvar CustomType = module.exports = function(raw) {\n    this.raw = raw;\n};\nCustomType.prototype.serialize = function(xml) {\n    return xml.ele(this.tagName).txt(this.raw);\n};\nCustomType.prototype.tagName = \"customType\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbHJwYy9saWIvY3VzdG9tdHlwZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsYUFBYUMsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLEdBQUc7SUFDNUMsSUFBSSxDQUFDQSxHQUFHLEdBQUdBO0FBQ2I7QUFFQUgsV0FBV0ksU0FBUyxDQUFDQyxTQUFTLEdBQUcsU0FBU0MsR0FBRztJQUMzQyxPQUFPQSxJQUFJQyxHQUFHLENBQUMsSUFBSSxDQUFDQyxPQUFPLEVBQUVDLEdBQUcsQ0FBQyxJQUFJLENBQUNOLEdBQUc7QUFDM0M7QUFFQUgsV0FBV0ksU0FBUyxDQUFDSSxPQUFPLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3htbHJwYy9saWIvY3VzdG9tdHlwZS5qcz9jNjBlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBDdXN0b21UeXBlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyYXcpIHtcbiAgdGhpcy5yYXcgPSByYXdcbn1cblxuQ3VzdG9tVHlwZS5wcm90b3R5cGUuc2VyaWFsaXplID0gZnVuY3Rpb24oeG1sKSB7XG4gIHJldHVybiB4bWwuZWxlKHRoaXMudGFnTmFtZSkudHh0KHRoaXMucmF3KVxufVxuXG5DdXN0b21UeXBlLnByb3RvdHlwZS50YWdOYW1lID0gJ2N1c3RvbVR5cGUnXG5cbiJdLCJuYW1lcyI6WyJDdXN0b21UeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJhdyIsInByb3RvdHlwZSIsInNlcmlhbGl6ZSIsInhtbCIsImVsZSIsInRhZ05hbWUiLCJ0eHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/customtype.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/date_formatter.js":
/*!***************************************************!*\
  !*** ./node_modules/xmlrpc/lib/date_formatter.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * @class DateFormatter\n * The DateFormatter supports decoding from and encoding to\n * ISO8601 formatted strings. Accepts formats with and without\n * hyphen/colon separators and correctly parses zoning info.\n */ \nvar DateFormatter = function(opts) {\n    this.opts = {};\n    this.setOpts(opts);\n};\n/**\n * Default options for DateFormatter\n * @static\n * @see DateFormatter#setOpts\n */ DateFormatter.DEFAULT_OPTIONS = {\n    colons: true,\n    hyphens: false,\n    local: true,\n    ms: false,\n    offset: false\n};\n/**\n * Regular Expression that disects ISO 8601 formatted strings into\n * an array of parts.\n * @static\n */ DateFormatter.ISO8601 = new RegExp(\"([0-9]{4})([-]?([0-9]{2}))([-]?([0-9]{2}))\" + \"(T([0-9]{2})(((:?([0-9]{2}))?((:?([0-9]{2}))?(.([0-9]+))?))?)\" + \"(Z|([+-]([0-9]{2}(:?([0-9]{2}))?)))?)?\");\n/**\n * Sets options for encoding Date objects to ISO8601 strings.\n *    Omitting the 'opts' argument will reset all options to the default.\n *\n * @param {Object} opts - Options (optional)\n * @param {Boolean} opts.colons  - Enable/disable formatting the time portion\n *                                 with a colon as separator (default: true)\n * @param {Boolean} opts.hyphens - Enable/disable formatting the date portion\n *                                 with a hyphen as separator (default: false)\n * @param {Boolean} opts.local   - Encode as local time instead of UTC\n *                                 (default: true)\n * @param {Boolean} opts.ms      - Enable/Disable output of milliseconds\n *                                 (default: false)\n * @param {Boolean} opts.offset  - Enable/Disable output of UTC offset\n *                                 (default: false)\n */ DateFormatter.prototype.setOpts = function(opts) {\n    if (!opts) opts = DateFormatter.DEFAULT_OPTIONS;\n    var ctx = this;\n    Object.keys(DateFormatter.DEFAULT_OPTIONS).forEach(function(k) {\n        ctx.opts[k] = opts.hasOwnProperty(k) ? opts[k] : DateFormatter.DEFAULT_OPTIONS[k];\n    });\n};\n/**\n * Converts a date time stamp following the ISO8601 format to a JavaScript Date\n * object.\n *\n * @param {String} time - String representation of timestamp.\n * @return {Date}       - Date object from timestamp.\n */ DateFormatter.prototype.decodeIso8601 = function(time) {\n    var dateParts = time.toString().match(DateFormatter.ISO8601);\n    if (!dateParts) {\n        throw new Error(\"Expected a ISO8601 datetime but got '\" + time + \"'\");\n    }\n    var date = [\n        [\n            dateParts[1],\n            dateParts[3] || \"01\",\n            dateParts[5] || \"01\"\n        ].join(\"-\"),\n        \"T\",\n        [\n            dateParts[7] || \"00\",\n            dateParts[11] || \"00\",\n            dateParts[14] || \"00\"\n        ].join(\":\"),\n        \".\",\n        dateParts[16] || \"000\"\n    ].join(\"\");\n    date += dateParts[17] !== undefined ? dateParts[17] + (dateParts[19] && dateParts[20] === undefined ? \"00\" : \"\") : DateFormatter.formatCurrentOffset(new Date(date));\n    return new Date(date);\n};\n/**\n * Converts a JavaScript Date object to an ISO8601 timestamp.\n *\n * @param {Date} date - Date object.\n * @return {String}   - String representation of timestamp.\n */ DateFormatter.prototype.encodeIso8601 = function(date) {\n    var parts = this.opts.local ? DateFormatter.getLocalDateParts(date) : DateFormatter.getUTCDateParts(date);\n    return [\n        [\n            parts[0],\n            parts[1],\n            parts[2]\n        ].join(this.opts.hyphens ? \"-\" : \"\"),\n        \"T\",\n        [\n            parts[3],\n            parts[4],\n            parts[5]\n        ].join(this.opts.colons ? \":\" : \"\"),\n        this.opts.ms ? \".\" + parts[6] : \"\",\n        this.opts.local ? this.opts.offset ? DateFormatter.formatCurrentOffset(date) : \"\" : \"Z\"\n    ].join(\"\");\n};\n/**\n * Helper function to get an array of zero-padded date parts,\n * in UTC\n *\n * @param {Date} date - Date Object\n * @return {String[]}\n */ DateFormatter.getUTCDateParts = function(date) {\n    return [\n        date.getUTCFullYear(),\n        DateFormatter.zeroPad(date.getUTCMonth() + 1, 2),\n        DateFormatter.zeroPad(date.getUTCDate(), 2),\n        DateFormatter.zeroPad(date.getUTCHours(), 2),\n        DateFormatter.zeroPad(date.getUTCMinutes(), 2),\n        DateFormatter.zeroPad(date.getUTCSeconds(), 2),\n        DateFormatter.zeroPad(date.getUTCMilliseconds(), 3)\n    ];\n};\n/**\n * Helper function to get an array of zero-padded date parts,\n * in the local time zone\n *\n * @param {Date} date - Date Object\n * @return {String[]}\n */ DateFormatter.getLocalDateParts = function(date) {\n    return [\n        date.getFullYear(),\n        DateFormatter.zeroPad(date.getMonth() + 1, 2),\n        DateFormatter.zeroPad(date.getDate(), 2),\n        DateFormatter.zeroPad(date.getHours(), 2),\n        DateFormatter.zeroPad(date.getMinutes(), 2),\n        DateFormatter.zeroPad(date.getSeconds(), 2),\n        DateFormatter.zeroPad(date.getMilliseconds(), 3)\n    ];\n};\n/**\n * Helper function to pad the digits with 0s to meet date formatting\n * requirements.\n *\n * @param {Number} digit  - The number to pad.\n * @param {Number} length - Length of digit string, prefix with 0s if not\n *                          already length.\n * @return {String}       - String with the padded digit\n */ DateFormatter.zeroPad = function(digit, length) {\n    var padded = \"\" + digit;\n    while(padded.length < length){\n        padded = \"0\" + padded;\n    }\n    return padded;\n};\n/**\n * Helper function to get the current timezone to default decoding to\n * rather than UTC. (for backward compatibility)\n *\n * @return {String} - in the format /Z|[+-]\\d{2}:\\d{2}/\n */ DateFormatter.formatCurrentOffset = function(d) {\n    var offset = (d || new Date()).getTimezoneOffset();\n    return offset === 0 ? \"Z\" : [\n        offset < 0 ? \"+\" : \"-\",\n        DateFormatter.zeroPad(Math.abs(Math.floor(offset / 60)), 2),\n        \":\",\n        DateFormatter.zeroPad(Math.abs(offset % 60), 2)\n    ].join(\"\");\n};\n// export an instance of DateFormatter only.\nmodule.exports = new DateFormatter();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/date_formatter.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/deserializer.js":
/*!*************************************************!*\
  !*** ./node_modules/xmlrpc/lib/deserializer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\n\nvar sax = __webpack_require__(/*! sax */ \"(middleware)/./node_modules/sax/lib/sax.js\"), dateFormatter = __webpack_require__(/*! ./date_formatter */ \"(middleware)/./node_modules/xmlrpc/lib/date_formatter.js\");\nvar Deserializer = function(encoding) {\n    this.type = null;\n    this.responseType = null;\n    this.stack = [];\n    this.marks = [];\n    this.data = [];\n    this.methodname = null;\n    this.encoding = encoding || \"utf8\";\n    this.value = false;\n    this.callback = null;\n    this.error = null;\n    this.parser = sax.createStream();\n    this.parser.on(\"opentag\", this.onOpentag.bind(this));\n    this.parser.on(\"closetag\", this.onClosetag.bind(this));\n    this.parser.on(\"text\", this.onText.bind(this));\n    this.parser.on(\"cdata\", this.onCDATA.bind(this));\n    this.parser.on(\"end\", this.onDone.bind(this));\n    this.parser.on(\"error\", this.onError.bind(this));\n};\nDeserializer.prototype.deserializeMethodResponse = function(stream, callback) {\n    var that = this;\n    this.callback = function(error, result) {\n        if (error) {\n            callback(error);\n        } else if (result.length > 1) {\n            callback(new Error(\"Response has more than one param\"));\n        } else if (that.type !== \"methodresponse\") {\n            callback(new Error(\"Not a method response\"));\n        } else if (!that.responseType) {\n            callback(new Error(\"Invalid method response\"));\n        } else {\n            callback(null, result[0]);\n        }\n    };\n    stream.setEncoding(this.encoding);\n    stream.on(\"error\", this.onError.bind(this));\n    stream.pipe(this.parser);\n};\nDeserializer.prototype.deserializeMethodCall = function(stream, callback) {\n    var that = this;\n    this.callback = function(error, result) {\n        if (error) {\n            callback(error);\n        } else if (that.type !== \"methodcall\") {\n            callback(new Error(\"Not a method call\"));\n        } else if (!that.methodname) {\n            callback(new Error(\"Method call did not contain a method name\"));\n        } else {\n            callback(null, that.methodname, result);\n        }\n    };\n    stream.setEncoding(this.encoding);\n    stream.on(\"error\", this.onError.bind(this));\n    stream.pipe(this.parser);\n};\nDeserializer.prototype.onDone = function() {\n    var that = this;\n    if (!this.error) {\n        if (this.type === null || this.marks.length) {\n            this.callback(new Error(\"Invalid XML-RPC message\"));\n        } else if (this.responseType === \"fault\") {\n            var createFault = function(fault) {\n                var error = new Error(\"XML-RPC fault\" + (fault.faultString ? \": \" + fault.faultString : \"\"));\n                error.code = fault.faultCode;\n                error.faultCode = fault.faultCode;\n                error.faultString = fault.faultString;\n                return error;\n            };\n            this.callback(createFault(this.stack[0]));\n        } else {\n            this.callback(undefined, this.stack);\n        }\n    }\n};\n// TODO:\n// Error handling needs a little thinking. There are two different kinds of\n// errors: \n//   1. Low level errors like network, stream or xml errors. These don't\n//      require special treatment. They only need to be forwarded. The IO\n//      is already stopped in these cases. \n//   2. Protocol errors: Invalid tags, invalid values &c. These happen in\n//      our code and we should tear down the IO and stop parsing.\n// Currently all errors end here. Guess I'll split it up. \nDeserializer.prototype.onError = function(msg) {\n    if (!this.error) {\n        if (typeof msg === \"string\") {\n            this.error = new Error(msg);\n        } else {\n            this.error = msg;\n        }\n        this.callback(this.error);\n    }\n};\nDeserializer.prototype.push = function(value) {\n    this.stack.push(value);\n};\n//==============================================================================\n// SAX Handlers\n//==============================================================================\nDeserializer.prototype.onOpentag = function(node) {\n    if (node.name === \"ARRAY\" || node.name === \"STRUCT\") {\n        this.marks.push(this.stack.length);\n    }\n    this.data = [];\n    this.value = node.name === \"VALUE\";\n};\nDeserializer.prototype.onText = function(text) {\n    this.data.push(text);\n};\nDeserializer.prototype.onCDATA = function(cdata) {\n    this.data.push(cdata);\n};\nDeserializer.prototype.onClosetag = function(el) {\n    var data = this.data.join(\"\");\n    try {\n        switch(el){\n            case \"BOOLEAN\":\n                this.endBoolean(data);\n                break;\n            case \"INT\":\n            case \"I4\":\n                this.endInt(data);\n                break;\n            case \"I8\":\n                this.endI8(data);\n                break;\n            case \"DOUBLE\":\n                this.endDouble(data);\n                break;\n            case \"STRING\":\n            case \"NAME\":\n                this.endString(data);\n                break;\n            case \"ARRAY\":\n                this.endArray(data);\n                break;\n            case \"STRUCT\":\n                this.endStruct(data);\n                break;\n            case \"BASE64\":\n                this.endBase64(data);\n                break;\n            case \"DATETIME.ISO8601\":\n                this.endDateTime(data);\n                break;\n            case \"VALUE\":\n                this.endValue(data);\n                break;\n            case \"PARAMS\":\n                this.endParams(data);\n                break;\n            case \"FAULT\":\n                this.endFault(data);\n                break;\n            case \"METHODRESPONSE\":\n                this.endMethodResponse(data);\n                break;\n            case \"METHODNAME\":\n                this.endMethodName(data);\n                break;\n            case \"METHODCALL\":\n                this.endMethodCall(data);\n                break;\n            case \"NIL\":\n                this.endNil(data);\n                break;\n            case \"DATA\":\n            case \"PARAM\":\n            case \"MEMBER\":\n                break;\n            default:\n                this.onError(\"Unknown XML-RPC tag '\" + el + \"'\");\n                break;\n        }\n    } catch (e) {\n        this.onError(e);\n    }\n};\nDeserializer.prototype.endNil = function(data) {\n    this.push(null);\n    this.value = false;\n};\nDeserializer.prototype.endBoolean = function(data) {\n    if (data === \"1\") {\n        this.push(true);\n    } else if (data === \"0\") {\n        this.push(false);\n    } else {\n        throw new Error(\"Illegal boolean value '\" + data + \"'\");\n    }\n    this.value = false;\n};\nDeserializer.prototype.endInt = function(data) {\n    var value = parseInt(data, 10);\n    if (isNaN(value)) {\n        throw new Error(\"Expected an integer but got '\" + data + \"'\");\n    } else {\n        this.push(value);\n        this.value = false;\n    }\n};\nDeserializer.prototype.endDouble = function(data) {\n    var value = parseFloat(data);\n    if (isNaN(value)) {\n        throw new Error(\"Expected a double but got '\" + data + \"'\");\n    } else {\n        this.push(value);\n        this.value = false;\n    }\n};\nDeserializer.prototype.endString = function(data) {\n    this.push(data);\n    this.value = false;\n};\nDeserializer.prototype.endArray = function(data) {\n    var mark = this.marks.pop();\n    this.stack.splice(mark, this.stack.length - mark, this.stack.slice(mark));\n    this.value = false;\n};\nDeserializer.prototype.endStruct = function(data) {\n    var mark = this.marks.pop(), struct = {}, items = this.stack.slice(mark), i = 0;\n    for(; i < items.length; i += 2){\n        struct[items[i]] = items[i + 1];\n    }\n    this.stack.splice(mark, this.stack.length - mark, struct);\n    this.value = false;\n};\nDeserializer.prototype.endBase64 = function(data) {\n    var buffer = new Buffer(data, \"base64\");\n    this.push(buffer);\n    this.value = false;\n};\nDeserializer.prototype.endDateTime = function(data) {\n    var date = dateFormatter.decodeIso8601(data);\n    this.push(date);\n    this.value = false;\n};\nvar isInteger = /^-?\\d+$/;\nDeserializer.prototype.endI8 = function(data) {\n    if (!isInteger.test(data)) {\n        throw new Error(\"Expected integer (I8) value but got '\" + data + \"'\");\n    } else {\n        this.endString(data);\n    }\n};\nDeserializer.prototype.endValue = function(data) {\n    if (this.value) {\n        this.endString(data);\n    }\n};\nDeserializer.prototype.endParams = function(data) {\n    this.responseType = \"params\";\n};\nDeserializer.prototype.endFault = function(data) {\n    this.responseType = \"fault\";\n};\nDeserializer.prototype.endMethodResponse = function(data) {\n    this.type = \"methodresponse\";\n};\nDeserializer.prototype.endMethodName = function(data) {\n    this.methodname = data;\n};\nDeserializer.prototype.endMethodCall = function(data) {\n    this.type = \"methodcall\";\n};\nmodule.exports = Deserializer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/deserializer.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/serializer.js":
/*!***********************************************!*\
  !*** ./node_modules/xmlrpc/lib/serializer.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"buffer\")[\"Buffer\"];\nvar xmlBuilder = __webpack_require__(/*! xmlbuilder */ \"(middleware)/./node_modules/xmlbuilder/lib/index.js\"), dateFormatter = __webpack_require__(/*! ./date_formatter */ \"(middleware)/./node_modules/xmlrpc/lib/date_formatter.js\"), CustomType = __webpack_require__(/*! ./customtype */ \"(middleware)/./node_modules/xmlrpc/lib/customtype.js\");\n/**\n * Creates the XML for an XML-RPC method call.\n *\n * @param {String} method     - The method name.\n * @param {Array} params      - Params to pass in the call.\n * @param {Function} callback - function (error, xml) { ... }\n *   - {Object|null} error    - Any errors that occurred while building the XML,\n *                              otherwise null.\n *   - {String} xml           - The method call XML.\n */ exports.serializeMethodCall = function(method, params, encoding) {\n    var params = params || [];\n    var options = {\n        version: \"1.0\",\n        allowSurrogateChars: true\n    };\n    if (encoding) {\n        options.encoding = encoding;\n    }\n    var xml = xmlBuilder.create(\"methodCall\", options).ele(\"methodName\").txt(method).up().ele(\"params\");\n    params.forEach(function(param) {\n        serializeValue(param, xml.ele(\"param\"));\n    });\n    // Includes the <?xml ...> declaration\n    return xml.doc().toString();\n};\n/**\n * Creates the XML for an XML-RPC method response.\n *\n * @param {mixed} value       - The value to pass in the response.\n * @param {Function} callback - function (error, xml) { ... }\n *   - {Object|null} error    - Any errors that occurred while building the XML,\n *                              otherwise null.\n *   - {String} xml           - The method response XML.\n */ exports.serializeMethodResponse = function(result) {\n    var xml = xmlBuilder.create(\"methodResponse\", {\n        version: \"1.0\",\n        allowSurrogateChars: true\n    }).ele(\"params\").ele(\"param\");\n    serializeValue(result, xml);\n    // Includes the <?xml ...> declaration\n    return xml.doc().toString();\n};\nexports.serializeFault = function(fault) {\n    var xml = xmlBuilder.create(\"methodResponse\", {\n        version: \"1.0\",\n        allowSurrogateChars: true\n    }).ele(\"fault\");\n    serializeValue(fault, xml);\n    // Includes the <?xml ...> declaration\n    return xml.doc().toString();\n};\nfunction serializeValue(value, xml) {\n    var stack = [\n        {\n            value: value,\n            xml: xml\n        }\n    ], current = null, valueNode = null, next = null;\n    while(stack.length > 0){\n        current = stack[stack.length - 1];\n        if (current.index !== undefined) {\n            // Iterating a compound\n            next = getNextItemsFrame(current);\n            if (next) {\n                stack.push(next);\n            } else {\n                stack.pop();\n            }\n        } else {\n            // we're about to add a new value (compound or simple)\n            valueNode = current.xml.ele(\"value\");\n            switch(typeof current.value){\n                case \"boolean\":\n                    appendBoolean(current.value, valueNode);\n                    stack.pop();\n                    break;\n                case \"string\":\n                    appendString(current.value, valueNode);\n                    stack.pop();\n                    break;\n                case \"number\":\n                    appendNumber(current.value, valueNode);\n                    stack.pop();\n                    break;\n                case \"object\":\n                    if (current.value === null) {\n                        valueNode.ele(\"nil\");\n                        stack.pop();\n                    } else if (current.value instanceof Date) {\n                        appendDatetime(current.value, valueNode);\n                        stack.pop();\n                    } else if (Buffer.isBuffer(current.value)) {\n                        appendBuffer(current.value, valueNode);\n                        stack.pop();\n                    } else if (current.value instanceof CustomType) {\n                        current.value.serialize(valueNode);\n                        stack.pop();\n                    } else {\n                        if (Array.isArray(current.value)) {\n                            current.xml = valueNode.ele(\"array\").ele(\"data\");\n                        } else {\n                            current.xml = valueNode.ele(\"struct\");\n                            current.keys = Object.keys(current.value);\n                        }\n                        current.index = 0;\n                        next = getNextItemsFrame(current);\n                        if (next) {\n                            stack.push(next);\n                        } else {\n                            stack.pop();\n                        }\n                    }\n                    break;\n                default:\n                    stack.pop();\n                    break;\n            }\n        }\n    }\n}\nfunction getNextItemsFrame(frame) {\n    var nextFrame = null;\n    if (frame.keys) {\n        if (frame.index < frame.keys.length) {\n            var key = frame.keys[frame.index++], member = frame.xml.ele(\"member\").ele(\"name\").text(key).up();\n            nextFrame = {\n                value: frame.value[key],\n                xml: member\n            };\n        }\n    } else if (frame.index < frame.value.length) {\n        nextFrame = {\n            value: frame.value[frame.index],\n            xml: frame.xml\n        };\n        frame.index++;\n    }\n    return nextFrame;\n}\nfunction appendBoolean(value, xml) {\n    xml.ele(\"boolean\").txt(value ? 1 : 0);\n}\nvar illegalChars = /^(?![^<&]*]]>[^<&]*)[^<&]*$/;\nfunction appendString(value, xml) {\n    if (value.length === 0) {\n        xml.ele(\"string\");\n    } else if (!illegalChars.test(value)) {\n        xml.ele(\"string\").d(value);\n    } else {\n        xml.ele(\"string\").txt(value);\n    }\n}\nfunction appendNumber(value, xml) {\n    if (value % 1 == 0) {\n        xml.ele(\"int\").txt(value);\n    } else {\n        xml.ele(\"double\").txt(value);\n    }\n}\nfunction appendDatetime(value, xml) {\n    xml.ele(\"dateTime.iso8601\").txt(dateFormatter.encodeIso8601(value));\n}\nfunction appendBuffer(value, xml) {\n    xml.ele(\"base64\").txt(value.toString(\"base64\"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/serializer.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/server.js":
/*!*******************************************!*\
  !*** ./node_modules/xmlrpc/lib/server.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar http = __webpack_require__(/*! http */ \"http\"), https = __webpack_require__(/*! https */ \"https\"), url = __webpack_require__(/*! url */ \"(middleware)/./node_modules/next/dist/compiled/native-url/index.js\"), EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter), Serializer = __webpack_require__(/*! ./serializer */ \"(middleware)/./node_modules/xmlrpc/lib/serializer.js\"), Deserializer = __webpack_require__(/*! ./deserializer */ \"(middleware)/./node_modules/xmlrpc/lib/deserializer.js\");\n/**\n * Creates a new Server object. Also creates an HTTP server to start listening\n * for XML-RPC method calls. Will emit an event with the XML-RPC call's method\n * name when receiving a method call.\n *\n * @constructor\n * @param {Object|String} options - The HTTP server options. Either a URI string\n *                                  (e.g. 'http://localhost:9090') or an object\n *                                  with fields:\n *   - {String} host              - (optional)\n *   - {Number} port\n * @param {Boolean} isSecure      - True if using https for making calls,\n *                                  otherwise false.\n * @return {Server}\n */ function Server(options, isSecure, onListening) {\n    if (false === this instanceof Server) {\n        return new Server(options, isSecure);\n    }\n    onListening = onListening || function() {};\n    var that = this;\n    // If a string URI is passed in, converts to URI fields\n    if (typeof options === \"string\") {\n        options = url.parse(options);\n        options.host = options.hostname;\n        options.path = options.pathname;\n    }\n    function handleMethodCall(request, response) {\n        var deserializer = new Deserializer();\n        deserializer.deserializeMethodCall(request, function(error, methodName, params) {\n            if (Object.prototype.hasOwnProperty.call(that._events, methodName)) {\n                that.emit(methodName, null, params, function(error, value) {\n                    var xml = null;\n                    if (error !== null) {\n                        xml = Serializer.serializeFault(error);\n                    } else {\n                        xml = Serializer.serializeMethodResponse(value);\n                    }\n                    response.writeHead(200, {\n                        \"Content-Type\": \"text/xml\"\n                    });\n                    response.end(xml);\n                });\n            } else {\n                that.emit(\"NotFound\", methodName, params);\n                response.writeHead(404);\n                response.end();\n            }\n        });\n    }\n    this.httpServer = isSecure ? https.createServer(options, handleMethodCall) : http.createServer(handleMethodCall);\n    process.nextTick((function() {\n        this.httpServer.listen(options.port, options.host, onListening);\n    }).bind(this));\n    this.close = (function(callback) {\n        this.httpServer.once(\"close\", callback);\n        this.httpServer.close();\n    }).bind(this);\n}\n// Inherit from EventEmitter to emit and listen\nServer.prototype.__proto__ = EventEmitter.prototype;\nmodule.exports = Server;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbHJwYy9saWIvc2VydmVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxPQUFtQkMsbUJBQU9BLENBQUMscUJBQzNCQyxRQUFtQkQsbUJBQU9BLENBQUMsdUJBQzNCRSxNQUFtQkYsbUJBQU9BLENBQUMsa0ZBQzNCRyxlQUFtQkgsMERBQThCLEVBQ2pESSxhQUFtQkosbUJBQU9BLENBQUMsNkVBQzNCSyxlQUFtQkwsbUJBQU9BLENBQUM7QUFFL0I7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FDRCxTQUFTTSxPQUFPQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsV0FBVztJQUU1QyxJQUFJLFVBQVcsSUFBSSxZQUFZSCxRQUFTO1FBQ3RDLE9BQU8sSUFBSUEsT0FBT0MsU0FBU0M7SUFDN0I7SUFDQUMsY0FBY0EsZUFBZSxZQUFZO0lBQ3pDLElBQUlDLE9BQU8sSUFBSTtJQUVmLHVEQUF1RDtJQUN2RCxJQUFJLE9BQU9ILFlBQVksVUFBVTtRQUMvQkEsVUFBVUwsSUFBSVMsS0FBSyxDQUFDSjtRQUNwQkEsUUFBUUssSUFBSSxHQUFHTCxRQUFRTSxRQUFRO1FBQy9CTixRQUFRTyxJQUFJLEdBQUdQLFFBQVFRLFFBQVE7SUFDakM7SUFFQSxTQUFTQyxpQkFBaUJDLE9BQU8sRUFBRUMsUUFBUTtRQUN6QyxJQUFJQyxlQUFlLElBQUlkO1FBQ3ZCYyxhQUFhQyxxQkFBcUIsQ0FBQ0gsU0FBUyxTQUFTSSxLQUFLLEVBQUVDLFVBQVUsRUFBRUMsTUFBTTtZQUM1RSxJQUFJQyxPQUFPQyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDakIsS0FBS2tCLE9BQU8sRUFBRU4sYUFBYTtnQkFDbEVaLEtBQUttQixJQUFJLENBQUNQLFlBQVksTUFBTUMsUUFBUSxTQUFTRixLQUFLLEVBQUVTLEtBQUs7b0JBQ3ZELElBQUlDLE1BQU07b0JBQ1YsSUFBSVYsVUFBVSxNQUFNO3dCQUNsQlUsTUFBTTNCLFdBQVc0QixjQUFjLENBQUNYO29CQUNsQyxPQUNLO3dCQUNIVSxNQUFNM0IsV0FBVzZCLHVCQUF1QixDQUFDSDtvQkFDM0M7b0JBQ0FaLFNBQVNnQixTQUFTLENBQUMsS0FBSzt3QkFBQyxnQkFBZ0I7b0JBQVU7b0JBQ25EaEIsU0FBU2lCLEdBQUcsQ0FBQ0o7Z0JBQ2Y7WUFDRixPQUNLO2dCQUNIckIsS0FBS21CLElBQUksQ0FBQyxZQUFZUCxZQUFZQztnQkFDbENMLFNBQVNnQixTQUFTLENBQUM7Z0JBQ25CaEIsU0FBU2lCLEdBQUc7WUFDZDtRQUNGO0lBQ0Y7SUFFQSxJQUFJLENBQUNDLFVBQVUsR0FBRzVCLFdBQVdQLE1BQU1vQyxZQUFZLENBQUM5QixTQUFTUyxvQkFDN0JqQixLQUFLc0MsWUFBWSxDQUFDckI7SUFFOUNzQixRQUFRQyxRQUFRLENBQUM7UUFDZixJQUFJLENBQUNILFVBQVUsQ0FBQ0ksTUFBTSxDQUFDakMsUUFBUWtDLElBQUksRUFBRWxDLFFBQVFLLElBQUksRUFBRUg7SUFDckQsR0FBRWlDLElBQUksQ0FBQyxJQUFJO0lBQ1gsSUFBSSxDQUFDQyxLQUFLLEdBQUcsVUFBU0MsUUFBUTtRQUM1QixJQUFJLENBQUNSLFVBQVUsQ0FBQ1MsSUFBSSxDQUFDLFNBQVNEO1FBQzlCLElBQUksQ0FBQ1IsVUFBVSxDQUFDTyxLQUFLO0lBQ3ZCLEdBQUVELElBQUksQ0FBQyxJQUFJO0FBQ2I7QUFFQSwrQ0FBK0M7QUFDL0NwQyxPQUFPbUIsU0FBUyxDQUFDcUIsU0FBUyxHQUFHM0MsYUFBYXNCLFNBQVM7QUFFbkRzQixPQUFPQyxPQUFPLEdBQUcxQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1scnBjL2xpYi9zZXJ2ZXIuanM/MjVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaHR0cCAgICAgICAgICAgICA9IHJlcXVpcmUoJ2h0dHAnKVxuICAsIGh0dHBzICAgICAgICAgICAgPSByZXF1aXJlKCdodHRwcycpXG4gICwgdXJsICAgICAgICAgICAgICA9IHJlcXVpcmUoJ3VybCcpXG4gICwgRXZlbnRFbWl0dGVyICAgICA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIFNlcmlhbGl6ZXIgICAgICAgPSByZXF1aXJlKCcuL3NlcmlhbGl6ZXInKVxuICAsIERlc2VyaWFsaXplciAgICAgPSByZXF1aXJlKCcuL2Rlc2VyaWFsaXplcicpXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTZXJ2ZXIgb2JqZWN0LiBBbHNvIGNyZWF0ZXMgYW4gSFRUUCBzZXJ2ZXIgdG8gc3RhcnQgbGlzdGVuaW5nXG4gKiBmb3IgWE1MLVJQQyBtZXRob2QgY2FsbHMuIFdpbGwgZW1pdCBhbiBldmVudCB3aXRoIHRoZSBYTUwtUlBDIGNhbGwncyBtZXRob2RcbiAqIG5hbWUgd2hlbiByZWNlaXZpbmcgYSBtZXRob2QgY2FsbC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gb3B0aW9ucyAtIFRoZSBIVFRQIHNlcnZlciBvcHRpb25zLiBFaXRoZXIgYSBVUkkgc3RyaW5nXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZS5nLiAnaHR0cDovL2xvY2FsaG9zdDo5MDkwJykgb3IgYW4gb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGZpZWxkczpcbiAqICAgLSB7U3RyaW5nfSBob3N0ICAgICAgICAgICAgICAtIChvcHRpb25hbClcbiAqICAgLSB7TnVtYmVyfSBwb3J0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzU2VjdXJlICAgICAgLSBUcnVlIGlmIHVzaW5nIGh0dHBzIGZvciBtYWtpbmcgY2FsbHMsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgZmFsc2UuXG4gKiBAcmV0dXJuIHtTZXJ2ZXJ9XG4gKi9cbmZ1bmN0aW9uIFNlcnZlcihvcHRpb25zLCBpc1NlY3VyZSwgb25MaXN0ZW5pbmcpIHtcblxuICBpZiAoZmFsc2UgPT09ICh0aGlzIGluc3RhbmNlb2YgU2VydmVyKSkge1xuICAgIHJldHVybiBuZXcgU2VydmVyKG9wdGlvbnMsIGlzU2VjdXJlKVxuICB9XG4gIG9uTGlzdGVuaW5nID0gb25MaXN0ZW5pbmcgfHwgZnVuY3Rpb24oKSB7fVxuICB2YXIgdGhhdCA9IHRoaXNcblxuICAvLyBJZiBhIHN0cmluZyBVUkkgaXMgcGFzc2VkIGluLCBjb252ZXJ0cyB0byBVUkkgZmllbGRzXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICBvcHRpb25zID0gdXJsLnBhcnNlKG9wdGlvbnMpXG4gICAgb3B0aW9ucy5ob3N0ID0gb3B0aW9ucy5ob3N0bmFtZVxuICAgIG9wdGlvbnMucGF0aCA9IG9wdGlvbnMucGF0aG5hbWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU1ldGhvZENhbGwocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgICB2YXIgZGVzZXJpYWxpemVyID0gbmV3IERlc2VyaWFsaXplcigpXG4gICAgZGVzZXJpYWxpemVyLmRlc2VyaWFsaXplTWV0aG9kQ2FsbChyZXF1ZXN0LCBmdW5jdGlvbihlcnJvciwgbWV0aG9kTmFtZSwgcGFyYW1zKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoYXQuX2V2ZW50cywgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgdGhhdC5lbWl0KG1ldGhvZE5hbWUsIG51bGwsIHBhcmFtcywgZnVuY3Rpb24oZXJyb3IsIHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHhtbCA9IG51bGxcbiAgICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHhtbCA9IFNlcmlhbGl6ZXIuc2VyaWFsaXplRmF1bHQoZXJyb3IpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeG1sID0gU2VyaWFsaXplci5zZXJpYWxpemVNZXRob2RSZXNwb25zZSh2YWx1ZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcG9uc2Uud3JpdGVIZWFkKDIwMCwgeydDb250ZW50LVR5cGUnOiAndGV4dC94bWwnfSlcbiAgICAgICAgICByZXNwb25zZS5lbmQoeG1sKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoYXQuZW1pdCgnTm90Rm91bmQnLCBtZXRob2ROYW1lLCBwYXJhbXMpXG4gICAgICAgIHJlc3BvbnNlLndyaXRlSGVhZCg0MDQpXG4gICAgICAgIHJlc3BvbnNlLmVuZCgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuaHR0cFNlcnZlciA9IGlzU2VjdXJlID8gaHR0cHMuY3JlYXRlU2VydmVyKG9wdGlvbnMsIGhhbmRsZU1ldGhvZENhbGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBodHRwLmNyZWF0ZVNlcnZlcihoYW5kbGVNZXRob2RDYWxsKVxuXG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5odHRwU2VydmVyLmxpc3RlbihvcHRpb25zLnBvcnQsIG9wdGlvbnMuaG9zdCwgb25MaXN0ZW5pbmcpXG4gIH0uYmluZCh0aGlzKSlcbiAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5odHRwU2VydmVyLm9uY2UoJ2Nsb3NlJywgY2FsbGJhY2spXG4gICAgdGhpcy5odHRwU2VydmVyLmNsb3NlKClcbiAgfS5iaW5kKHRoaXMpXG59XG5cbi8vIEluaGVyaXQgZnJvbSBFdmVudEVtaXR0ZXIgdG8gZW1pdCBhbmQgbGlzdGVuXG5TZXJ2ZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGVcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2ZXJcblxuIl0sIm5hbWVzIjpbImh0dHAiLCJyZXF1aXJlIiwiaHR0cHMiLCJ1cmwiLCJFdmVudEVtaXR0ZXIiLCJTZXJpYWxpemVyIiwiRGVzZXJpYWxpemVyIiwiU2VydmVyIiwib3B0aW9ucyIsImlzU2VjdXJlIiwib25MaXN0ZW5pbmciLCJ0aGF0IiwicGFyc2UiLCJob3N0IiwiaG9zdG5hbWUiLCJwYXRoIiwicGF0aG5hbWUiLCJoYW5kbGVNZXRob2RDYWxsIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiZGVzZXJpYWxpemVyIiwiZGVzZXJpYWxpemVNZXRob2RDYWxsIiwiZXJyb3IiLCJtZXRob2ROYW1lIiwicGFyYW1zIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX2V2ZW50cyIsImVtaXQiLCJ2YWx1ZSIsInhtbCIsInNlcmlhbGl6ZUZhdWx0Iiwic2VyaWFsaXplTWV0aG9kUmVzcG9uc2UiLCJ3cml0ZUhlYWQiLCJlbmQiLCJodHRwU2VydmVyIiwiY3JlYXRlU2VydmVyIiwicHJvY2VzcyIsIm5leHRUaWNrIiwibGlzdGVuIiwicG9ydCIsImJpbmQiLCJjbG9zZSIsImNhbGxiYWNrIiwib25jZSIsIl9fcHJvdG9fXyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/server.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/xmlrpc/lib/xmlrpc.js":
/*!*******************************************!*\
  !*** ./node_modules/xmlrpc/lib/xmlrpc.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Client = __webpack_require__(/*! ./client */ \"(middleware)/./node_modules/xmlrpc/lib/client.js\"), Server = __webpack_require__(/*! ./server */ \"(middleware)/./node_modules/xmlrpc/lib/server.js\"), CustomType = __webpack_require__(/*! ./customtype */ \"(middleware)/./node_modules/xmlrpc/lib/customtype.js\"), dateFormatter = __webpack_require__(/*! ./date_formatter */ \"(middleware)/./node_modules/xmlrpc/lib/date_formatter.js\");\nvar xmlrpc = exports;\n/**\n * Creates an XML-RPC client.\n *\n * @param {Object} options - server options to make the HTTP request to\n *   - {String} host\n *   - {Number} port\n *   - {String} url\n *   - {Boolean} cookies\n * @return {Client}\n * @see Client\n */ xmlrpc.createClient = function(options) {\n    return new Client(options, false);\n};\n/**\n * Creates an XML-RPC client that makes calls using HTTPS.\n *\n * @param {Object} options - server options to make the HTTP request to\n *   - {String} host\n *   - {Number} port\n *   - {String} url\n *   - {Boolean} cookies\n * @return {Client}\n * @see Client\n */ xmlrpc.createSecureClient = function(options) {\n    return new Client(options, true);\n};\n/**\n * Creates an XML-RPC server.\n *\n * @param {Object}options - the HTTP server options\n *   - {String} host\n *   - {Number} port\n * @return {Server}\n * @see Server\n */ xmlrpc.createServer = function(options, callback) {\n    return new Server(options, false, callback);\n};\n/**\n * Creates an XML-RPC server that uses HTTPS.\n *\n * @param {Object}options - the HTTP server options\n *   - {String} host\n *   - {Number} port\n * @return {Server}\n * @see Server\n */ xmlrpc.createSecureServer = function(options, callback) {\n    return new Server(options, true, callback);\n};\nxmlrpc.CustomType = CustomType;\nxmlrpc.dateFormatter = dateFormatter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL3htbHJwYy9saWIveG1scnBjLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDLHFFQUNqQkMsU0FBU0QsbUJBQU9BLENBQUMscUVBQ2pCRSxhQUFhRixtQkFBT0EsQ0FBQyw2RUFDckJHLGdCQUFnQkgsbUJBQU9BLENBQUM7QUFFNUIsSUFBSUksU0FBU0M7QUFFYjs7Ozs7Ozs7OztDQVVDLEdBQ0RELE9BQU9FLFlBQVksR0FBRyxTQUFTQyxPQUFPO0lBQ3BDLE9BQU8sSUFBSVIsT0FBT1EsU0FBUztBQUM3QjtBQUVBOzs7Ozs7Ozs7O0NBVUMsR0FDREgsT0FBT0ksa0JBQWtCLEdBQUcsU0FBU0QsT0FBTztJQUMxQyxPQUFPLElBQUlSLE9BQU9RLFNBQVM7QUFDN0I7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNESCxPQUFPSyxZQUFZLEdBQUcsU0FBU0YsT0FBTyxFQUFFRyxRQUFRO0lBQzlDLE9BQU8sSUFBSVQsT0FBT00sU0FBUyxPQUFPRztBQUNwQztBQUVBOzs7Ozs7OztDQVFDLEdBQ0ROLE9BQU9PLGtCQUFrQixHQUFHLFNBQVNKLE9BQU8sRUFBRUcsUUFBUTtJQUNwRCxPQUFPLElBQUlULE9BQU9NLFNBQVMsTUFBTUc7QUFDbkM7QUFFQU4sT0FBT0YsVUFBVSxHQUFHQTtBQUNwQkUsT0FBT0QsYUFBYSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveG1scnBjL2xpYi94bWxycGMuanM/ZTViOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQnKVxuICAsIFNlcnZlciA9IHJlcXVpcmUoJy4vc2VydmVyJylcbiAgLCBDdXN0b21UeXBlID0gcmVxdWlyZSgnLi9jdXN0b210eXBlJylcbiAgLCBkYXRlRm9ybWF0dGVyID0gcmVxdWlyZSgnLi9kYXRlX2Zvcm1hdHRlcicpXG5cbnZhciB4bWxycGMgPSBleHBvcnRzXG5cbi8qKlxuICogQ3JlYXRlcyBhbiBYTUwtUlBDIGNsaWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHNlcnZlciBvcHRpb25zIHRvIG1ha2UgdGhlIEhUVFAgcmVxdWVzdCB0b1xuICogICAtIHtTdHJpbmd9IGhvc3RcbiAqICAgLSB7TnVtYmVyfSBwb3J0XG4gKiAgIC0ge1N0cmluZ30gdXJsXG4gKiAgIC0ge0Jvb2xlYW59IGNvb2tpZXNcbiAqIEByZXR1cm4ge0NsaWVudH1cbiAqIEBzZWUgQ2xpZW50XG4gKi9cbnhtbHJwYy5jcmVhdGVDbGllbnQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgQ2xpZW50KG9wdGlvbnMsIGZhbHNlKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gWE1MLVJQQyBjbGllbnQgdGhhdCBtYWtlcyBjYWxscyB1c2luZyBIVFRQUy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIHNlcnZlciBvcHRpb25zIHRvIG1ha2UgdGhlIEhUVFAgcmVxdWVzdCB0b1xuICogICAtIHtTdHJpbmd9IGhvc3RcbiAqICAgLSB7TnVtYmVyfSBwb3J0XG4gKiAgIC0ge1N0cmluZ30gdXJsXG4gKiAgIC0ge0Jvb2xlYW59IGNvb2tpZXNcbiAqIEByZXR1cm4ge0NsaWVudH1cbiAqIEBzZWUgQ2xpZW50XG4gKi9cbnhtbHJwYy5jcmVhdGVTZWN1cmVDbGllbnQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgQ2xpZW50KG9wdGlvbnMsIHRydWUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBYTUwtUlBDIHNlcnZlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH1vcHRpb25zIC0gdGhlIEhUVFAgc2VydmVyIG9wdGlvbnNcbiAqICAgLSB7U3RyaW5nfSBob3N0XG4gKiAgIC0ge051bWJlcn0gcG9ydFxuICogQHJldHVybiB7U2VydmVyfVxuICogQHNlZSBTZXJ2ZXJcbiAqL1xueG1scnBjLmNyZWF0ZVNlcnZlciA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBuZXcgU2VydmVyKG9wdGlvbnMsIGZhbHNlLCBjYWxsYmFjaylcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIFhNTC1SUEMgc2VydmVyIHRoYXQgdXNlcyBIVFRQUy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH1vcHRpb25zIC0gdGhlIEhUVFAgc2VydmVyIG9wdGlvbnNcbiAqICAgLSB7U3RyaW5nfSBob3N0XG4gKiAgIC0ge051bWJlcn0gcG9ydFxuICogQHJldHVybiB7U2VydmVyfVxuICogQHNlZSBTZXJ2ZXJcbiAqL1xueG1scnBjLmNyZWF0ZVNlY3VyZVNlcnZlciA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBuZXcgU2VydmVyKG9wdGlvbnMsIHRydWUsIGNhbGxiYWNrKVxufVxuXG54bWxycGMuQ3VzdG9tVHlwZSA9IEN1c3RvbVR5cGVcbnhtbHJwYy5kYXRlRm9ybWF0dGVyID0gZGF0ZUZvcm1hdHRlclxuIl0sIm5hbWVzIjpbIkNsaWVudCIsInJlcXVpcmUiLCJTZXJ2ZXIiLCJDdXN0b21UeXBlIiwiZGF0ZUZvcm1hdHRlciIsInhtbHJwYyIsImV4cG9ydHMiLCJjcmVhdGVDbGllbnQiLCJvcHRpb25zIiwiY3JlYXRlU2VjdXJlQ2xpZW50IiwiY3JlYXRlU2VydmVyIiwiY2FsbGJhY2siLCJjcmVhdGVTZWN1cmVTZXJ2ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/xmlrpc/lib/xmlrpc.js\n");

/***/ }),

/***/ "(middleware)/./utils/getOdooSession.tsx":
/*!**********************************!*\
  !*** ./utils/getOdooSession.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_async_odoo_xmlrpc_lib_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/async-odoo-xmlrpc/lib/index */ \"(middleware)/./node_modules/async-odoo-xmlrpc/lib/index.js\");\n/* harmony import */ var _node_modules_async_odoo_xmlrpc_lib_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_async_odoo_xmlrpc_lib_index__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_iron_session_dist_index_cjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/iron-session/dist/index.cjs */ \"(middleware)/./node_modules/iron-session/dist/index.cjs\");\n/* harmony import */ var _session__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session */ \"(middleware)/./utils/session.ts\");\n\n\n\n/* harmony default export */ async function __WEBPACK_DEFAULT_EXPORT__(req, res) {\n    try {\n        const session = await (0,_node_modules_iron_session_dist_index_cjs__WEBPACK_IMPORTED_MODULE_2__.getIronSession)(req, res, _session__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n        if (!session) return res.status(403).json({\n            msg: \"NoSessionProvided\"\n        });\n        const { odoo: odooCredentials } = session;\n        const { username, password } = odooCredentials;\n        const odoo = new (_node_modules_async_odoo_xmlrpc_lib_index__WEBPACK_IMPORTED_MODULE_0___default())({\n            username,\n            password,\n            db: process.env.ODOO_DB_NAME,\n            port: 443,\n            url: process.env.ODOO_URL\n        });\n        await odoo.connect();\n        return odoo;\n    } catch (e) {\n        console.error(e);\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vdXRpbHMvZ2V0T2Rvb1Nlc3Npb24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStEO0FBQ2M7QUFHdkM7QUFFdEMsNkJBQWUsMENBQWVHLEdBQWtCLEVBQUNDLEdBQW9CO0lBQ2pFLElBQUk7UUFDQSxNQUFNQyxVQUFnQyxNQUFNSix5RkFBY0EsQ0FBQ0UsS0FBSUMsS0FBS0YsZ0RBQWFBO1FBQ2pGLElBQUcsQ0FBQ0csU0FBUyxPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLEtBQUk7UUFBbUI7UUFFbEUsTUFBTSxFQUFFQyxNQUFLQyxlQUFlLEVBQUUsR0FBR0w7UUFDakMsTUFBTSxFQUFFTSxRQUFRLEVBQUVDLFFBQVEsRUFBRSxHQUFHRjtRQUMvQixNQUFNRCxPQUFPLElBQUlULGtGQUFJQSxDQUFDO1lBQ2xCVztZQUNBQztZQUNBQyxJQUFHQyxRQUFRQyxHQUFHLENBQUNDLFlBQVk7WUFDM0JDLE1BQU07WUFDTkMsS0FBS0osUUFBUUMsR0FBRyxDQUFDSSxRQUFRO1FBQUE7UUFDN0IsTUFBTVYsS0FBS1csT0FBTztRQUVsQixPQUFPWDtJQUNYLEVBQUUsT0FBTVksR0FBRztRQUNQQyxRQUFRQyxLQUFLLENBQUNGO1FBQ2QsT0FBTztJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvZ2V0T2Rvb1Nlc3Npb24udHN4PzIwNGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9kb28gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9hc3luYy1vZG9vLXhtbHJwYy9saWIvaW5kZXhcIjtcbmltcG9ydCB7IGdldElyb25TZXNzaW9uIH0gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9pcm9uLXNlc3Npb24vZGlzdC9pbmRleC5janNcIjtcbmltcG9ydCB7IE5leHRBcGlSZXF1ZXN0IH0gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi91dGlsc1wiO1xuaW1wb3J0IHsgSXJvblNlc3Npb25XaXRoT2RvbyB9IGZyb20gXCIuLi90eXBlc1wiO1xuaW1wb3J0IHNlc3Npb25Db25maWcgZnJvbSBcIi4vc2Vzc2lvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbihyZXE6TmV4dEFwaVJlcXVlc3QscmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBzZXNzaW9uIDogSXJvblNlc3Npb25XaXRoT2RvbyA9IGF3YWl0IGdldElyb25TZXNzaW9uKHJlcSxyZXMsIHNlc3Npb25Db25maWcpXG4gICAgICAgIGlmKCFzZXNzaW9uKSByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtc2c6XCJOb1Nlc3Npb25Qcm92aWRlZFwifSlcblxuICAgICAgICBjb25zdCB7IG9kb286b2Rvb0NyZWRlbnRpYWxzIH0gPSBzZXNzaW9uO1xuICAgICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gb2Rvb0NyZWRlbnRpYWxzO1xuICAgICAgICBjb25zdCBvZG9vID0gbmV3IE9kb28oe1xuICAgICAgICAgICAgdXNlcm5hbWUsIFxuICAgICAgICAgICAgcGFzc3dvcmQsIFxuICAgICAgICAgICAgZGI6cHJvY2Vzcy5lbnYuT0RPT19EQl9OQU1FLCBcbiAgICAgICAgICAgIHBvcnQ6IDQ0MyxcbiAgICAgICAgICAgIHVybDogcHJvY2Vzcy5lbnYuT0RPT19VUkx9KTtcbiAgICAgICAgYXdhaXQgb2Rvby5jb25uZWN0KCk7XG5cbiAgICAgICAgcmV0dXJuIG9kb287XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59Il0sIm5hbWVzIjpbIk9kb28iLCJnZXRJcm9uU2Vzc2lvbiIsInNlc3Npb25Db25maWciLCJyZXEiLCJyZXMiLCJzZXNzaW9uIiwic3RhdHVzIiwianNvbiIsIm1zZyIsIm9kb28iLCJvZG9vQ3JlZGVudGlhbHMiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZGIiLCJwcm9jZXNzIiwiZW52IiwiT0RPT19EQl9OQU1FIiwicG9ydCIsInVybCIsIk9ET09fVVJMIiwiY29ubmVjdCIsImUiLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./utils/getOdooSession.tsx\n");

/***/ }),

/***/ "(middleware)/./node_modules/iron-session/dist/index.cjs":
/*!**************************************************!*\
  !*** ./node_modules/iron-session/dist/index.cjs ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar cookie = __webpack_require__(/*! cookie */ \"(middleware)/./node_modules/iron-session/node_modules/cookie/index.js\");\nvar ironWebcrypto = __webpack_require__(/*! iron-webcrypto */ \"(middleware)/./node_modules/iron-webcrypto/dist/index.cjs\");\nvar crypto = __webpack_require__(/*! uncrypto */ \"(middleware)/./node_modules/uncrypto/dist/crypto.web.mjs\");\nfunction _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar crypto__namespace = /*#__PURE__*/ _interopNamespace(crypto);\n// src/core.ts\nvar timestampSkewSec = 60;\nvar fourteenDaysInSeconds = 14 * 24 * 3600;\nvar currentMajorVersion = 2;\nvar versionDelimiter = \"~\";\nvar defaultOptions = {\n    ttl: fourteenDaysInSeconds,\n    cookieOptions: {\n        httpOnly: true,\n        secure: true,\n        sameSite: \"lax\",\n        path: \"/\"\n    }\n};\nfunction normalizeStringPasswordToMap(password) {\n    return typeof password === \"string\" ? {\n        1: password\n    } : password;\n}\nfunction parseSeal(seal) {\n    const [sealWithoutVersion, tokenVersionAsString] = seal.split(versionDelimiter);\n    const tokenVersion = tokenVersionAsString == null ? null : parseInt(tokenVersionAsString, 10);\n    return {\n        sealWithoutVersion,\n        tokenVersion\n    };\n}\nfunction computeCookieMaxAge(ttl) {\n    if (ttl === 0) {\n        return 2147483647;\n    }\n    return ttl - timestampSkewSec;\n}\nfunction getCookie(req, cookieName) {\n    return cookie.parse((\"headers\" in req && typeof req.headers.get === \"function\" ? req.headers.get(\"cookie\") : req.headers.cookie) ?? \"\")[cookieName] ?? \"\";\n}\nfunction getServerActionCookie(cookieName, cookieHandler) {\n    const cookieObject = cookieHandler.get(cookieName);\n    const cookie = cookieObject?.value;\n    if (typeof cookie === \"string\") {\n        return cookie;\n    }\n    return \"\";\n}\nfunction setCookie(res, cookieValue) {\n    if (\"headers\" in res && typeof res.headers.append === \"function\") {\n        res.headers.append(\"set-cookie\", cookieValue);\n        return;\n    }\n    let existingSetCookie = res.getHeader(\"set-cookie\") ?? [];\n    if (!Array.isArray(existingSetCookie)) {\n        existingSetCookie = [\n            existingSetCookie.toString()\n        ];\n    }\n    res.setHeader(\"set-cookie\", [\n        ...existingSetCookie,\n        cookieValue\n    ]);\n}\nfunction createSealData(_crypto) {\n    return async function sealData2(data, { password, ttl = fourteenDaysInSeconds }) {\n        const passwordsMap = normalizeStringPasswordToMap(password);\n        const mostRecentPasswordId = Math.max(...Object.keys(passwordsMap).map(Number));\n        const passwordForSeal = {\n            id: mostRecentPasswordId.toString(),\n            secret: passwordsMap[mostRecentPasswordId]\n        };\n        const seal = await ironWebcrypto.seal(_crypto, data, passwordForSeal, {\n            ...ironWebcrypto.defaults,\n            ttl: ttl * 1e3\n        });\n        return `${seal}${versionDelimiter}${currentMajorVersion}`;\n    };\n}\nfunction createUnsealData(_crypto) {\n    return async function unsealData2(seal, { password, ttl = fourteenDaysInSeconds }) {\n        const passwordsMap = normalizeStringPasswordToMap(password);\n        const { sealWithoutVersion, tokenVersion } = parseSeal(seal);\n        try {\n            const data = await ironWebcrypto.unseal(_crypto, sealWithoutVersion, passwordsMap, {\n                ...ironWebcrypto.defaults,\n                ttl: ttl * 1e3\n            }) ?? {};\n            if (tokenVersion === 2) {\n                return data;\n            }\n            return {\n                ...data.persistent\n            };\n        } catch (error) {\n            if (error instanceof Error && /^(Expired seal|Bad hmac value|Cannot find password|Incorrect number of sealed components)/.test(error.message)) {\n                return {};\n            }\n            throw error;\n        }\n    };\n}\nfunction getSessionConfig(sessionOptions) {\n    const options = {\n        ...defaultOptions,\n        ...sessionOptions,\n        cookieOptions: {\n            ...defaultOptions.cookieOptions,\n            ...sessionOptions.cookieOptions || {}\n        }\n    };\n    if (sessionOptions.cookieOptions && \"maxAge\" in sessionOptions.cookieOptions) {\n        if (sessionOptions.cookieOptions.maxAge === void 0) {\n            options.ttl = 0;\n        }\n    } else {\n        options.cookieOptions.maxAge = computeCookieMaxAge(options.ttl);\n    }\n    return options;\n}\nvar badUsageMessage = \"iron-session: Bad usage: use getIronSession(req, res, options) or getIronSession(cookieStore, options).\";\nfunction createGetIronSession(sealData2, unsealData2) {\n    return getIronSession2;\n    async function getIronSession2(reqOrCookieStore, resOrsessionOptions, sessionOptions) {\n        if (!reqOrCookieStore) {\n            throw new Error(badUsageMessage);\n        }\n        if (!resOrsessionOptions) {\n            throw new Error(badUsageMessage);\n        }\n        if (!sessionOptions) {\n            return getIronSessionFromCookieStore(reqOrCookieStore, resOrsessionOptions, sealData2, unsealData2);\n        }\n        const req = reqOrCookieStore;\n        const res = resOrsessionOptions;\n        if (!sessionOptions) {\n            throw new Error(badUsageMessage);\n        }\n        if (!sessionOptions.cookieName) {\n            throw new Error(\"iron-session: Bad usage. Missing cookie name.\");\n        }\n        if (!sessionOptions.password) {\n            throw new Error(\"iron-session: Bad usage. Missing password.\");\n        }\n        const passwordsMap = normalizeStringPasswordToMap(sessionOptions.password);\n        if (Object.values(passwordsMap).some((password)=>password.length < 32)) {\n            throw new Error(\"iron-session: Bad usage. Password must be at least 32 characters long.\");\n        }\n        let sessionConfig = getSessionConfig(sessionOptions);\n        const sealFromCookies = getCookie(req, sessionConfig.cookieName);\n        const session = sealFromCookies ? await unsealData2(sealFromCookies, {\n            password: passwordsMap,\n            ttl: sessionConfig.ttl\n        }) : {};\n        Object.defineProperties(session, {\n            updateConfig: {\n                value: function updateConfig(newSessionOptions) {\n                    sessionConfig = getSessionConfig(newSessionOptions);\n                }\n            },\n            save: {\n                value: async function save() {\n                    if (\"headersSent\" in res && res.headersSent) {\n                        throw new Error(\"iron-session: Cannot set session cookie: session.save() was called after headers were sent. Make sure to call it before any res.send() or res.end()\");\n                    }\n                    const seal = await sealData2(session, {\n                        password: passwordsMap,\n                        ttl: sessionConfig.ttl\n                    });\n                    const cookieValue = cookie.serialize(sessionConfig.cookieName, seal, sessionConfig.cookieOptions);\n                    if (cookieValue.length > 4096) {\n                        throw new Error(`iron-session: Cookie length is too big (${cookieValue.length} bytes), browsers will refuse it. Try to remove some data.`);\n                    }\n                    setCookie(res, cookieValue);\n                }\n            },\n            destroy: {\n                value: function destroy() {\n                    Object.keys(session).forEach((key)=>{\n                        delete session[key];\n                    });\n                    const cookieValue = cookie.serialize(sessionConfig.cookieName, \"\", {\n                        ...sessionConfig.cookieOptions,\n                        maxAge: 0\n                    });\n                    setCookie(res, cookieValue);\n                }\n            }\n        });\n        return session;\n    }\n}\nasync function getIronSessionFromCookieStore(cookieStore, sessionOptions, sealData2, unsealData2) {\n    if (!sessionOptions.cookieName) {\n        throw new Error(\"iron-session: Bad usage. Missing cookie name.\");\n    }\n    if (!sessionOptions.password) {\n        throw new Error(\"iron-session: Bad usage. Missing password.\");\n    }\n    const passwordsMap = normalizeStringPasswordToMap(sessionOptions.password);\n    if (Object.values(passwordsMap).some((password)=>password.length < 32)) {\n        throw new Error(\"iron-session: Bad usage. Password must be at least 32 characters long.\");\n    }\n    const sessionConfig = getSessionConfig(sessionOptions);\n    const sealFromCookies = getServerActionCookie(sessionConfig.cookieName, cookieStore);\n    const session = sealFromCookies ? await unsealData2(sealFromCookies, {\n        password: passwordsMap,\n        ttl: sessionConfig.ttl\n    }) : {};\n    Object.defineProperties(session, {\n        save: {\n            value: async function save() {\n                const seal = await sealData2(session, {\n                    password: passwordsMap,\n                    ttl: sessionConfig.ttl\n                });\n                const cookieLength = sessionConfig.cookieName.length + seal.length + JSON.stringify(sessionConfig.cookieOptions).length;\n                if (cookieLength > 4096) {\n                    throw new Error(`iron-session: Cookie length is too big (${cookieLength} bytes), browsers will refuse it. Try to remove some data.`);\n                }\n                cookieStore.set(sessionConfig.cookieName, seal, sessionConfig.cookieOptions);\n            }\n        },\n        destroy: {\n            value: function destroy() {\n                Object.keys(session).forEach((key)=>{\n                    delete session[key];\n                });\n                const cookieOptions = {\n                    ...sessionConfig.cookieOptions,\n                    maxAge: 0\n                };\n                cookieStore.set(sessionConfig.cookieName, \"\", cookieOptions);\n            }\n        }\n    });\n    return session;\n}\nvar sealData = createSealData(crypto__namespace);\nvar unsealData = createUnsealData(crypto__namespace);\nvar getIronSession = createGetIronSession(sealData, unsealData);\nexports.getIronSession = getIronSession;\nexports.sealData = sealData;\nexports.unsealData = unsealData; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/iron-session/dist/index.cjs\n");

/***/ }),

/***/ "(middleware)/./node_modules/iron-webcrypto/dist/index.cjs":
/*!****************************************************!*\
  !*** ./node_modules/iron-webcrypto/dist/index.cjs ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// node_modules/.pnpm/@smithy+util-base64@2.0.0/node_modules/@smithy/util-base64/dist-es/constants.browser.js\nvar alphabetByEncoding = {};\nvar alphabetByValue = new Array(64);\nfor(let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor(let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor(let i = 0; i < 10; i++){\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nvar bitsPerLetter = 6;\nvar bitsPerByte = 8;\nvar maxLetterValue = 63;\n// node_modules/.pnpm/@smithy+util-base64@2.0.0/node_modules/@smithy/util-base64/dist-es/fromBase64.browser.js\nvar fromBase64 = (input)=>{\n    let totalByteLength = input.length / 4 * 3;\n    if (input.slice(-2) === \"==\") {\n        totalByteLength -= 2;\n    } else if (input.slice(-1) === \"=\") {\n        totalByteLength--;\n    }\n    const out = new ArrayBuffer(totalByteLength);\n    const dataView = new DataView(out);\n    for(let i = 0; i < input.length; i += 4){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = i + 3; j <= limit; j++){\n            if (input[j] !== \"=\") {\n                if (!(input[j] in alphabetByEncoding)) {\n                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n                }\n                bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;\n                bitLength += bitsPerLetter;\n            } else {\n                bits >>= bitsPerLetter;\n            }\n        }\n        const chunkOffset = i / 4 * 3;\n        bits >>= bitLength % bitsPerByte;\n        const byteLength = Math.floor(bitLength / bitsPerByte);\n        for(let k = 0; k < byteLength; k++){\n            const offset = (byteLength - k - 1) * bitsPerByte;\n            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);\n        }\n    }\n    return new Uint8Array(out);\n};\n// node_modules/.pnpm/@smithy+util-base64@2.0.0/node_modules/@smithy/util-base64/dist-es/toBase64.browser.js\nfunction toBase64(input) {\n    let str = \"\";\n    for(let i = 0; i < input.length; i += 3){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = Math.min(i + 3, input.length); j < limit; j++){\n            bits |= input[j] << (limit - j - 1) * bitsPerByte;\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for(let k = 1; k <= bitClusterCount; k++){\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n        }\n        str += \"==\".slice(0, 4 - bitClusterCount);\n    }\n    return str;\n}\n// src/index.ts\nvar stringToBuffer = (value)=>{\n    return new TextEncoder().encode(value);\n};\nvar bufferToString = (value)=>{\n    return new TextDecoder().decode(value);\n};\nvar base64urlEncode = (value)=>toBase64(typeof value === \"string\" ? stringToBuffer(value) : value).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\nvar base64urlDecode = (value)=>fromBase64(value.replace(/-/g, \"+\").replace(/_/g, \"/\") + Array((4 - value.length % 4) % 4 + 1).join(\"=\"));\nvar defaults = {\n    encryption: {\n        saltBits: 256,\n        algorithm: \"aes-256-cbc\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    integrity: {\n        saltBits: 256,\n        algorithm: \"sha256\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    ttl: 0,\n    timestampSkewSec: 60,\n    localtimeOffsetMsec: 0\n};\nvar clone = (options)=>({\n        ...options,\n        encryption: {\n            ...options.encryption\n        },\n        integrity: {\n            ...options.integrity\n        }\n    });\nvar algorithms = {\n    \"aes-128-ctr\": {\n        keyBits: 128,\n        ivBits: 128,\n        name: \"AES-CTR\"\n    },\n    \"aes-256-cbc\": {\n        keyBits: 256,\n        ivBits: 128,\n        name: \"AES-CBC\"\n    },\n    sha256: {\n        keyBits: 256,\n        name: \"SHA-256\"\n    }\n};\nvar macFormatVersion = \"2\";\nvar macPrefix = `Fe26.${macFormatVersion}`;\nvar randomBytes = (_crypto, size)=>{\n    const bytes = new Uint8Array(size);\n    _crypto.getRandomValues(bytes);\n    return bytes;\n};\nvar randomBits = (_crypto, bits)=>{\n    if (bits < 1) throw Error(\"Invalid random bits count\");\n    const bytes = Math.ceil(bits / 8);\n    return randomBytes(_crypto, bytes);\n};\nvar pbkdf2 = async (_crypto, password, salt, iterations, keyLength, hash)=>{\n    const passwordBuffer = stringToBuffer(password);\n    const importedKey = await _crypto.subtle.importKey(\"raw\", passwordBuffer, \"PBKDF2\", false, [\n        \"deriveBits\"\n    ]);\n    const saltBuffer = stringToBuffer(salt);\n    const params = {\n        name: \"PBKDF2\",\n        hash,\n        salt: saltBuffer,\n        iterations\n    };\n    const derivation = await _crypto.subtle.deriveBits(params, importedKey, keyLength * 8);\n    return derivation;\n};\nvar generateKey = async (_crypto, password, options)=>{\n    var _a;\n    if (!(password == null ? void 0 : password.length)) throw new Error(\"Empty password\");\n    if (options == null || typeof options !== \"object\") throw new Error(\"Bad options\");\n    if (!(options.algorithm in algorithms)) throw new Error(`Unknown algorithm: ${options.algorithm}`);\n    const algorithm = algorithms[options.algorithm];\n    const result = {};\n    const hmac = (_a = options.hmac) != null ? _a : false;\n    const id = hmac ? {\n        name: \"HMAC\",\n        hash: algorithm.name\n    } : {\n        name: algorithm.name\n    };\n    const usage = hmac ? [\n        \"sign\",\n        \"verify\"\n    ] : [\n        \"encrypt\",\n        \"decrypt\"\n    ];\n    if (typeof password === \"string\") {\n        if (password.length < options.minPasswordlength) throw new Error(`Password string too short (min ${options.minPasswordlength} characters required)`);\n        let { salt = \"\" } = options;\n        if (!salt) {\n            const { saltBits = 0 } = options;\n            if (!saltBits) throw new Error(\"Missing salt and saltBits options\");\n            const randomSalt = randomBits(_crypto, saltBits);\n            salt = [\n                ...new Uint8Array(randomSalt)\n            ].map((x)=>x.toString(16).padStart(2, \"0\")).join(\"\");\n        }\n        const derivedKey = await pbkdf2(_crypto, password, salt, options.iterations, algorithm.keyBits / 8, \"SHA-1\");\n        const importedEncryptionKey = await _crypto.subtle.importKey(\"raw\", derivedKey, id, false, usage);\n        result.key = importedEncryptionKey;\n        result.salt = salt;\n    } else {\n        if (password.length < algorithm.keyBits / 8) throw new Error(\"Key buffer (password) too small\");\n        result.key = await _crypto.subtle.importKey(\"raw\", password, id, false, usage);\n        result.salt = \"\";\n    }\n    if (options.iv) result.iv = options.iv;\n    else if (\"ivBits\" in algorithm) result.iv = randomBits(_crypto, algorithm.ivBits);\n    return result;\n};\nvar encrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const textBuffer = stringToBuffer(data);\n    const encrypted = await _crypto.subtle.encrypt({\n        name: algorithms[options.algorithm].name,\n        iv: key.iv\n    }, key.key, textBuffer);\n    return {\n        encrypted: new Uint8Array(encrypted),\n        key\n    };\n};\nvar decrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const decrypted = await _crypto.subtle.decrypt({\n        name: algorithms[options.algorithm].name,\n        iv: key.iv\n    }, key.key, typeof data === \"string\" ? stringToBuffer(data) : data);\n    return bufferToString(new Uint8Array(decrypted));\n};\nvar hmacWithPassword = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, {\n        ...options,\n        hmac: true\n    });\n    const textBuffer = stringToBuffer(data);\n    const signed = await _crypto.subtle.sign({\n        name: \"HMAC\"\n    }, key.key, textBuffer);\n    const digest = base64urlEncode(new Uint8Array(signed));\n    return {\n        digest,\n        salt: key.salt\n    };\n};\nvar normalizePassword = (password)=>{\n    if (typeof password === \"string\" || password instanceof Uint8Array) return {\n        encryption: password,\n        integrity: password\n    };\n    if (\"secret\" in password) return {\n        id: password.id,\n        encryption: password.secret,\n        integrity: password.secret\n    };\n    return {\n        id: password.id,\n        encryption: password.encryption,\n        integrity: password.integrity\n    };\n};\nvar seal = async (_crypto, object, password, options)=>{\n    if (!password) throw Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const objectString = JSON.stringify(object);\n    const pass = normalizePassword(password);\n    const { id = \"\" } = pass;\n    if (id && !/^\\w+$/.test(id)) throw new Error(\"Invalid password id\");\n    const { encrypted, key } = await encrypt(_crypto, pass.encryption, opts.encryption, objectString);\n    const encryptedB64 = base64urlEncode(new Uint8Array(encrypted));\n    const iv = base64urlEncode(key.iv);\n    const expiration = opts.ttl ? now + opts.ttl : \"\";\n    const macBaseString = `${macPrefix}*${id}*${key.salt}*${iv}*${encryptedB64}*${expiration}`;\n    const mac = await hmacWithPassword(_crypto, pass.integrity, opts.integrity, macBaseString);\n    const sealed = `${macBaseString}*${mac.salt}*${mac.digest}`;\n    return sealed;\n};\nvar fixedTimeComparison = (a, b)=>{\n    let mismatch = a.length === b.length ? 0 : 1;\n    if (mismatch) b = a;\n    for(let i = 0; i < a.length; i += 1)mismatch |= a.charCodeAt(i) ^ b.charCodeAt(i);\n    return mismatch === 0;\n};\nvar unseal = async (_crypto, sealed, password, options)=>{\n    if (!password) throw Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const parts = sealed.split(\"*\");\n    if (parts.length !== 8) throw new Error(\"Incorrect number of sealed components\");\n    const prefix = parts[0];\n    let passwordId = parts[1];\n    const encryptionSalt = parts[2];\n    const encryptionIv = parts[3];\n    const encryptedB64 = parts[4];\n    const expiration = parts[5];\n    const hmacSalt = parts[6];\n    const hmac = parts[7];\n    const macBaseString = `${prefix}*${passwordId}*${encryptionSalt}*${encryptionIv}*${encryptedB64}*${expiration}`;\n    if (macPrefix !== prefix) throw new Error(\"Wrong mac prefix\");\n    if (expiration) {\n        if (!/^\\d+$/.exec(expiration)) throw new Error(\"Invalid expiration\");\n        const exp = parseInt(expiration, 10);\n        if (exp <= now - opts.timestampSkewSec * 1e3) throw new Error(\"Expired seal\");\n    }\n    if (typeof password === \"undefined\" || typeof password === \"string\" && password.length === 0) throw new Error(\"Empty password\");\n    let pass = \"\";\n    passwordId = passwordId || \"default\";\n    if (typeof password === \"string\" || password instanceof Uint8Array) pass = password;\n    else if (!(passwordId in password)) throw new Error(`Cannot find password: ${passwordId}`);\n    else pass = password[passwordId];\n    pass = normalizePassword(pass);\n    const macOptions = opts.integrity;\n    macOptions.salt = hmacSalt;\n    const mac = await hmacWithPassword(_crypto, pass.integrity, macOptions, macBaseString);\n    if (!fixedTimeComparison(mac.digest, hmac)) throw new Error(\"Bad hmac value\");\n    const encrypted = base64urlDecode(encryptedB64);\n    const decryptOptions = opts.encryption;\n    decryptOptions.salt = encryptionSalt;\n    decryptOptions.iv = base64urlDecode(encryptionIv);\n    const decrypted = await decrypt(_crypto, pass.encryption, decryptOptions, encrypted);\n    if (decrypted) return JSON.parse(decrypted);\n    return null;\n};\nexports.algorithms = algorithms;\nexports.base64urlDecode = base64urlDecode;\nexports.base64urlEncode = base64urlEncode;\nexports.bufferToString = bufferToString;\nexports.clone = clone;\nexports.decrypt = decrypt;\nexports.defaults = defaults;\nexports.encrypt = encrypt;\nexports.generateKey = generateKey;\nexports.hmacWithPassword = hmacWithPassword;\nexports.macFormatVersion = macFormatVersion;\nexports.macPrefix = macPrefix;\nexports.randomBits = randomBits;\nexports.seal = seal;\nexports.stringToBuffer = stringToBuffer;\nexports.unseal = unseal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/iron-webcrypto/dist/index.cjs\n");

/***/ })

});